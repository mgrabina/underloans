{
  "address": "0x515FD671Fd208b0409D795f14499EeB38b43838a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVerifier",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "contract IHasher",
          "name": "_hasher",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_merkleTreeHeight",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nullifierHash",
          "type": "bytes32"
        }
      ],
      "name": "ConsumeCode",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "leafIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewCode",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FIELD_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_HISTORY_SIZE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZERO_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_commitments",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_proofs",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_roots",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_nullifierHashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "address payable[]",
          "name": "_tos",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_validationsArgs",
          "type": "bytes[]"
        }
      ],
      "name": "bulkConsumeEarlyAccessCodes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_commitments",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[][]",
          "name": "_validationModules",
          "type": "address[][]"
        }
      ],
      "name": "bulkCreateEarlyAccessCodes",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "_validationsArgs",
          "type": "bytes[]"
        }
      ],
      "name": "consumeCode",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "_validationsArgs",
          "type": "bytes[]"
        }
      ],
      "name": "consumeEarlyAccessCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_validationModules",
          "type": "address[]"
        }
      ],
      "name": "createEarlyAccessCode",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRootIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "filledSubtrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHasher",
          "name": "_hasher",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_left",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_right",
          "type": "bytes32"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasher",
      "outputs": [
        {
          "internalType": "contract IHasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "isKnownRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        }
      ],
      "name": "isSpent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_nullifierHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "isSpentArray",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "spent",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levels",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nullifierHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_validationModules",
          "type": "address[]"
        }
      ],
      "name": "setCode",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "validationModules",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "zeros",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xcaea87132b6b5fe83e1debf8b5dea7609f019593c3afb1997a79e862b659115d",
  "receipt": {
    "to": null,
    "from": "0xEB71ed911e4dFc35Da80103a72fE983C8c709F33",
    "contractAddress": "0x515FD671Fd208b0409D795f14499EeB38b43838a",
    "transactionIndex": 2,
    "gasUsed": "10488962",
    "logsBloom": "0x
    "blockHash": "0x80265c12fc63238b6fdf0c718a64425acccebaac2c851e306469f20f8b2f409c",
    "transactionHash": "0xcaea87132b6b5fe83e1debf8b5dea7609f019593c3afb1997a79e862b659115d",
    "logs": [],
    "blockNumber": 77899558,
    "cumulativeGasUsed": "10775163",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x973341708B135A567a25933DD85535A73474CBA3",
    "0x2BeaaFc616ddc229F40B05FA9c68ffdbC8e80789",
    20
  ],
  "numDeployments": 2,
  "solcInputHash": "9a4520b3e8e67bd927beafeaa18d7e2c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"contract IHasher\",\"name\":\"_hasher\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_merkleTreeHeight\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nullifierHash\",\"type\":\"bytes32\"}],\"name\":\"ConsumeCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"leafIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewCode\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIELD_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_HISTORY_SIZE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_commitments\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_proofs\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_roots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_nullifierHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"address payable[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_validationsArgs\",\"type\":\"bytes[]\"}],\"name\":\"bulkConsumeEarlyAccessCodes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_commitments\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[][]\",\"name\":\"_validationModules\",\"type\":\"address[][]\"}],\"name\":\"bulkCreateEarlyAccessCodes\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_validationsArgs\",\"type\":\"bytes[]\"}],\"name\":\"consumeCode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_validationsArgs\",\"type\":\"bytes[]\"}],\"name\":\"consumeEarlyAccessCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_validationModules\",\"type\":\"address[]\"}],\"name\":\"createEarlyAccessCode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRootIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"filledSubtrees\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHasher\",\"name\":\"_hasher\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_right\",\"type\":\"bytes32\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasher\",\"outputs\":[{\"internalType\":\"contract IHasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"isKnownRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"}],\"name\":\"isSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_nullifierHashes\",\"type\":\"bytes32[]\"}],\"name\":\"isSpentArray\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"spent\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levels\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nullifierHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_validationModules\",\"type\":\"address[]\"}],\"name\":\"setCode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validationModules\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"zeros\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"consumeCode(bytes32,bytes,bytes32,bytes32,address,bytes[])\":{\"details\":\"Consume a code from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all codes in the contract - hash of unique codes nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)\"},\"getLastRoot()\":{\"details\":\"Returns the last root\"},\"hashLeftRight(address,bytes32,bytes32)\":{\"details\":\"Hash 2 tree leaves, returns MiMC(_left, _right)\"},\"isKnownRoot(bytes32)\":{\"details\":\"Whether the root is present in the root history\"},\"isSpent(bytes32)\":{\"details\":\"whether a note is already spent \"},\"isSpentArray(bytes32[])\":{\"details\":\"whether an array of notes is already spent \"},\"setCode(bytes32,address[])\":{\"details\":\"Set new code.\",\"params\":{\"_commitment\":\"the note commitment, which is PedersenHash(nullifier + secret)\"}},\"zeros(uint256)\":{\"details\":\"provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/useCases/EarlyAccessCodes.sol\":\"EarlyAccessCodes\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/CommitProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./helpers/MerkleTreeWithHistory.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./modules/IValidationModule.sol\\\";\\n\\ninterface IVerifier {\\n  function verifyProof(bytes memory _proof, uint256[6] memory _input) external returns (bool);\\n}\\n\\ncontract CommitProtocol is MerkleTreeWithHistory, ReentrancyGuard {\\n  IVerifier public immutable verifier;\\n \\n  mapping(bytes32 => bool) public nullifierHashes;\\n  // we store all commitments just to prevent accidental creations with the same commitment\\n  mapping(bytes32 => bool) public commitments;\\n\\n  // commitments to validation modules \\n  mapping(bytes32 => address[]) public validationModules;\\n\\n  event NewCode(bytes32 indexed commitment, uint32 leafIndex, uint256 timestamp);\\n  event ConsumeCode(address to, bytes32 nullifierHash);\\n\\n  /**\\n    @dev The constructor\\n    @param _verifier the address of SNARK verifier for this contract\\n    @param _hasher the address of MiMC hash contract\\n    @param _merkleTreeHeight the height of codes' Merkle Tree\\n  */\\n  constructor(\\n    IVerifier _verifier,\\n    IHasher _hasher,\\n    uint32 _merkleTreeHeight\\n  ) MerkleTreeWithHistory(_merkleTreeHeight, _hasher) {\\n    verifier = _verifier;\\n  }\\n\\n  /**\\n    @dev Set new code.\\n    @param _commitment the note commitment, which is PedersenHash(nullifier + secret)\\n  */\\n  function setCode(bytes32 _commitment, address[] calldata _validationModules) public virtual payable nonReentrant {\\n    require(!commitments[_commitment], \\\"The commitment has been submitted\\\");\\n\\n    uint32 insertedIndex = _insert(_commitment);\\n    commitments[_commitment] = true;\\n\\n    for (uint256 i = 0; i < _validationModules.length; i++) {\\n      validationModules[_commitment].push(_validationModules[i]);\\n    }\\n\\n    emit NewCode(_commitment, insertedIndex, block.timestamp);\\n  }\\n\\n\\n  /**\\n    @dev Consume a code from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs\\n    `input` array consists of:\\n      - merkle root of all codes in the contract\\n      - hash of unique codes nullifier to prevent double spends\\n      - the recipient of funds\\n      - optional fee that goes to the transaction sender (usually a relay)\\n  */\\n  function consumeCode(\\n    bytes32 _commitment,\\n    bytes memory _proof,\\n    bytes32 _root,\\n    bytes32 _nullifierHash,\\n    address payable _recipient,\\n    bytes[] memory _validationsArgs\\n  ) public virtual payable nonReentrant {\\n    require(!nullifierHashes[_nullifierHash], \\\"The note has been already spent\\\");\\n    require(isKnownRoot(_root), \\\"Cannot find your merkle root\\\"); // Make sure to use a recent one\\n        \\n    require(\\n      verifier.verifyProof(\\n        _proof,\\n        [uint256(_root), uint256(_nullifierHash), uint256(uint160(address(_recipient))),0 ,0, 0]\\n      ),\\n      \\\"Invalid withdraw proof\\\"\\n    );\\n\\n    for (uint256 i = 0; i < validationModules[_commitment].length; i++) {\\n      IValidationModule(validationModules[_commitment][i]).validate(_validationsArgs[i]);\\n    }\\n\\n    nullifierHashes[_nullifierHash] = true;\\n\\n    emit ConsumeCode(_recipient, _nullifierHash);\\n  }\\n\\n  /** @dev whether a note is already spent */\\n  function isSpent(bytes32 _nullifierHash) public view returns (bool) {\\n    return nullifierHashes[_nullifierHash];\\n  }\\n\\n  /** @dev whether an array of notes is already spent */\\n  function isSpentArray(bytes32[] calldata _nullifierHashes) external view returns (bool[] memory spent) {\\n    spent = new bool[](_nullifierHashes.length);\\n    for (uint256 i = 0; i < _nullifierHashes.length; i++) {\\n      if (isSpent(_nullifierHashes[i])) {\\n        spent[i] = true;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xc6a9b726d92b596a465a45c3adc82a1510adc510219cc22816884dc5126e7b60\",\"license\":\"MIT\"},\"contracts/helpers/MerkleTreeWithHistory.sol\":{\"content\":\"// https://tornado.cash\\n/*\\n * d888888P                                           dP              a88888b.                   dP\\n *    88                                              88             d8'   `88                   88\\n *    88    .d8888b. 88d888b. 88d888b. .d8888b. .d888b88 .d8888b.    88        .d8888b. .d8888b. 88d888b.\\n *    88    88'  `88 88'  `88 88'  `88 88'  `88 88'  `88 88'  `88    88        88'  `88 Y8ooooo. 88'  `88\\n *    88    88.  .88 88       88    88 88.  .88 88.  .88 88.  .88 dP Y8.   .88 88.  .88       88 88    88\\n *    dP    `88888P' dP       dP    dP `88888P8 `88888P8 `88888P' 88  Y88888P' `88888P8 `88888P' dP    dP\\n * ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IHasher {\\n  function MiMCSponge(uint256 in_xL, uint256 in_xR) external pure returns (uint256 xL, uint256 xR);\\n}\\n\\ncontract MerkleTreeWithHistory {\\n  uint256 public constant FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n  uint256 public constant ZERO_VALUE = 21663839004416932945382355908790599225266501822907911457504978515578255421292; // = keccak256(\\\"tornado\\\") % FIELD_SIZE\\n  IHasher public immutable hasher;\\n\\n  uint32 public levels;\\n\\n  // the following variables are made public for easier testing and debugging and\\n  // are not supposed to be accessed in regular code\\n\\n  // filledSubtrees and roots could be bytes32[size], but using mappings makes it cheaper because\\n  // it removes index range check on every interaction\\n  mapping(uint256 => bytes32) public filledSubtrees;\\n  mapping(uint256 => bytes32) public roots;\\n  uint32 public constant ROOT_HISTORY_SIZE = 30;\\n  uint32 public currentRootIndex = 0;\\n  uint32 public nextIndex = 0;\\n\\n  constructor(uint32 _levels, IHasher _hasher) {\\n    require(_levels > 0, \\\"_levels should be greater than zero\\\");\\n    require(_levels < 32, \\\"_levels should be less than 32\\\");\\n    levels = _levels;\\n    hasher = _hasher;\\n\\n    for (uint32 i = 0; i < _levels; i++) {\\n      filledSubtrees[i] = zeros(i);\\n    }\\n\\n    roots[0] = zeros(_levels - 1);\\n  }\\n\\n  /**\\n    @dev Hash 2 tree leaves, returns MiMC(_left, _right)\\n  */\\n  function hashLeftRight(\\n    IHasher _hasher,\\n    bytes32 _left,\\n    bytes32 _right\\n  ) public pure returns (bytes32) {\\n    require(uint256(_left) < FIELD_SIZE, \\\"_left should be inside the field\\\");\\n    require(uint256(_right) < FIELD_SIZE, \\\"_right should be inside the field\\\");\\n    uint256 R = uint256(_left);\\n    uint256 C = 0;\\n    (R, C) = _hasher.MiMCSponge(R, C);\\n    R = addmod(R, uint256(_right), FIELD_SIZE);\\n    (R, C) = _hasher.MiMCSponge(R, C);\\n    return bytes32(R);\\n  }\\n\\n  function _insert(bytes32 _leaf) internal returns (uint32 index) {\\n    uint32 _nextIndex = nextIndex;\\n    require(_nextIndex != uint32(2)**levels, \\\"Merkle tree is full. No more leaves can be added\\\");\\n    uint32 currentIndex = _nextIndex;\\n    bytes32 currentLevelHash = _leaf;\\n    bytes32 left;\\n    bytes32 right;\\n\\n    for (uint32 i = 0; i < levels; i++) {\\n      if (currentIndex % 2 == 0) {\\n        left = currentLevelHash;\\n        right = zeros(i);\\n        filledSubtrees[i] = currentLevelHash;\\n      } else {\\n        left = filledSubtrees[i];\\n        right = currentLevelHash;\\n      }\\n      currentLevelHash = hashLeftRight(hasher, left, right);\\n      currentIndex /= 2;\\n    }\\n\\n    uint32 newRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\\n    currentRootIndex = newRootIndex;\\n    roots[newRootIndex] = currentLevelHash;\\n    nextIndex = _nextIndex + 1;\\n    return _nextIndex;\\n  }\\n\\n  /**\\n    @dev Whether the root is present in the root history\\n  */\\n  function isKnownRoot(bytes32 _root) public view returns (bool) {\\n    if (_root == 0) {\\n      return false;\\n    }\\n    uint32 _currentRootIndex = currentRootIndex;\\n    uint32 i = _currentRootIndex;\\n    do {\\n      if (_root == roots[i]) {\\n        return true;\\n      }\\n      if (i == 0) {\\n        i = ROOT_HISTORY_SIZE;\\n      }\\n      i--;\\n    } while (i != _currentRootIndex);\\n    return false;\\n  }\\n\\n  /**\\n    @dev Returns the last root\\n  */\\n  function getLastRoot() public view returns (bytes32) {\\n    return roots[currentRootIndex];\\n  }\\n\\n  /// @dev provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\\n  function zeros(uint256 i) public pure returns (bytes32) {\\n    if (i == 0) return bytes32(0x2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c);\\n    else if (i == 1) return bytes32(0x256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d);\\n    else if (i == 2) return bytes32(0x1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200);\\n    else if (i == 3) return bytes32(0x20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb);\\n    else if (i == 4) return bytes32(0x0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9);\\n    else if (i == 5) return bytes32(0x24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959);\\n    else if (i == 6) return bytes32(0x1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c);\\n    else if (i == 7) return bytes32(0x19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4);\\n    else if (i == 8) return bytes32(0x261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80);\\n    else if (i == 9) return bytes32(0x0058459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007);\\n    else if (i == 10) return bytes32(0x1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30);\\n    else if (i == 11) return bytes32(0x1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5);\\n    else if (i == 12) return bytes32(0x0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f);\\n    else if (i == 13) return bytes32(0x1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd);\\n    else if (i == 14) return bytes32(0x133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108);\\n    else if (i == 15) return bytes32(0x13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6);\\n    else if (i == 16) return bytes32(0x1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854);\\n    else if (i == 17) return bytes32(0x0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea);\\n    else if (i == 18) return bytes32(0x24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d);\\n    else if (i == 19) return bytes32(0x198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05);\\n    else if (i == 20) return bytes32(0x29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4);\\n    else if (i == 21) return bytes32(0x19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967);\\n    else if (i == 22) return bytes32(0x1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453);\\n    else if (i == 23) return bytes32(0x10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48);\\n    else if (i == 24) return bytes32(0x0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1);\\n    else if (i == 25) return bytes32(0x019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c);\\n    else if (i == 26) return bytes32(0x2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99);\\n    else if (i == 27) return bytes32(0x2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354);\\n    else if (i == 28) return bytes32(0x002df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d);\\n    else if (i == 29) return bytes32(0x104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427);\\n    else if (i == 30) return bytes32(0x1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb);\\n    else if (i == 31) return bytes32(0x2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc);\\n    else revert(\\\"Index out of bounds\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x7ca5c42171d3a80191c56b126a47f86093075bece4fa96eace305f8ee3d4f6ae\",\"license\":\"MIT\"},\"contracts/modules/IValidationModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IValidationModule {\\n  function validate(bytes calldata arg) external returns (bool);\\n}\",\"keccak256\":\"0xbce3d3ab208ca1c7fd5e6500f0836c0b99c6dd4b172ebb27bab1a41d2322f94f\",\"license\":\"MIT\"},\"contracts/useCases/EarlyAccessCodes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../CommitProtocol.sol\\\";\\n\\ncontract EarlyAccessCodes is CommitProtocol {\\n\\n  constructor(\\n    IVerifier _verifier,\\n    IHasher _hasher,\\n    uint32 _merkleTreeHeight\\n  ) CommitProtocol(_verifier, _hasher, _merkleTreeHeight) {}\\n\\n  function createEarlyAccessCode(bytes32 _commitment, address[] calldata _validationModules) public payable {\\n    super.setCode(_commitment, _validationModules);\\n  }\\n\\n  function consumeEarlyAccessCode(\\n    bytes32 _commitment,\\n    bytes calldata _proof,\\n    bytes32 _root,\\n    bytes32 _nullifierHash,\\n    address payable _to,\\n    bytes[] calldata _validationsArgs\\n  ) public {\\n    super.consumeCode(_commitment,_proof, _root, _nullifierHash, _to, _validationsArgs);\\n  }\\n\\n  function bulkCreateEarlyAccessCodes(bytes32[] calldata _commitments, address[][] calldata _validationModules) public payable {\\n    for (uint256 i = 0; i < _commitments.length; i++) {\\n      createEarlyAccessCode(_commitments[i], _validationModules[i]);\\n    }\\n  }\\n\\n  function bulkConsumeEarlyAccessCodes(\\n    bytes32[] calldata _commitments,\\n    bytes[] calldata _proofs,\\n    bytes32[] calldata _roots,\\n    bytes32[] calldata _nullifierHashes,\\n    address payable[] calldata _tos,\\n    bytes[] calldata _validationsArgs\\n  ) public {\\n    for (uint256 i = 0; i < _commitments.length; i++) {\\n      consumeEarlyAccessCode(_commitments[i], _proofs[i], _roots[i], _nullifierHashes[i], _tos[i], _validationsArgs);\\n    }\\n  }\\n}\",\"keccak256\":\"0xe33faa87500da5aa5a0006e3670cca613018f098ed7e0345a62e59e39e9690a2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600380546001600160401b03191690553480156200002157600080fd5b5060405162002a3f38038062002a3f833981016040819052620000449162000847565b828282808260008263ffffffff1611620000b15760405162461bcd60e51b815260206004820152602360248201527f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60448201526265726f60e81b60648201526084015b60405180910390fd5b60208263ffffffff1610620001095760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e20333200006044820152606401620000a8565b6000805463ffffffff191663ffffffff84161781556001600160a01b0382166080525b8263ffffffff168163ffffffff1610156200017d576200015263ffffffff8216620001e5565b63ffffffff8216600090815260016020526040902055806200017481620008b9565b9150506200012c565b506200019b6200018f600184620008df565b63ffffffff16620001e5565b6000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b555050600160045550506001600160a01b031660a0525062000906915050565b6000816000036200021757507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b816001036200024757507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b816002036200027757507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b81600303620002a757507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b81600403620002d757507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b816005036200030757507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b816006036200033757507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b816007036200036757507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b816008036200039757507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b81600903620003c657507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a03620003f657507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b036200042657507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c036200045657507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d036200048657507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e03620004b657507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f03620004e657507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b816010036200051657507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b816011036200054657507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b816012036200057657507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b81601303620005a657507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b81601403620005d657507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b816015036200060657507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b816016036200063657507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b816017036200066657507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b816018036200069657507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b81601903620006c657507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a03620006f657507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b036200072657507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c036200075557507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d036200078557507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e03620007b557507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f03620007e557507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e6473000000000000000000000000006044820152606401620000a8565b6001600160a01b03811681146200084457600080fd5b50565b6000806000606084860312156200085d57600080fd5b83516200086a816200082e565b60208501519093506200087d816200082e565b604085015190925063ffffffff811681146200089857600080fd5b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff808316818103620008d557620008d5620008a3565b6001019392505050565b63ffffffff828116828216039080821115620008ff57620008ff620008a3565b5092915050565b60805160a0516121056200093a600039600081816101c201526106430152600081816104b5015261160401526121056000f3fe6080604052600436106101665760003560e01c80639fa12d0b116100d1578063e5285dcc1161008a578063ed33639f11610064578063ed33639f146104a3578063f178e47c146104d7578063f8f5342414610504578063fc7e9c6f1461051757600080fd5b8063e5285dcc1461041f578063e82955881461044f578063ec7329591461046f57600080fd5b80639fa12d0b14610353578063b07e1ffd14610380578063ba70f757146103a0578063c2b40ae4146103ca578063cc013d85146103f7578063cd87a3b41461040a57600080fd5b80636d9833e3116101235780636d9833e314610286578063838a11fd146102a6578063839df945146102c65780638ea3099e146102f657806390eeb02b14610316578063917cdce01461033357600080fd5b806317cc915c1461016b5780632b7ac3f3146101b05780633e7fd3b4146101fc578063414a37ba146102115780634ecf518b146102415780636c31a67d14610273575b600080fd5b34801561017757600080fd5b5061019b6101863660046116d9565b60056020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b3480156101bc57600080fd5b506101e47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101a7565b61020f61020a36600461184e565b61053c565b005b34801561021d57600080fd5b506102336000805160206120b083398151915281565b6040519081526020016101a7565b34801561024d57600080fd5b5060005461025e9063ffffffff1681565b60405163ffffffff90911681526020016101a7565b61020f610281366004611940565b610857565b34801561029257600080fd5b5061019b6102a13660046116d9565b610867565b3480156102b257600080fd5b506101e46102c136600461198b565b6108e5565b3480156102d257600080fd5b5061019b6102e13660046116d9565b60066020526000908152604090205460ff1681565b34801561030257600080fd5b506102336103113660046119ad565b61091d565b34801561032257600080fd5b5060035461025e9063ffffffff1681565b34801561033f57600080fd5b5061020f61034e3660046119e2565b610aea565b34801561035f57600080fd5b5061037361036e366004611aaa565b610b3e565b6040516101a79190611aeb565b34801561038c57600080fd5b5061020f61039b366004611b31565b610c03565b3480156103ac57600080fd5b5060035463ffffffff16600090815260026020526040902054610233565b3480156103d657600080fd5b506102336103e53660046116d9565b60026020526000908152604090205481565b61020f610405366004611940565b610ccf565b34801561041657600080fd5b5061025e601e81565b34801561042b57600080fd5b5061019b61043a3660046116d9565b60009081526005602052604090205460ff1690565b34801561045b57600080fd5b5061023361046a3660046116d9565b610e35565b34801561047b57600080fd5b506102337f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b3480156104af57600080fd5b506101e47f000000000000000000000000000000000000000000000000000000000000000081565b3480156104e357600080fd5b506102336104f23660046116d9565b60016020526000908152604090205481565b61020f610512366004611c6e565b611458565b34801561052357600080fd5b5060035461025e90640100000000900463ffffffff1681565b6105446114bc565b60008381526005602052604090205460ff16156105a85760405162461bcd60e51b815260206004820152601f60248201527f546865206e6f746520686173206265656e20616c7265616479207370656e740060448201526064015b60405180910390fd5b6105b184610867565b6105fd5760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742066696e6420796f7572206d65726b6c6520726f6f7400000000604482015260640161059f565b6040805160c081018252858152602081018590526001600160a01b03848116828401526000606083018190526080830181905260a0830152915163695ef6f960e01b81527f00000000000000000000000000000000000000000000000000000000000000009092169163695ef6f99161067b91899190600401611d1f565b6020604051808303816000875af115801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190611d65565b6107035760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2103bb4ba34323930bb90383937b7b360511b604482015260640161059f565b60005b6000878152600760205260409020548110156107e857600087815260076020526040902080548290811061073c5761073c611d8e565b60009182526020909120015482516001600160a01b039091169063c16e50ef9084908490811061076e5761076e611d8e565b60200260200101516040518263ffffffff1660e01b81526004016107929190611da4565b6020604051808303816000875af11580156107b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d59190611d65565b50806107e081611dcd565b915050610706565b50600083815260056020908152604091829020805460ff1916600117905581516001600160a01b03851681529081018590527f9ebe94a87e9d85fb44a2b38b11c3b10117eba3fbd045c54a8577bc62540d5d75910160405180910390a161084f6001600455565b505050505050565b610862838383610ccf565b505050565b600081810361087857506000919050565b60035463ffffffff16805b63ffffffff811660009081526002602052604090205484036108a9575060019392505050565b8063ffffffff166000036108bb5750601e5b806108c581611de6565b9150508163ffffffff168163ffffffff1603610883575060009392505050565b6007602052816000526040600020818154811061090157600080fd5b6000918252602090912001546001600160a01b03169150829050565b60006000805160206120b0833981519152831061097c5760405162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c64604482015260640161059f565b6000805160206120b083398151915282106109e35760405162461bcd60e51b815260206004820152602160248201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c6044820152601960fa1b606482015260840161059f565b60405163f47d33b560e01b81526004810184905260006024820181905284916001600160a01b0387169063f47d33b5906044016040805180830381865afa158015610a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a569190611e06565b90925090506000805160206120b083398151915284830860405163f47d33b560e01b815260048101829052602481018390529092506001600160a01b0387169063f47d33b5906044016040805180830381865afa158015610abb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adf9190611e06565b509695505050505050565b610b348888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a925089915088905061020a8789611e40565b5050505050505050565b6060816001600160401b03811115610b5857610b586116f2565b604051908082528060200260200182016040528015610b81578160200160208202803683370190505b50905060005b82811015610bfc57610bc0848483818110610ba457610ba4611d8e565b9050602002013560009081526005602052604090205460ff1690565b15610bea576001828281518110610bd957610bd9611d8e565b911515602092830291909101909101525b80610bf481611dcd565b915050610b87565b5092915050565b60005b8b811015610cc057610cae8d8d83818110610c2357610c23611d8e565b905060200201358c8c84818110610c3c57610c3c611d8e565b9050602002810190610c4e9190611e4d565b8c8c86818110610c6057610c60611d8e565b905060200201358b8b87818110610c7957610c79611d8e565b905060200201358a8a88818110610c9257610c92611d8e565b9050602002016020810190610ca79190611e93565b8989610aea565b80610cb881611dcd565b915050610c06565b50505050505050505050505050565b610cd76114bc565b60008381526006602052604090205460ff1615610d405760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b606482015260840161059f565b6000610d4b846114e6565b6000858152600660205260408120805460ff191660011790559091505b82811015610de9576000858152600760205260409020848483818110610d9057610d90611d8e565b9050602002016020810190610da59190611e93565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b0390921691909117905580610de181611dcd565b915050610d68565b506040805163ffffffff8316815242602082015285917fee825d3f4d0fa209d8e2a39afe24a21286d8dc103d63061a2ed322db4ce018e3910160405180910390a2506108626001600455565b600081600003610e6657507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b81600103610e9557507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b81600203610ec457507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b81600303610ef357507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b81600403610f2257507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b81600503610f5157507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b81600603610f8057507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b81600703610faf57507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b81600803610fde57507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b8160090361100c57507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a0361103b57507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b0361106a57507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c0361109957507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d036110c857507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e036110f757507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f0361112657507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b8160100361115557507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b8160110361118457507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b816012036111b357507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b816013036111e257507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b8160140361121157507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b8160150361124057507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b8160160361126f57507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b8160170361129e57507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b816018036112cd57507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b816019036112fc57507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a0361132b57507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b0361135a57507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c0361138857507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d036113b757507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e036113e657507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f0361141557507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b604482015260640161059f565b919050565b60005b838110156114b5576114a385858381811061147857611478611d8e565b9050602002013584848481811061149157611491611d8e565b90506020028101906102819190611eb0565b806114ad81611dcd565b91505061145b565b5050505050565b6002600454036114df57604051633ee5aeb560e01b815260040160405180910390fd5b6002600455565b60035460008054909163ffffffff64010000000090910481169161150c9116600261200c565b63ffffffff168163ffffffff160361157f5760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b606482015260840161059f565b8083600080805b60005463ffffffff908116908216101561164b576115a5600286612029565b63ffffffff166000036115e3578392506115c48163ffffffff16610e35565b63ffffffff8216600090815260016020526040902085905591506115ff565b63ffffffff811660009081526001602052604090205492508391505b61162a7f0000000000000000000000000000000000000000000000000000000000000000848461091d565b935061163760028661204c565b9450806116438161206f565b915050611586565b50600354600090601e906116669063ffffffff166001612092565b6116709190612029565b6003805463ffffffff191663ffffffff8316908117909155600090815260026020526040902085905590506116a6866001612092565b6003805463ffffffff929092166401000000000267ffffffff000000001990921691909117905550939695505050505050565b6000602082840312156116eb57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611730576117306116f2565b604052919050565b600082601f83011261174957600080fd5b81356001600160401b03811115611762576117626116f2565b611775601f8201601f1916602001611708565b81815284602083860101111561178a57600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160a01b03811681146117bc57600080fd5b50565b8035611453816117a7565b60006001600160401b03808411156117e4576117e46116f2565b8360051b60206117f5818301611708565b8681529350908401908084018783111561180e57600080fd5b855b83811015611842578035858111156118285760008081fd5b6118348a828a01611738565b835250908201908201611810565b50505050509392505050565b60008060008060008060c0878903121561186757600080fd5b8635955060208701356001600160401b038082111561188557600080fd5b6118918a838b01611738565b96506040890135955060608901359450608089013591506118b1826117a7565b90925060a088013590808211156118c757600080fd5b508701601f810189136118d957600080fd5b6118e8898235602084016117ca565b9150509295509295509295565b60008083601f84011261190757600080fd5b5081356001600160401b0381111561191e57600080fd5b6020830191508360208260051b850101111561193957600080fd5b9250929050565b60008060006040848603121561195557600080fd5b8335925060208401356001600160401b0381111561197257600080fd5b61197e868287016118f5565b9497909650939450505050565b6000806040838503121561199e57600080fd5b50508035926020909101359150565b6000806000606084860312156119c257600080fd5b83356119cd816117a7565b95602085013595506040909401359392505050565b60008060008060008060008060c0898b0312156119fe57600080fd5b8835975060208901356001600160401b0380821115611a1c57600080fd5b818b0191508b601f830112611a3057600080fd5b813581811115611a3f57600080fd5b8c6020828501011115611a5157600080fd5b602083019950975060408b0135965060608b01359550611a7360808c016117bf565b945060a08b0135915080821115611a8957600080fd5b50611a968b828c016118f5565b999c989b5096995094979396929594505050565b60008060208385031215611abd57600080fd5b82356001600160401b03811115611ad357600080fd5b611adf858286016118f5565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015611b25578351151583529284019291840191600101611b07565b50909695505050505050565b60008060008060008060008060008060008060c08d8f031215611b5357600080fd5b6001600160401b038d351115611b6857600080fd5b611b758e8e358f016118f5565b909c509a506001600160401b0360208e01351115611b9257600080fd5b611ba28e60208f01358f016118f5565b909a5098506001600160401b0360408e01351115611bbf57600080fd5b611bcf8e60408f01358f016118f5565b90985096506001600160401b0360608e01351115611bec57600080fd5b611bfc8e60608f01358f016118f5565b90965094506001600160401b0360808e01351115611c1957600080fd5b611c298e60808f01358f016118f5565b90945092506001600160401b0360a08e01351115611c4657600080fd5b611c568e60a08f01358f016118f5565b81935080925050509295989b509295989b509295989b565b60008060008060408587031215611c8457600080fd5b84356001600160401b0380821115611c9b57600080fd5b611ca7888389016118f5565b90965094506020870135915080821115611cc057600080fd5b50611ccd878288016118f5565b95989497509550505050565b6000815180845260005b81811015611cff57602081850181015186830182015201611ce3565b506000602082860101526020601f19601f83011685010191505092915050565b60e081526000611d3260e0830185611cd9565b905060208083018460005b6006811015611d5a57815183529183019190830190600101611d3d565b505050509392505050565b600060208284031215611d7757600080fd5b81518015158114611d8757600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b602081526000611d876020830184611cd9565b634e487b7160e01b600052601160045260246000fd5b600060018201611ddf57611ddf611db7565b5060010190565b600063ffffffff821680611dfc57611dfc611db7565b6000190192915050565b60008060408385031215611e1957600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601260045260246000fd5b6000611d873684846117ca565b6000808335601e19843603018112611e6457600080fd5b8301803591506001600160401b03821115611e7e57600080fd5b60200191503681900382131561193957600080fd5b600060208284031215611ea557600080fd5b8135611d87816117a7565b6000808335601e19843603018112611ec757600080fd5b8301803591506001600160401b03821115611ee157600080fd5b6020019150600581901b360382131561193957600080fd5b600181815b80851115611f36578163ffffffff04821115611f1c57611f1c611db7565b80851615611f2957918102915b93841c9390800290611efe565b509250929050565b600082611f4d57506001612006565b81611f5a57506000612006565b8160018114611f705760028114611f7a57611fab565b6001915050612006565b60ff841115611f8b57611f8b611db7565b6001841b915063ffffffff821115611fa557611fa5611db7565b50612006565b5060208310610133831016604e8410600b8410161715611fe2575081810a63ffffffff811115611fdd57611fdd611db7565b612006565b611fec8383611ef9565b8063ffffffff0482111561200257612002611db7565b0290505b92915050565b600063ffffffff612021818516828516611f3e565b949350505050565b600063ffffffff8084168061204057612040611e2a565b92169190910692915050565b600063ffffffff8084168061206357612063611e2a565b92169190910492915050565b600063ffffffff80831681810361208857612088611db7565b6001019392505050565b63ffffffff818116838216019080821115610bfc57610bfc611db756fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a2646970667358221220033b8e8e380805469acda05c5d09ec480f9288fc33bbf7e9b473c8f004eea79364736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101665760003560e01c80639fa12d0b116100d1578063e5285dcc1161008a578063ed33639f11610064578063ed33639f146104a3578063f178e47c146104d7578063f8f5342414610504578063fc7e9c6f1461051757600080fd5b8063e5285dcc1461041f578063e82955881461044f578063ec7329591461046f57600080fd5b80639fa12d0b14610353578063b07e1ffd14610380578063ba70f757146103a0578063c2b40ae4146103ca578063cc013d85146103f7578063cd87a3b41461040a57600080fd5b80636d9833e3116101235780636d9833e314610286578063838a11fd146102a6578063839df945146102c65780638ea3099e146102f657806390eeb02b14610316578063917cdce01461033357600080fd5b806317cc915c1461016b5780632b7ac3f3146101b05780633e7fd3b4146101fc578063414a37ba146102115780634ecf518b146102415780636c31a67d14610273575b600080fd5b34801561017757600080fd5b5061019b6101863660046116d9565b60056020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b3480156101bc57600080fd5b506101e47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101a7565b61020f61020a36600461184e565b61053c565b005b34801561021d57600080fd5b506102336000805160206120b083398151915281565b6040519081526020016101a7565b34801561024d57600080fd5b5060005461025e9063ffffffff1681565b60405163ffffffff90911681526020016101a7565b61020f610281366004611940565b610857565b34801561029257600080fd5b5061019b6102a13660046116d9565b610867565b3480156102b257600080fd5b506101e46102c136600461198b565b6108e5565b3480156102d257600080fd5b5061019b6102e13660046116d9565b60066020526000908152604090205460ff1681565b34801561030257600080fd5b506102336103113660046119ad565b61091d565b34801561032257600080fd5b5060035461025e9063ffffffff1681565b34801561033f57600080fd5b5061020f61034e3660046119e2565b610aea565b34801561035f57600080fd5b5061037361036e366004611aaa565b610b3e565b6040516101a79190611aeb565b34801561038c57600080fd5b5061020f61039b366004611b31565b610c03565b3480156103ac57600080fd5b5060035463ffffffff16600090815260026020526040902054610233565b3480156103d657600080fd5b506102336103e53660046116d9565b60026020526000908152604090205481565b61020f610405366004611940565b610ccf565b34801561041657600080fd5b5061025e601e81565b34801561042b57600080fd5b5061019b61043a3660046116d9565b60009081526005602052604090205460ff1690565b34801561045b57600080fd5b5061023361046a3660046116d9565b610e35565b34801561047b57600080fd5b506102337f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b3480156104af57600080fd5b506101e47f000000000000000000000000000000000000000000000000000000000000000081565b3480156104e357600080fd5b506102336104f23660046116d9565b60016020526000908152604090205481565b61020f610512366004611c6e565b611458565b34801561052357600080fd5b5060035461025e90640100000000900463ffffffff1681565b6105446114bc565b60008381526005602052604090205460ff16156105a85760405162461bcd60e51b815260206004820152601f60248201527f546865206e6f746520686173206265656e20616c7265616479207370656e740060448201526064015b60405180910390fd5b6105b184610867565b6105fd5760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742066696e6420796f7572206d65726b6c6520726f6f7400000000604482015260640161059f565b6040805160c081018252858152602081018590526001600160a01b03848116828401526000606083018190526080830181905260a0830152915163695ef6f960e01b81527f00000000000000000000000000000000000000000000000000000000000000009092169163695ef6f99161067b91899190600401611d1f565b6020604051808303816000875af115801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190611d65565b6107035760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2103bb4ba34323930bb90383937b7b360511b604482015260640161059f565b60005b6000878152600760205260409020548110156107e857600087815260076020526040902080548290811061073c5761073c611d8e565b60009182526020909120015482516001600160a01b039091169063c16e50ef9084908490811061076e5761076e611d8e565b60200260200101516040518263ffffffff1660e01b81526004016107929190611da4565b6020604051808303816000875af11580156107b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d59190611d65565b50806107e081611dcd565b915050610706565b50600083815260056020908152604091829020805460ff1916600117905581516001600160a01b03851681529081018590527f9ebe94a87e9d85fb44a2b38b11c3b10117eba3fbd045c54a8577bc62540d5d75910160405180910390a161084f6001600455565b505050505050565b610862838383610ccf565b505050565b600081810361087857506000919050565b60035463ffffffff16805b63ffffffff811660009081526002602052604090205484036108a9575060019392505050565b8063ffffffff166000036108bb5750601e5b806108c581611de6565b9150508163ffffffff168163ffffffff1603610883575060009392505050565b6007602052816000526040600020818154811061090157600080fd5b6000918252602090912001546001600160a01b03169150829050565b60006000805160206120b0833981519152831061097c5760405162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c64604482015260640161059f565b6000805160206120b083398151915282106109e35760405162461bcd60e51b815260206004820152602160248201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c6044820152601960fa1b606482015260840161059f565b60405163f47d33b560e01b81526004810184905260006024820181905284916001600160a01b0387169063f47d33b5906044016040805180830381865afa158015610a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a569190611e06565b90925090506000805160206120b083398151915284830860405163f47d33b560e01b815260048101829052602481018390529092506001600160a01b0387169063f47d33b5906044016040805180830381865afa158015610abb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adf9190611e06565b509695505050505050565b610b348888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a925089915088905061020a8789611e40565b5050505050505050565b6060816001600160401b03811115610b5857610b586116f2565b604051908082528060200260200182016040528015610b81578160200160208202803683370190505b50905060005b82811015610bfc57610bc0848483818110610ba457610ba4611d8e565b9050602002013560009081526005602052604090205460ff1690565b15610bea576001828281518110610bd957610bd9611d8e565b911515602092830291909101909101525b80610bf481611dcd565b915050610b87565b5092915050565b60005b8b811015610cc057610cae8d8d83818110610c2357610c23611d8e565b905060200201358c8c84818110610c3c57610c3c611d8e565b9050602002810190610c4e9190611e4d565b8c8c86818110610c6057610c60611d8e565b905060200201358b8b87818110610c7957610c79611d8e565b905060200201358a8a88818110610c9257610c92611d8e565b9050602002016020810190610ca79190611e93565b8989610aea565b80610cb881611dcd565b915050610c06565b50505050505050505050505050565b610cd76114bc565b60008381526006602052604090205460ff1615610d405760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b606482015260840161059f565b6000610d4b846114e6565b6000858152600660205260408120805460ff191660011790559091505b82811015610de9576000858152600760205260409020848483818110610d9057610d90611d8e565b9050602002016020810190610da59190611e93565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b0390921691909117905580610de181611dcd565b915050610d68565b506040805163ffffffff8316815242602082015285917fee825d3f4d0fa209d8e2a39afe24a21286d8dc103d63061a2ed322db4ce018e3910160405180910390a2506108626001600455565b600081600003610e6657507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b81600103610e9557507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b81600203610ec457507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b81600303610ef357507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b81600403610f2257507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b81600503610f5157507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b81600603610f8057507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b81600703610faf57507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b81600803610fde57507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b8160090361100c57507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a0361103b57507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b0361106a57507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c0361109957507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d036110c857507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e036110f757507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f0361112657507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b8160100361115557507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b8160110361118457507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b816012036111b357507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b816013036111e257507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b8160140361121157507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b8160150361124057507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b8160160361126f57507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b8160170361129e57507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b816018036112cd57507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b816019036112fc57507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a0361132b57507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b0361135a57507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c0361138857507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d036113b757507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e036113e657507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f0361141557507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b604482015260640161059f565b919050565b60005b838110156114b5576114a385858381811061147857611478611d8e565b9050602002013584848481811061149157611491611d8e565b90506020028101906102819190611eb0565b806114ad81611dcd565b91505061145b565b5050505050565b6002600454036114df57604051633ee5aeb560e01b815260040160405180910390fd5b6002600455565b60035460008054909163ffffffff64010000000090910481169161150c9116600261200c565b63ffffffff168163ffffffff160361157f5760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b606482015260840161059f565b8083600080805b60005463ffffffff908116908216101561164b576115a5600286612029565b63ffffffff166000036115e3578392506115c48163ffffffff16610e35565b63ffffffff8216600090815260016020526040902085905591506115ff565b63ffffffff811660009081526001602052604090205492508391505b61162a7f0000000000000000000000000000000000000000000000000000000000000000848461091d565b935061163760028661204c565b9450806116438161206f565b915050611586565b50600354600090601e906116669063ffffffff166001612092565b6116709190612029565b6003805463ffffffff191663ffffffff8316908117909155600090815260026020526040902085905590506116a6866001612092565b6003805463ffffffff929092166401000000000267ffffffff000000001990921691909117905550939695505050505050565b6000602082840312156116eb57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611730576117306116f2565b604052919050565b600082601f83011261174957600080fd5b81356001600160401b03811115611762576117626116f2565b611775601f8201601f1916602001611708565b81815284602083860101111561178a57600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160a01b03811681146117bc57600080fd5b50565b8035611453816117a7565b60006001600160401b03808411156117e4576117e46116f2565b8360051b60206117f5818301611708565b8681529350908401908084018783111561180e57600080fd5b855b83811015611842578035858111156118285760008081fd5b6118348a828a01611738565b835250908201908201611810565b50505050509392505050565b60008060008060008060c0878903121561186757600080fd5b8635955060208701356001600160401b038082111561188557600080fd5b6118918a838b01611738565b96506040890135955060608901359450608089013591506118b1826117a7565b90925060a088013590808211156118c757600080fd5b508701601f810189136118d957600080fd5b6118e8898235602084016117ca565b9150509295509295509295565b60008083601f84011261190757600080fd5b5081356001600160401b0381111561191e57600080fd5b6020830191508360208260051b850101111561193957600080fd5b9250929050565b60008060006040848603121561195557600080fd5b8335925060208401356001600160401b0381111561197257600080fd5b61197e868287016118f5565b9497909650939450505050565b6000806040838503121561199e57600080fd5b50508035926020909101359150565b6000806000606084860312156119c257600080fd5b83356119cd816117a7565b95602085013595506040909401359392505050565b60008060008060008060008060c0898b0312156119fe57600080fd5b8835975060208901356001600160401b0380821115611a1c57600080fd5b818b0191508b601f830112611a3057600080fd5b813581811115611a3f57600080fd5b8c6020828501011115611a5157600080fd5b602083019950975060408b0135965060608b01359550611a7360808c016117bf565b945060a08b0135915080821115611a8957600080fd5b50611a968b828c016118f5565b999c989b5096995094979396929594505050565b60008060208385031215611abd57600080fd5b82356001600160401b03811115611ad357600080fd5b611adf858286016118f5565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015611b25578351151583529284019291840191600101611b07565b50909695505050505050565b60008060008060008060008060008060008060c08d8f031215611b5357600080fd5b6001600160401b038d351115611b6857600080fd5b611b758e8e358f016118f5565b909c509a506001600160401b0360208e01351115611b9257600080fd5b611ba28e60208f01358f016118f5565b909a5098506001600160401b0360408e01351115611bbf57600080fd5b611bcf8e60408f01358f016118f5565b90985096506001600160401b0360608e01351115611bec57600080fd5b611bfc8e60608f01358f016118f5565b90965094506001600160401b0360808e01351115611c1957600080fd5b611c298e60808f01358f016118f5565b90945092506001600160401b0360a08e01351115611c4657600080fd5b611c568e60a08f01358f016118f5565b81935080925050509295989b509295989b509295989b565b60008060008060408587031215611c8457600080fd5b84356001600160401b0380821115611c9b57600080fd5b611ca7888389016118f5565b90965094506020870135915080821115611cc057600080fd5b50611ccd878288016118f5565b95989497509550505050565b6000815180845260005b81811015611cff57602081850181015186830182015201611ce3565b506000602082860101526020601f19601f83011685010191505092915050565b60e081526000611d3260e0830185611cd9565b905060208083018460005b6006811015611d5a57815183529183019190830190600101611d3d565b505050509392505050565b600060208284031215611d7757600080fd5b81518015158114611d8757600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b602081526000611d876020830184611cd9565b634e487b7160e01b600052601160045260246000fd5b600060018201611ddf57611ddf611db7565b5060010190565b600063ffffffff821680611dfc57611dfc611db7565b6000190192915050565b60008060408385031215611e1957600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601260045260246000fd5b6000611d873684846117ca565b6000808335601e19843603018112611e6457600080fd5b8301803591506001600160401b03821115611e7e57600080fd5b60200191503681900382131561193957600080fd5b600060208284031215611ea557600080fd5b8135611d87816117a7565b6000808335601e19843603018112611ec757600080fd5b8301803591506001600160401b03821115611ee157600080fd5b6020019150600581901b360382131561193957600080fd5b600181815b80851115611f36578163ffffffff04821115611f1c57611f1c611db7565b80851615611f2957918102915b93841c9390800290611efe565b509250929050565b600082611f4d57506001612006565b81611f5a57506000612006565b8160018114611f705760028114611f7a57611fab565b6001915050612006565b60ff841115611f8b57611f8b611db7565b6001841b915063ffffffff821115611fa557611fa5611db7565b50612006565b5060208310610133831016604e8410600b8410161715611fe2575081810a63ffffffff811115611fdd57611fdd611db7565b612006565b611fec8383611ef9565b8063ffffffff0482111561200257612002611db7565b0290505b92915050565b600063ffffffff612021818516828516611f3e565b949350505050565b600063ffffffff8084168061204057612040611e2a565b92169190910692915050565b600063ffffffff8084168061206357612063611e2a565b92169190910492915050565b600063ffffffff80831681810361208857612088611db7565b6001019392505050565b63ffffffff818116838216019080821115610bfc57610bfc611db756fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a2646970667358221220033b8e8e380805469acda05c5d09ec480f9288fc33bbf7e9b473c8f004eea79364736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "consumeCode(bytes32,bytes,bytes32,bytes32,address,bytes[])": {
        "details": "Consume a code from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all codes in the contract - hash of unique codes nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)"
      },
      "getLastRoot()": {
        "details": "Returns the last root"
      },
      "hashLeftRight(address,bytes32,bytes32)": {
        "details": "Hash 2 tree leaves, returns MiMC(_left, _right)"
      },
      "isKnownRoot(bytes32)": {
        "details": "Whether the root is present in the root history"
      },
      "isSpent(bytes32)": {
        "details": "whether a note is already spent "
      },
      "isSpentArray(bytes32[])": {
        "details": "whether an array of notes is already spent "
      },
      "setCode(bytes32,address[])": {
        "details": "Set new code.",
        "params": {
          "_commitment": "the note commitment, which is PedersenHash(nullifier + secret)"
        }
      },
      "zeros(uint256)": {
        "details": "provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6722,
        "contract": "contracts/useCases/EarlyAccessCodes.sol:EarlyAccessCodes",
        "label": "levels",
        "offset": 0,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 6726,
        "contract": "contracts/useCases/EarlyAccessCodes.sol:EarlyAccessCodes",
        "label": "filledSubtrees",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 6730,
        "contract": "contracts/useCases/EarlyAccessCodes.sol:EarlyAccessCodes",
        "label": "roots",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 6736,
        "contract": "contracts/useCases/EarlyAccessCodes.sol:EarlyAccessCodes",
        "label": "currentRootIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 6739,
        "contract": "contracts/useCases/EarlyAccessCodes.sol:EarlyAccessCodes",
        "label": "nextIndex",
        "offset": 4,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 4085,
        "contract": "contracts/useCases/EarlyAccessCodes.sol:EarlyAccessCodes",
        "label": "_status",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5938,
        "contract": "contracts/useCases/EarlyAccessCodes.sol:EarlyAccessCodes",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 5942,
        "contract": "contracts/useCases/EarlyAccessCodes.sol:EarlyAccessCodes",
        "label": "commitments",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 5947,
        "contract": "contracts/useCases/EarlyAccessCodes.sol:EarlyAccessCodes",
        "label": "validationModules",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}