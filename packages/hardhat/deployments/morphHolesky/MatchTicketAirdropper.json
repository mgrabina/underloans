{
  "address": "0xdd6F34ca1870929324001ce99eb7d057585cA52f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVerifier",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "contract IHasher",
          "name": "_hasher",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_merkleTreeHeight",
          "type": "uint32"
        },
        {
          "internalType": "contract IERC1155",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nullifierHash",
          "type": "bytes32"
        }
      ],
      "name": "ConsumeCode",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "leafIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewCode",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "Success",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FIELD_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_HISTORY_SIZE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "TransferAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "TransferIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZERO_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_commitments",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_proofs",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_roots",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_nullifierHashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "address payable[]",
          "name": "_tos",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_validationsArgs",
          "type": "bytes[]"
        }
      ],
      "name": "bulkConsumeMatchTicketAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_commitments",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[][]",
          "name": "_validationModules",
          "type": "address[][]"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_limits",
          "type": "uint256[]"
        }
      ],
      "name": "bulkCreateMatchTicketAirdrop",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "_validationsArgs",
          "type": "bytes[]"
        }
      ],
      "name": "consumeCode",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "_validationsArgs",
          "type": "bytes[]"
        }
      ],
      "name": "consumeMatchTicketAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "_validationsArgs",
          "type": "bytes[]"
        }
      ],
      "name": "consumeTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "consumed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_validationModules",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "createMatchTicketAirdrop",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_validationModules",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "createTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRootIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "filledSubtrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHasher",
          "name": "_hasher",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_left",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_right",
          "type": "bytes32"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasher",
      "outputs": [
        {
          "internalType": "contract IHasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "isKnownRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        }
      ],
      "name": "isSpent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_nullifierHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "isSpentArray",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "spent",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levels",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "limits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nullifierHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_validationModules",
          "type": "address[]"
        }
      ],
      "name": "setCode",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC1155",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "validationModules",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "zeros",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a3b9c38f7478ce544f83bb9f2b68eef882b66e29150969237d68dbf7181fa6d",
  "receipt": {
    "to": null,
    "from": "0xEB71ed911e4dFc35Da80103a72fE983C8c709F33",
    "contractAddress": "0xdd6F34ca1870929324001ce99eb7d057585cA52f",
    "transactionIndex": 7,
    "gasUsed": "2934136",
    "logsBloom": "0x
    "blockHash": "0xf6c061d7287425543e8ac549355e8b58e0daf675167e19e7372a32601f5cd9c2",
    "transactionHash": "0x9a3b9c38f7478ce544f83bb9f2b68eef882b66e29150969237d68dbf7181fa6d",
    "logs": [],
    "blockNumber": 7862576,
    "cumulativeGasUsed": "3353942",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8adbd2f6bc6519D86F7C259edC7A30804cbc4Ae9",
    "0x3dc846E0100A60940902d56a72743AE01A053237",
    20,
    "0x3fc401018e989B7586C68755c2f6Af4330eed6C0"
  ],
  "numDeployments": 1,
  "solcInputHash": "7df9c5d160942847a78e4c8705ba142a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"contract IHasher\",\"name\":\"_hasher\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_merkleTreeHeight\",\"type\":\"uint32\"},{\"internalType\":\"contract IERC1155\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nullifierHash\",\"type\":\"bytes32\"}],\"name\":\"ConsumeCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"leafIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"Success\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIELD_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_HISTORY_SIZE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"TransferAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"TransferIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_commitments\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_proofs\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_roots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_nullifierHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"address payable[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_validationsArgs\",\"type\":\"bytes[]\"}],\"name\":\"bulkConsumeMatchTicketAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_commitments\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[][]\",\"name\":\"_validationModules\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_limits\",\"type\":\"uint256[]\"}],\"name\":\"bulkCreateMatchTicketAirdrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_validationsArgs\",\"type\":\"bytes[]\"}],\"name\":\"consumeCode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_validationsArgs\",\"type\":\"bytes[]\"}],\"name\":\"consumeMatchTicketAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_validationsArgs\",\"type\":\"bytes[]\"}],\"name\":\"consumeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"consumed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_validationModules\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"createMatchTicketAirdrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_validationModules\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRootIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"filledSubtrees\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHasher\",\"name\":\"_hasher\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_right\",\"type\":\"bytes32\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasher\",\"outputs\":[{\"internalType\":\"contract IHasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"isKnownRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"}],\"name\":\"isSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_nullifierHashes\",\"type\":\"bytes32[]\"}],\"name\":\"isSpentArray\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"spent\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levels\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"limits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nullifierHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_validationModules\",\"type\":\"address[]\"}],\"name\":\"setCode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validationModules\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"zeros\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"consumeCode(bytes32,bytes,bytes32,bytes32,address,bytes[])\":{\"details\":\"Consume a code from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all codes in the contract - hash of unique codes nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)\"},\"getLastRoot()\":{\"details\":\"Returns the last root\"},\"hashLeftRight(address,bytes32,bytes32)\":{\"details\":\"Hash 2 tree leaves, returns MiMC(_left, _right)\"},\"isKnownRoot(bytes32)\":{\"details\":\"Whether the root is present in the root history\"},\"isSpent(bytes32)\":{\"details\":\"whether a note is already spent \"},\"isSpentArray(bytes32[])\":{\"details\":\"whether an array of notes is already spent \"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"setCode(bytes32,address[])\":{\"details\":\"Set new code.\",\"params\":{\"_commitment\":\"the note commitment, which is PedersenHash(nullifier + secret)\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"zeros(uint256)\":{\"details\":\"provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/useCases/MatchTicketAirdropper.sol\":\"MatchTicketAirdropper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/CommitProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./helpers/MerkleTreeWithHistory.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./modules/IValidationModule.sol\\\";\\n\\ninterface IVerifier {\\n  function verifyProof(bytes memory _proof, uint256[6] memory _input) external returns (bool);\\n}\\n\\ncontract CommitProtocol is MerkleTreeWithHistory, ReentrancyGuard {\\n  IVerifier public immutable verifier;\\n \\n  mapping(bytes32 => bool) public nullifierHashes;\\n  // we store all commitments just to prevent accidental creations with the same commitment\\n  mapping(bytes32 => bool) public commitments;\\n\\n  // commitments to validation modules \\n  mapping(bytes32 => address[]) public validationModules;\\n\\n  event NewCode(bytes32 indexed commitment, uint32 leafIndex, uint256 timestamp);\\n  event ConsumeCode(address to, bytes32 nullifierHash);\\n\\n  /**\\n    @dev The constructor\\n    @param _verifier the address of SNARK verifier for this contract\\n    @param _hasher the address of MiMC hash contract\\n    @param _merkleTreeHeight the height of codes' Merkle Tree\\n  */\\n  constructor(\\n    IVerifier _verifier,\\n    IHasher _hasher,\\n    uint32 _merkleTreeHeight\\n  ) MerkleTreeWithHistory(_merkleTreeHeight, _hasher) {\\n    verifier = _verifier;\\n  }\\n\\n  /**\\n    @dev Set new code.\\n    @param _commitment the note commitment, which is PedersenHash(nullifier + secret)\\n  */\\n  function setCode(bytes32 _commitment, address[] calldata _validationModules) public virtual payable nonReentrant {\\n    require(!commitments[_commitment], \\\"The commitment has been submitted\\\");\\n\\n    uint32 insertedIndex = _insert(_commitment);\\n    commitments[_commitment] = true;\\n\\n    for (uint256 i = 0; i < _validationModules.length; i++) {\\n      validationModules[_commitment].push(_validationModules[i]);\\n    }\\n\\n    emit NewCode(_commitment, insertedIndex, block.timestamp);\\n  }\\n\\n\\n  /**\\n    @dev Consume a code from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs\\n    `input` array consists of:\\n      - merkle root of all codes in the contract\\n      - hash of unique codes nullifier to prevent double spends\\n      - the recipient of funds\\n      - optional fee that goes to the transaction sender (usually a relay)\\n  */\\n  function consumeCode(\\n    bytes32 _commitment,\\n    bytes calldata _proof,\\n    bytes32 _root,\\n    bytes32 _nullifierHash,\\n    address payable _recipient,\\n    bytes[] calldata _validationsArgs\\n  ) public virtual payable nonReentrant {\\n    require(!nullifierHashes[_nullifierHash], \\\"The note has been already spent\\\");\\n    require(isKnownRoot(_root), \\\"Cannot find your merkle root\\\"); // Make sure to use a recent one\\n    \\n    require(\\n      verifier.verifyProof(\\n        _proof,\\n        [uint256(_root), uint256(_nullifierHash), uint256(uint160(address(_recipient))),0 ,0, 0]\\n      ),\\n      \\\"Invalid withdraw proof\\\"\\n    );\\n\\n    for (uint256 i = 0; i < validationModules[_commitment].length; i++) {\\n      IValidationModule(validationModules[_commitment][i]).validate(_validationsArgs[i]);\\n    }\\n\\n    nullifierHashes[_nullifierHash] = true;\\n\\n    emit ConsumeCode(_recipient, _nullifierHash);\\n  }\\n\\n  /** @dev whether a note is already spent */\\n  function isSpent(bytes32 _nullifierHash) public view returns (bool) {\\n    return nullifierHashes[_nullifierHash];\\n  }\\n\\n  /** @dev whether an array of notes is already spent */\\n  function isSpentArray(bytes32[] calldata _nullifierHashes) external view returns (bool[] memory spent) {\\n    spent = new bool[](_nullifierHashes.length);\\n    for (uint256 i = 0; i < _nullifierHashes.length; i++) {\\n      if (isSpent(_nullifierHashes[i])) {\\n        spent[i] = true;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xa5eab5e93ff380d97240111149e0e19b19e24ecdd852c0afb0689d15f3bb5478\",\"license\":\"MIT\"},\"contracts/ERC1155Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./CommitProtocol.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ncontract ERC1155Transfer is CommitProtocol {\\n  IERC1155 public token;\\n\\n  mapping(bytes32 => uint256) public TransferIds;\\n  mapping(bytes32 => uint256) public TransferAmounts;\\n\\n   constructor(\\n    IVerifier _verifier,\\n    IHasher _hasher,\\n    uint32 _merkleTreeHeight,\\n    IERC1155 _token\\n  ) CommitProtocol(_verifier, _hasher, _merkleTreeHeight) {\\n    token = _token;\\n  }\\n\\n  function createTransfer(bytes32 _commitment, address[] calldata _validationModules, uint256 _id, uint256 _amount) public payable {\\n    super.setCode(_commitment, _validationModules);\\n\\n    token.safeTransferFrom(msg.sender, address(this), _id, _amount, \\\"\\\");\\n\\n    TransferIds[_commitment] = _id;\\n    TransferAmounts[_commitment] = _amount;\\n  }\\n\\n  function consumeTransfer(\\n  bytes32 _commitment,\\n    bytes calldata _proof,\\n    bytes32 _root,\\n    bytes32 _nullifierHash,\\n    address payable _to,\\n    bytes[] calldata _validationsArgs\\n  ) public {\\n    super.consumeCode(_commitment, _proof, _root, _nullifierHash, _to, _validationsArgs);\\n\\n    uint256 id = TransferIds[_commitment];\\n    uint256 amount = TransferAmounts[_commitment];\\n\\n    token.safeTransferFrom(address(this), _to, id, amount, \\\"\\\");\\n  }\\n}\",\"keccak256\":\"0x9b7e06d0184b1b3fbf4f8dcab8824e694b1dfc1876ecc7eabd045163f8ec2c5b\",\"license\":\"MIT\"},\"contracts/helpers/MerkleTreeWithHistory.sol\":{\"content\":\"// https://tornado.cash\\n/*\\n * d888888P                                           dP              a88888b.                   dP\\n *    88                                              88             d8'   `88                   88\\n *    88    .d8888b. 88d888b. 88d888b. .d8888b. .d888b88 .d8888b.    88        .d8888b. .d8888b. 88d888b.\\n *    88    88'  `88 88'  `88 88'  `88 88'  `88 88'  `88 88'  `88    88        88'  `88 Y8ooooo. 88'  `88\\n *    88    88.  .88 88       88    88 88.  .88 88.  .88 88.  .88 dP Y8.   .88 88.  .88       88 88    88\\n *    dP    `88888P' dP       dP    dP `88888P8 `88888P8 `88888P' 88  Y88888P' `88888P8 `88888P' dP    dP\\n * ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IHasher {\\n  function MiMCSponge(uint256 in_xL, uint256 in_xR) external pure returns (uint256 xL, uint256 xR);\\n}\\n\\ncontract MerkleTreeWithHistory {\\n  uint256 public constant FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n  uint256 public constant ZERO_VALUE = 21663839004416932945382355908790599225266501822907911457504978515578255421292; // = keccak256(\\\"tornado\\\") % FIELD_SIZE\\n  IHasher public immutable hasher;\\n\\n  uint32 public levels;\\n\\n  // the following variables are made public for easier testing and debugging and\\n  // are not supposed to be accessed in regular code\\n\\n  // filledSubtrees and roots could be bytes32[size], but using mappings makes it cheaper because\\n  // it removes index range check on every interaction\\n  mapping(uint256 => bytes32) public filledSubtrees;\\n  mapping(uint256 => bytes32) public roots;\\n  uint32 public constant ROOT_HISTORY_SIZE = 30;\\n  uint32 public currentRootIndex = 0;\\n  uint32 public nextIndex = 0;\\n\\n  constructor(uint32 _levels, IHasher _hasher) {\\n    require(_levels > 0, \\\"_levels should be greater than zero\\\");\\n    require(_levels < 32, \\\"_levels should be less than 32\\\");\\n    levels = _levels;\\n    hasher = _hasher;\\n\\n    for (uint32 i = 0; i < _levels; i++) {\\n      filledSubtrees[i] = zeros(i);\\n    }\\n\\n    roots[0] = zeros(_levels - 1);\\n  }\\n\\n  /**\\n    @dev Hash 2 tree leaves, returns MiMC(_left, _right)\\n  */\\n  function hashLeftRight(\\n    IHasher _hasher,\\n    bytes32 _left,\\n    bytes32 _right\\n  ) public pure returns (bytes32) {\\n    require(uint256(_left) < FIELD_SIZE, \\\"_left should be inside the field\\\");\\n    require(uint256(_right) < FIELD_SIZE, \\\"_right should be inside the field\\\");\\n    uint256 R = uint256(_left);\\n    uint256 C = 0;\\n    (R, C) = _hasher.MiMCSponge(R, C);\\n    R = addmod(R, uint256(_right), FIELD_SIZE);\\n    (R, C) = _hasher.MiMCSponge(R, C);\\n    return bytes32(R);\\n  }\\n\\n  function _insert(bytes32 _leaf) internal returns (uint32 index) {\\n    uint32 _nextIndex = nextIndex;\\n    require(_nextIndex != uint32(2)**levels, \\\"Merkle tree is full. No more leaves can be added\\\");\\n    uint32 currentIndex = _nextIndex;\\n    bytes32 currentLevelHash = _leaf;\\n    bytes32 left;\\n    bytes32 right;\\n\\n    for (uint32 i = 0; i < levels; i++) {\\n      if (currentIndex % 2 == 0) {\\n        left = currentLevelHash;\\n        right = zeros(i);\\n        filledSubtrees[i] = currentLevelHash;\\n      } else {\\n        left = filledSubtrees[i];\\n        right = currentLevelHash;\\n      }\\n      currentLevelHash = hashLeftRight(hasher, left, right);\\n      currentIndex /= 2;\\n    }\\n\\n    uint32 newRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\\n    currentRootIndex = newRootIndex;\\n    roots[newRootIndex] = currentLevelHash;\\n    nextIndex = _nextIndex + 1;\\n    return _nextIndex;\\n  }\\n\\n  /**\\n    @dev Whether the root is present in the root history\\n  */\\n  function isKnownRoot(bytes32 _root) public view returns (bool) {\\n    if (_root == 0) {\\n      return false;\\n    }\\n    uint32 _currentRootIndex = currentRootIndex;\\n    uint32 i = _currentRootIndex;\\n    do {\\n      if (_root == roots[i]) {\\n        return true;\\n      }\\n      if (i == 0) {\\n        i = ROOT_HISTORY_SIZE;\\n      }\\n      i--;\\n    } while (i != _currentRootIndex);\\n    return false;\\n  }\\n\\n  /**\\n    @dev Returns the last root\\n  */\\n  function getLastRoot() public view returns (bytes32) {\\n    return roots[currentRootIndex];\\n  }\\n\\n  /// @dev provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\\n  function zeros(uint256 i) public pure returns (bytes32) {\\n    if (i == 0) return bytes32(0x2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c);\\n    else if (i == 1) return bytes32(0x256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d);\\n    else if (i == 2) return bytes32(0x1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200);\\n    else if (i == 3) return bytes32(0x20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb);\\n    else if (i == 4) return bytes32(0x0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9);\\n    else if (i == 5) return bytes32(0x24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959);\\n    else if (i == 6) return bytes32(0x1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c);\\n    else if (i == 7) return bytes32(0x19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4);\\n    else if (i == 8) return bytes32(0x261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80);\\n    else if (i == 9) return bytes32(0x0058459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007);\\n    else if (i == 10) return bytes32(0x1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30);\\n    else if (i == 11) return bytes32(0x1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5);\\n    else if (i == 12) return bytes32(0x0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f);\\n    else if (i == 13) return bytes32(0x1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd);\\n    else if (i == 14) return bytes32(0x133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108);\\n    else if (i == 15) return bytes32(0x13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6);\\n    else if (i == 16) return bytes32(0x1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854);\\n    else if (i == 17) return bytes32(0x0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea);\\n    else if (i == 18) return bytes32(0x24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d);\\n    else if (i == 19) return bytes32(0x198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05);\\n    else if (i == 20) return bytes32(0x29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4);\\n    else if (i == 21) return bytes32(0x19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967);\\n    else if (i == 22) return bytes32(0x1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453);\\n    else if (i == 23) return bytes32(0x10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48);\\n    else if (i == 24) return bytes32(0x0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1);\\n    else if (i == 25) return bytes32(0x019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c);\\n    else if (i == 26) return bytes32(0x2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99);\\n    else if (i == 27) return bytes32(0x2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354);\\n    else if (i == 28) return bytes32(0x002df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d);\\n    else if (i == 29) return bytes32(0x104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427);\\n    else if (i == 30) return bytes32(0x1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb);\\n    else if (i == 31) return bytes32(0x2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc);\\n    else revert(\\\"Index out of bounds\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x7ca5c42171d3a80191c56b126a47f86093075bece4fa96eace305f8ee3d4f6ae\",\"license\":\"MIT\"},\"contracts/modules/IValidationModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IValidationModule {\\n  function validate(bytes calldata arg) external returns (bool);\\n}\",\"keccak256\":\"0xbce3d3ab208ca1c7fd5e6500f0836c0b99c6dd4b172ebb27bab1a41d2322f94f\",\"license\":\"MIT\"},\"contracts/useCases/MatchTicketAirdropper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../ERC1155Transfer.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\ncontract MatchTicketAirdropper is ERC1155Transfer, IERC1155Receiver {\\n    // Map for consumed MatchTickets per campaign\\n    mapping(bytes32 => uint256) public consumed;\\n    // Map for limit amount of MatchTickets per campaign\\n    mapping(bytes32 => uint256) public limits;\\n\\n    event Success(bool success);\\n\\n    constructor(\\n        IVerifier _verifier,\\n        IHasher _hasher,\\n        uint32 _merkleTreeHeight,\\n        IERC1155 _token\\n    ) ERC1155Transfer(_verifier, _hasher, _merkleTreeHeight, _token) {}\\n\\n    // Implement the onERC1155Received function\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function createMatchTicketAirdrop(\\n        bytes32 _commitment,\\n        address[] calldata _validationModules,\\n        uint256 _id,\\n        uint256 _value,\\n        uint256 limit\\n    ) public payable {\\n        limits[_commitment] = limit;\\n\\n        createTransfer(_commitment, _validationModules, _id, _value);\\n    }\\n\\n    function consumeMatchTicketAirdrop(\\n        bytes32 _commitment,\\n        bytes calldata _proof,\\n        bytes32 _root,\\n        bytes32 _nullifierHash,\\n        address payable _to,\\n        bytes[] calldata _validationsArgs\\n    ) public {\\n        require(consumed[_commitment] < limits[_commitment], \\\"MatchTicketAirdropper: Limit reached\\\");\\n\\n        consumed[_commitment] += 1;\\n        consumeTransfer(_commitment, _proof, _root, _nullifierHash, _to, _validationsArgs);\\n\\n        emit Success(true);\\n    }\\n\\n    function bulkCreateMatchTicketAirdrop(\\n        bytes32[] calldata _commitments,\\n        address[][] calldata _validationModules,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        uint256[] calldata _limits\\n    ) external payable {\\n        require(_commitments.length == _ids.length, \\\"commitments and ids length mismatch\\\");\\n        require(_commitments.length == _limits.length, \\\"commitments and limits length mismatch\\\");\\n        require(_commitments.length == _validationModules.length, \\\"commitments and validationModules length mismatch\\\");\\n\\n        for (uint256 i = 0; i < _commitments.length; i++) {\\n            createMatchTicketAirdrop(_commitments[i], _validationModules[i], _ids[i], _values[i], _limits[i]);\\n        }\\n    }\\n\\n    function bulkConsumeMatchTicketAirdrop(\\n        bytes32[] calldata _commitments,\\n        bytes[] calldata _proofs,\\n        bytes32[] calldata _roots,\\n        bytes32[] calldata _nullifierHashes,\\n        address payable[] calldata _tos,\\n        bytes[] calldata _validationsArgs\\n    ) external {\\n        require(_commitments.length == _proofs.length, \\\"commitments and proofs length mismatch\\\");\\n        require(_commitments.length == _roots.length, \\\"commitments and roots length mismatch\\\");\\n        require(_commitments.length == _nullifierHashes.length, \\\"commitments and nullifierHashes length mismatch\\\");\\n        require(_commitments.length == _tos.length, \\\"commitments and tos length mismatch\\\");\\n        require(_commitments.length == _validationsArgs.length, \\\"commitments and validationsArgs length mismatch\\\");\\n\\n        for (uint256 i = 0; i < _commitments.length; i++) {\\n            consumeMatchTicketAirdrop(_commitments[i], _proofs[i], _roots[i], _nullifierHashes[i], _tos[i], _validationsArgs);\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n      return interfaceId == type(IERC1155Receiver).interfaceId;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\",\"keccak256\":\"0x7a851320d16798609b656d27f1a84b0c36e90a73376361fb54d4d10fca546f27\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600380546001600160401b03191690553480156200002157600080fd5b506040516200330838038062003308833981016040819052620000449162000869565b83838383838383808260008263ffffffff1611620000b55760405162461bcd60e51b815260206004820152602360248201527f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60448201526265726f60e81b60648201526084015b60405180910390fd5b60208263ffffffff16106200010d5760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e20333200006044820152606401620000ac565b6000805463ffffffff191663ffffffff84161781556001600160a01b0382166080525b8263ffffffff168163ffffffff16101562000181576200015663ffffffff821662000207565b63ffffffff8216600090815260016020526040902055806200017881620008ef565b91505062000130565b506200019f6200019360018462000915565b63ffffffff1662000207565b6000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b555050600160045550506001600160a01b0390811660a052600880546001600160a01b03191692909116919091179055506200093c95505050505050565b6000816000036200023957507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b816001036200026957507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b816002036200029957507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b81600303620002c957507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b81600403620002f957507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b816005036200032957507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b816006036200035957507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b816007036200038957507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b81600803620003b957507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b81600903620003e857507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a036200041857507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b036200044857507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c036200047857507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d03620004a857507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e03620004d857507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f036200050857507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b816010036200053857507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b816011036200056857507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b816012036200059857507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b81601303620005c857507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b81601403620005f857507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b816015036200062857507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b816016036200065857507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b816017036200068857507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b81601803620006b857507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b81601903620006e857507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a036200071857507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b036200074857507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c036200077757507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d03620007a757507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e03620007d757507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f036200080757507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e6473000000000000000000000000006044820152606401620000ac565b6001600160a01b03811681146200086657600080fd5b50565b600080600080608085870312156200088057600080fd5b84516200088d8162000850565b6020860151909450620008a08162000850565b604086015190935063ffffffff81168114620008bb57600080fd5b6060860151909250620008ce8162000850565b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff8083168181036200090b576200090b620008d9565b6001019392505050565b63ffffffff828116828216039080821115620009355762000935620008d9565b5092915050565b60805160a0516129986200097060003960008181610291015261088e0152600081816106790152611d9501526129986000f3fe6080604052600436106102045760003560e01c8063b2cbf4bf11610118578063e8295588116100a0578063f178e47c1161006f578063f178e47c146106bb578063f23a6e61146106e8578063fa6997a614610715578063fc0c546a14610742578063fc7e9c6f1461076257600080fd5b8063e829558814610613578063ec73295914610633578063ed33639f14610667578063ef6c7bd81461069b57600080fd5b8063c2b40ae4116100e7578063c2b40ae41461056e578063cc013d851461059b578063cd87a3b4146105ae578063e3bd33a4146105c3578063e5285dcc146105e357600080fd5b8063b2cbf4bf146104d6578063b961ab0d146104e9578063ba70f757146104fc578063bc197c811461052657600080fd5b80635c1b7d381161019b5780638ea3099e1161016a5780638ea3099e1461042c57806390eeb02b1461044c578063990e9ff1146104695780639fa12d0b1461047c578063a5ff958b146104a957600080fd5b80635c1b7d381461038f5780636d9833e3146103bc578063838a11fd146103dc578063839df945146103fc57600080fd5b8063414a37ba116101d7578063414a37ba146102e05780634488e595146103105780634648c943146103305780634ecf518b1461035d57600080fd5b806301ffc9a71461020957806317cc915c1461024f5780632b7ac3f31461027f5780633e7fd3b4146102cb575b600080fd5b34801561021557600080fd5b5061023a610224366004611e6a565b6001600160e01b031916630271189760e51b1490565b60405190151581526020015b60405180910390f35b34801561025b57600080fd5b5061023a61026a366004611e9b565b60056020526000908152604090205460ff1681565b34801561028b57600080fd5b506102b37f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610246565b6102de6102d9366004611f58565b610787565b005b3480156102ec57600080fd5b5061030260008051602061294383398151915281565b604051908152602001610246565b34801561031c57600080fd5b506102de61032b366004611f58565b610aaa565b34801561033c57600080fd5b5061030261034b366004611e9b565b600b6020526000908152604090205481565b34801561036957600080fd5b5060005461037a9063ffffffff1681565b60405163ffffffff9091168152602001610246565b34801561039b57600080fd5b506103026103aa366004611e9b565b600c6020526000908152604090205481565b3480156103c857600080fd5b5061023a6103d7366004611e9b565b610b4d565b3480156103e857600080fd5b506102b36103f7366004611ff8565b610bcb565b34801561040857600080fd5b5061023a610417366004611e9b565b60066020526000908152604090205460ff1681565b34801561043857600080fd5b5061030261044736600461201a565b610c03565b34801561045857600080fd5b5060035461037a9063ffffffff1681565b6102de61047736600461204f565b610dd0565b34801561048857600080fd5b5061049c6104973660046120b4565b610df6565b60405161024691906120f5565b3480156104b557600080fd5b506103026104c4366004611e9b565b600a6020526000908152604090205481565b6102de6104e436600461213b565b610ebb565b6102de6104f736600461222b565b611097565b34801561050857600080fd5b5060035463ffffffff16600090815260026020526040902054610302565b34801561053257600080fd5b50610555610541366004612288565b63bc197c8160e01b98975050505050505050565b6040516001600160e01b03199091168152602001610246565b34801561057a57600080fd5b50610302610589366004611e9b565b60026020526000908152604090205481565b6102de6105a9366004612332565b61112d565b3480156105ba57600080fd5b5061037a601e81565b3480156105cf57600080fd5b506102de6105de36600461237d565b611298565b3480156105ef57600080fd5b5061023a6105fe366004611e9b565b60009081526005602052604090205460ff1690565b34801561061f57600080fd5b5061030261062e366004611e9b565b611548565b34801561063f57600080fd5b506103027f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b34801561067357600080fd5b506102b37f000000000000000000000000000000000000000000000000000000000000000081565b3480156106a757600080fd5b506102de6106b6366004611f58565b611b66565b3480156106c757600080fd5b506103026106d6366004611e9b565b60016020526000908152604090205481565b3480156106f457600080fd5b506105556107033660046124ba565b63f23a6e6160e01b9695505050505050565b34801561072157600080fd5b50610302610730366004611e9b565b60096020526000908152604090205481565b34801561074e57600080fd5b506008546102b3906001600160a01b031681565b34801561076e57600080fd5b5060035461037a90640100000000900463ffffffff1681565b61078f611c4d565b60008481526005602052604090205460ff16156107f35760405162461bcd60e51b815260206004820152601f60248201527f546865206e6f746520686173206265656e20616c7265616479207370656e740060448201526064015b60405180910390fd5b6107fc85610b4d565b6108485760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742066696e6420796f7572206d65726b6c6520726f6f740000000060448201526064016107ea565b6040805160c081018252868152602081018690526001600160a01b03858116828401526000606083018190526080830181905260a0830152915163695ef6f960e01b81527f00000000000000000000000000000000000000000000000000000000000000009092169163695ef6f9916108c7918b918b9160040161255e565b6020604051808303816000875af11580156108e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090a91906125a6565b61094f5760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2103bb4ba34323930bb90383937b7b360511b60448201526064016107ea565b60005b600089815260076020526040902054811015610a39576000898152600760205260409020805482908110610988576109886125c8565b6000918252602090912001546001600160a01b031663c16e50ef8484848181106109b4576109b46125c8565b90506020028101906109c691906125de565b6040518363ffffffff1660e01b81526004016109e3929190612624565b6020604051808303816000875af1158015610a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2691906125a6565b5080610a3181612656565b915050610952565b50600084815260056020908152604091829020805460ff1916600117905581516001600160a01b03861681529081018690527f9ebe94a87e9d85fb44a2b38b11c3b10117eba3fbd045c54a8577bc62540d5d75910160405180910390a1610aa06001600455565b5050505050505050565b610aba8888888888888888610787565b600088815260096020908152604080832054600a90925291829020546008549251637921219560e11b8152919290916001600160a01b039091169063f242432a90610b0f90309089908790879060040161266f565b600060405180830381600087803b158015610b2957600080fd5b505af1158015610b3d573d6000803e3d6000fd5b5050505050505050505050505050565b6000818103610b5e57506000919050565b60035463ffffffff16805b63ffffffff81166000908152600260205260409020548403610b8f575060019392505050565b8063ffffffff16600003610ba15750601e5b80610bab816126a7565b9150508163ffffffff168163ffffffff1603610b69575060009392505050565b60076020528160005260406000208181548110610be757600080fd5b6000918252602090912001546001600160a01b03169150829050565b60006000805160206129438339815191528310610c625760405162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c6460448201526064016107ea565b6000805160206129438339815191528210610cc95760405162461bcd60e51b815260206004820152602160248201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c6044820152601960fa1b60648201526084016107ea565b60405163f47d33b560e01b81526004810184905260006024820181905284916001600160a01b0387169063f47d33b5906044016040805180830381865afa158015610d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3c91906126c7565b909250905060008051602061294383398151915284830860405163f47d33b560e01b815260048101829052602481018390529092506001600160a01b0387169063f47d33b5906044016040805180830381865afa158015610da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc591906126c7565b509695505050505050565b6000868152600c60205260409020819055610dee8686868686611097565b505050505050565b6060816001600160401b03811115610e1057610e10612701565b604051908082528060200260200182016040528015610e39578160200160208202803683370190505b50905060005b82811015610eb457610e78848483818110610e5c57610e5c6125c8565b9050602002013560009081526005602052604090205460ff1690565b15610ea2576001828281518110610e9157610e916125c8565b911515602092830291909101909101525b80610eac81612656565b915050610e3f565b5092915050565b888514610f165760405162461bcd60e51b815260206004820152602360248201527f636f6d6d69746d656e747320616e6420696473206c656e677468206d69736d616044820152620e8c6d60eb1b60648201526084016107ea565b888114610f745760405162461bcd60e51b815260206004820152602660248201527f636f6d6d69746d656e747320616e64206c696d697473206c656e677468206d696044820152650e6dac2e8c6d60d31b60648201526084016107ea565b888714610fdd5760405162461bcd60e51b815260206004820152603160248201527f636f6d6d69746d656e747320616e642076616c69646174696f6e4d6f64756c656044820152700e640d8cadccee8d040dad2e6dac2e8c6d607b1b60648201526084016107ea565b60005b8981101561108a576110788b8b83818110610ffd57610ffd6125c8565b905060200201358a8a84818110611016576110166125c8565b90506020028101906110289190612717565b8a8a8681811061103a5761103a6125c8565b90506020020135898987818110611053576110536125c8565b9050602002013588888881811061106c5761106c6125c8565b90506020020135610dd0565b8061108281612656565b915050610fe0565b5050505050505050505050565b6110a285858561112d565b600854604051637921219560e11b81526001600160a01b039091169063f242432a906110d890339030908790879060040161266f565b600060405180830381600087803b1580156110f257600080fd5b505af1158015611106573d6000803e3d6000fd5b50505060009586525060096020908152604080872093909355600a90529320929092555050565b611135611c4d565b60008381526006602052604090205460ff161561119e5760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b60648201526084016107ea565b60006111a984611c77565b6000858152600660205260408120805460ff191660011790559091505b828110156112475760008581526007602052604090208484838181106111ee576111ee6125c8565b90506020020160208101906112039190612760565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b039092169190911790558061123f81612656565b9150506111c6565b506040805163ffffffff8316815242602082015285917fee825d3f4d0fa209d8e2a39afe24a21286d8dc103d63061a2ed322db4ce018e3910160405180910390a2506112936001600455565b505050565b8a89146112f65760405162461bcd60e51b815260206004820152602660248201527f636f6d6d69746d656e747320616e642070726f6f6673206c656e677468206d696044820152650e6dac2e8c6d60d31b60648201526084016107ea565b8a87146113535760405162461bcd60e51b815260206004820152602560248201527f636f6d6d69746d656e747320616e6420726f6f7473206c656e677468206d69736044820152640dac2e8c6d60db1b60648201526084016107ea565b8a85146113ba5760405162461bcd60e51b815260206004820152602f60248201527f636f6d6d69746d656e747320616e64206e756c6c69666965724861736865732060448201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b60648201526084016107ea565b8a83146114155760405162461bcd60e51b815260206004820152602360248201527f636f6d6d69746d656e747320616e6420746f73206c656e677468206d69736d616044820152620e8c6d60eb1b60648201526084016107ea565b8a811461147c5760405162461bcd60e51b815260206004820152602f60248201527f636f6d6d69746d656e747320616e642076616c69646174696f6e73417267732060448201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b60648201526084016107ea565b60005b8b811015611539576115278d8d8381811061149c5761149c6125c8565b905060200201358c8c848181106114b5576114b56125c8565b90506020028101906114c791906125de565b8c8c868181106114d9576114d96125c8565b905060200201358b8b878181106114f2576114f26125c8565b905060200201358a8a8881811061150b5761150b6125c8565b90506020020160208101906115209190612760565b8989611b66565b8061153181612656565b91505061147f565b50505050505050505050505050565b60008160000361157957507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b816001036115a857507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b816002036115d757507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b8160030361160657507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b8160040361163557507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b8160050361166457507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b8160060361169357507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b816007036116c257507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b816008036116f157507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b8160090361171f57507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a0361174e57507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b0361177d57507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c036117ac57507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d036117db57507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e0361180a57507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f0361183957507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b8160100361186857507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b8160110361189757507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b816012036118c657507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b816013036118f557507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b8160140361192457507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b8160150361195357507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b8160160361198257507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b816017036119b157507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b816018036119e057507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b81601903611a0f57507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a03611a3e57507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b03611a6d57507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c03611a9b57507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d03611aca57507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e03611af957507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f03611b2857507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064016107ea565b6000888152600c6020908152604080832054600b9092529091205410611bda5760405162461bcd60e51b8152602060048201526024808201527f4d617463685469636b657441697264726f707065723a204c696d69742072656160448201526318da195960e21b60648201526084016107ea565b6000888152600b60205260408120805460019290611bf990849061277d565b90915550611c0f90508888888888888888610aaa565b604051600181527f3b0a8ddef325df2bfdfa6b430ae4c8421841cd135bfa8fb5e432f200787520bb9060200160405180910390a15050505050505050565b600260045403611c7057604051633ee5aeb560e01b815260040160405180910390fd5b6002600455565b60035460008054909163ffffffff640100000000909104811691611c9d911660026128a7565b63ffffffff168163ffffffff1603611d105760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b60648201526084016107ea565b8083600080805b60005463ffffffff9081169082161015611ddc57611d366002866128bc565b63ffffffff16600003611d7457839250611d558163ffffffff16611548565b63ffffffff821660009081526001602052604090208590559150611d90565b63ffffffff811660009081526001602052604090205492508391505b611dbb7f00000000000000000000000000000000000000000000000000000000000000008484610c03565b9350611dc86002866128df565b945080611dd481612902565b915050611d17565b50600354600090601e90611df79063ffffffff166001612925565b611e0191906128bc565b6003805463ffffffff191663ffffffff831690811790915560009081526002602052604090208590559050611e37866001612925565b6003805463ffffffff929092166401000000000267ffffffff000000001990921691909117905550939695505050505050565b600060208284031215611e7c57600080fd5b81356001600160e01b031981168114611e9457600080fd5b9392505050565b600060208284031215611ead57600080fd5b5035919050565b60008083601f840112611ec657600080fd5b5081356001600160401b03811115611edd57600080fd5b602083019150836020828501011115611ef557600080fd5b9250929050565b6001600160a01b0381168114611f1157600080fd5b50565b60008083601f840112611f2657600080fd5b5081356001600160401b03811115611f3d57600080fd5b6020830191508360208260051b8501011115611ef557600080fd5b60008060008060008060008060c0898b031215611f7457600080fd5b8835975060208901356001600160401b0380821115611f9257600080fd5b611f9e8c838d01611eb4565b909950975060408b0135965060608b0135955060808b01359150611fc182611efc565b90935060a08a01359080821115611fd757600080fd5b50611fe48b828c01611f14565b999c989b5096995094979396929594505050565b6000806040838503121561200b57600080fd5b50508035926020909101359150565b60008060006060848603121561202f57600080fd5b833561203a81611efc565b95602085013595506040909401359392505050565b60008060008060008060a0878903121561206857600080fd5b8635955060208701356001600160401b0381111561208557600080fd5b61209189828a01611f14565b979a90995096976040810135976060820135975060809091013595509350505050565b600080602083850312156120c757600080fd5b82356001600160401b038111156120dd57600080fd5b6120e985828601611f14565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b8181101561212f578351151583529284019291840191600101612111565b50909695505050505050565b60008060008060008060008060008060a08b8d03121561215a57600080fd5b8a356001600160401b038082111561217157600080fd5b61217d8e838f01611f14565b909c509a5060208d013591508082111561219657600080fd5b6121a28e838f01611f14565b909a50985060408d01359150808211156121bb57600080fd5b6121c78e838f01611f14565b909850965060608d01359150808211156121e057600080fd5b6121ec8e838f01611f14565b909650945060808d013591508082111561220557600080fd5b506122128d828e01611f14565b915080935050809150509295989b9194979a5092959850565b60008060008060006080868803121561224357600080fd5b8535945060208601356001600160401b0381111561226057600080fd5b61226c88828901611f14565b9699909850959660408101359660609091013595509350505050565b60008060008060008060008060a0898b0312156122a457600080fd5b88356122af81611efc565b975060208901356122bf81611efc565b965060408901356001600160401b03808211156122db57600080fd5b6122e78c838d01611f14565b909850965060608b013591508082111561230057600080fd5b61230c8c838d01611f14565b909650945060808b013591508082111561232557600080fd5b50611fe48b828c01611eb4565b60008060006040848603121561234757600080fd5b8335925060208401356001600160401b0381111561236457600080fd5b61237086828701611f14565b9497909650939450505050565b60008060008060008060008060008060008060c08d8f03121561239f57600080fd5b6001600160401b038d3511156123b457600080fd5b6123c18e8e358f01611f14565b909c509a506001600160401b0360208e013511156123de57600080fd5b6123ee8e60208f01358f01611f14565b909a5098506001600160401b0360408e0135111561240b57600080fd5b61241b8e60408f01358f01611f14565b90985096506001600160401b0360608e0135111561243857600080fd5b6124488e60608f01358f01611f14565b90965094506001600160401b0360808e0135111561246557600080fd5b6124758e60808f01358f01611f14565b90945092506001600160401b0360a08e0135111561249257600080fd5b6124a28e60a08f01358f01611f14565b81935080925050509295989b509295989b509295989b565b60008060008060008060a087890312156124d357600080fd5b86356124de81611efc565b955060208701356124ee81611efc565b9450604087013593506060870135925060808701356001600160401b0381111561251757600080fd5b61252389828a01611eb4565b979a9699509497509295939492505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60e08152600061257260e083018587612535565b905060208083018460005b600681101561259a5781518352918301919083019060010161257d565b50505050949350505050565b6000602082840312156125b857600080fd5b81518015158114611e9457600080fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126125f557600080fd5b8301803591506001600160401b0382111561260f57600080fd5b602001915036819003821315611ef557600080fd5b602081526000612638602083018486612535565b949350505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161266857612668612640565b5060010190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b600063ffffffff8216806126bd576126bd612640565b6000190192915050565b600080604083850312156126da57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6000808335601e1984360301811261272e57600080fd5b8301803591506001600160401b0382111561274857600080fd5b6020019150600581901b3603821315611ef557600080fd5b60006020828403121561277257600080fd5b8135611e9481611efc565b8082018082111561279057612790612640565b92915050565b600181815b808511156127d3578163ffffffff048211156127b9576127b9612640565b808516156127c657918102915b93841c939080029061279b565b509250929050565b6000826127ea57506001612790565b816127f757506000612790565b816001811461280d576002811461281757612848565b6001915050612790565b60ff84111561282857612828612640565b6001841b915063ffffffff82111561284257612842612640565b50612790565b5060208310610133831016604e8410600b841016171561287f575081810a63ffffffff81111561287a5761287a612640565b612790565b6128898383612796565b8063ffffffff0482111561289f5761289f612640565b029392505050565b600063ffffffff6126388185168285166127db565b600063ffffffff808416806128d3576128d36126eb565b92169190910692915050565b600063ffffffff808416806128f6576128f66126eb565b92169190910492915050565b600063ffffffff80831681810361291b5761291b612640565b6001019392505050565b63ffffffff818116838216019080821115610eb457610eb461264056fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a26469706673582212209174e663956c1ab095ac11fdca7b9e7c18d88be5608fb25de1ebd26f5d0582fd64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106102045760003560e01c8063b2cbf4bf11610118578063e8295588116100a0578063f178e47c1161006f578063f178e47c146106bb578063f23a6e61146106e8578063fa6997a614610715578063fc0c546a14610742578063fc7e9c6f1461076257600080fd5b8063e829558814610613578063ec73295914610633578063ed33639f14610667578063ef6c7bd81461069b57600080fd5b8063c2b40ae4116100e7578063c2b40ae41461056e578063cc013d851461059b578063cd87a3b4146105ae578063e3bd33a4146105c3578063e5285dcc146105e357600080fd5b8063b2cbf4bf146104d6578063b961ab0d146104e9578063ba70f757146104fc578063bc197c811461052657600080fd5b80635c1b7d381161019b5780638ea3099e1161016a5780638ea3099e1461042c57806390eeb02b1461044c578063990e9ff1146104695780639fa12d0b1461047c578063a5ff958b146104a957600080fd5b80635c1b7d381461038f5780636d9833e3146103bc578063838a11fd146103dc578063839df945146103fc57600080fd5b8063414a37ba116101d7578063414a37ba146102e05780634488e595146103105780634648c943146103305780634ecf518b1461035d57600080fd5b806301ffc9a71461020957806317cc915c1461024f5780632b7ac3f31461027f5780633e7fd3b4146102cb575b600080fd5b34801561021557600080fd5b5061023a610224366004611e6a565b6001600160e01b031916630271189760e51b1490565b60405190151581526020015b60405180910390f35b34801561025b57600080fd5b5061023a61026a366004611e9b565b60056020526000908152604090205460ff1681565b34801561028b57600080fd5b506102b37f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610246565b6102de6102d9366004611f58565b610787565b005b3480156102ec57600080fd5b5061030260008051602061294383398151915281565b604051908152602001610246565b34801561031c57600080fd5b506102de61032b366004611f58565b610aaa565b34801561033c57600080fd5b5061030261034b366004611e9b565b600b6020526000908152604090205481565b34801561036957600080fd5b5060005461037a9063ffffffff1681565b60405163ffffffff9091168152602001610246565b34801561039b57600080fd5b506103026103aa366004611e9b565b600c6020526000908152604090205481565b3480156103c857600080fd5b5061023a6103d7366004611e9b565b610b4d565b3480156103e857600080fd5b506102b36103f7366004611ff8565b610bcb565b34801561040857600080fd5b5061023a610417366004611e9b565b60066020526000908152604090205460ff1681565b34801561043857600080fd5b5061030261044736600461201a565b610c03565b34801561045857600080fd5b5060035461037a9063ffffffff1681565b6102de61047736600461204f565b610dd0565b34801561048857600080fd5b5061049c6104973660046120b4565b610df6565b60405161024691906120f5565b3480156104b557600080fd5b506103026104c4366004611e9b565b600a6020526000908152604090205481565b6102de6104e436600461213b565b610ebb565b6102de6104f736600461222b565b611097565b34801561050857600080fd5b5060035463ffffffff16600090815260026020526040902054610302565b34801561053257600080fd5b50610555610541366004612288565b63bc197c8160e01b98975050505050505050565b6040516001600160e01b03199091168152602001610246565b34801561057a57600080fd5b50610302610589366004611e9b565b60026020526000908152604090205481565b6102de6105a9366004612332565b61112d565b3480156105ba57600080fd5b5061037a601e81565b3480156105cf57600080fd5b506102de6105de36600461237d565b611298565b3480156105ef57600080fd5b5061023a6105fe366004611e9b565b60009081526005602052604090205460ff1690565b34801561061f57600080fd5b5061030261062e366004611e9b565b611548565b34801561063f57600080fd5b506103027f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b34801561067357600080fd5b506102b37f000000000000000000000000000000000000000000000000000000000000000081565b3480156106a757600080fd5b506102de6106b6366004611f58565b611b66565b3480156106c757600080fd5b506103026106d6366004611e9b565b60016020526000908152604090205481565b3480156106f457600080fd5b506105556107033660046124ba565b63f23a6e6160e01b9695505050505050565b34801561072157600080fd5b50610302610730366004611e9b565b60096020526000908152604090205481565b34801561074e57600080fd5b506008546102b3906001600160a01b031681565b34801561076e57600080fd5b5060035461037a90640100000000900463ffffffff1681565b61078f611c4d565b60008481526005602052604090205460ff16156107f35760405162461bcd60e51b815260206004820152601f60248201527f546865206e6f746520686173206265656e20616c7265616479207370656e740060448201526064015b60405180910390fd5b6107fc85610b4d565b6108485760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742066696e6420796f7572206d65726b6c6520726f6f740000000060448201526064016107ea565b6040805160c081018252868152602081018690526001600160a01b03858116828401526000606083018190526080830181905260a0830152915163695ef6f960e01b81527f00000000000000000000000000000000000000000000000000000000000000009092169163695ef6f9916108c7918b918b9160040161255e565b6020604051808303816000875af11580156108e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090a91906125a6565b61094f5760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2103bb4ba34323930bb90383937b7b360511b60448201526064016107ea565b60005b600089815260076020526040902054811015610a39576000898152600760205260409020805482908110610988576109886125c8565b6000918252602090912001546001600160a01b031663c16e50ef8484848181106109b4576109b46125c8565b90506020028101906109c691906125de565b6040518363ffffffff1660e01b81526004016109e3929190612624565b6020604051808303816000875af1158015610a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2691906125a6565b5080610a3181612656565b915050610952565b50600084815260056020908152604091829020805460ff1916600117905581516001600160a01b03861681529081018690527f9ebe94a87e9d85fb44a2b38b11c3b10117eba3fbd045c54a8577bc62540d5d75910160405180910390a1610aa06001600455565b5050505050505050565b610aba8888888888888888610787565b600088815260096020908152604080832054600a90925291829020546008549251637921219560e11b8152919290916001600160a01b039091169063f242432a90610b0f90309089908790879060040161266f565b600060405180830381600087803b158015610b2957600080fd5b505af1158015610b3d573d6000803e3d6000fd5b5050505050505050505050505050565b6000818103610b5e57506000919050565b60035463ffffffff16805b63ffffffff81166000908152600260205260409020548403610b8f575060019392505050565b8063ffffffff16600003610ba15750601e5b80610bab816126a7565b9150508163ffffffff168163ffffffff1603610b69575060009392505050565b60076020528160005260406000208181548110610be757600080fd5b6000918252602090912001546001600160a01b03169150829050565b60006000805160206129438339815191528310610c625760405162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c6460448201526064016107ea565b6000805160206129438339815191528210610cc95760405162461bcd60e51b815260206004820152602160248201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c6044820152601960fa1b60648201526084016107ea565b60405163f47d33b560e01b81526004810184905260006024820181905284916001600160a01b0387169063f47d33b5906044016040805180830381865afa158015610d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3c91906126c7565b909250905060008051602061294383398151915284830860405163f47d33b560e01b815260048101829052602481018390529092506001600160a01b0387169063f47d33b5906044016040805180830381865afa158015610da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc591906126c7565b509695505050505050565b6000868152600c60205260409020819055610dee8686868686611097565b505050505050565b6060816001600160401b03811115610e1057610e10612701565b604051908082528060200260200182016040528015610e39578160200160208202803683370190505b50905060005b82811015610eb457610e78848483818110610e5c57610e5c6125c8565b9050602002013560009081526005602052604090205460ff1690565b15610ea2576001828281518110610e9157610e916125c8565b911515602092830291909101909101525b80610eac81612656565b915050610e3f565b5092915050565b888514610f165760405162461bcd60e51b815260206004820152602360248201527f636f6d6d69746d656e747320616e6420696473206c656e677468206d69736d616044820152620e8c6d60eb1b60648201526084016107ea565b888114610f745760405162461bcd60e51b815260206004820152602660248201527f636f6d6d69746d656e747320616e64206c696d697473206c656e677468206d696044820152650e6dac2e8c6d60d31b60648201526084016107ea565b888714610fdd5760405162461bcd60e51b815260206004820152603160248201527f636f6d6d69746d656e747320616e642076616c69646174696f6e4d6f64756c656044820152700e640d8cadccee8d040dad2e6dac2e8c6d607b1b60648201526084016107ea565b60005b8981101561108a576110788b8b83818110610ffd57610ffd6125c8565b905060200201358a8a84818110611016576110166125c8565b90506020028101906110289190612717565b8a8a8681811061103a5761103a6125c8565b90506020020135898987818110611053576110536125c8565b9050602002013588888881811061106c5761106c6125c8565b90506020020135610dd0565b8061108281612656565b915050610fe0565b5050505050505050505050565b6110a285858561112d565b600854604051637921219560e11b81526001600160a01b039091169063f242432a906110d890339030908790879060040161266f565b600060405180830381600087803b1580156110f257600080fd5b505af1158015611106573d6000803e3d6000fd5b50505060009586525060096020908152604080872093909355600a90529320929092555050565b611135611c4d565b60008381526006602052604090205460ff161561119e5760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b60648201526084016107ea565b60006111a984611c77565b6000858152600660205260408120805460ff191660011790559091505b828110156112475760008581526007602052604090208484838181106111ee576111ee6125c8565b90506020020160208101906112039190612760565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b039092169190911790558061123f81612656565b9150506111c6565b506040805163ffffffff8316815242602082015285917fee825d3f4d0fa209d8e2a39afe24a21286d8dc103d63061a2ed322db4ce018e3910160405180910390a2506112936001600455565b505050565b8a89146112f65760405162461bcd60e51b815260206004820152602660248201527f636f6d6d69746d656e747320616e642070726f6f6673206c656e677468206d696044820152650e6dac2e8c6d60d31b60648201526084016107ea565b8a87146113535760405162461bcd60e51b815260206004820152602560248201527f636f6d6d69746d656e747320616e6420726f6f7473206c656e677468206d69736044820152640dac2e8c6d60db1b60648201526084016107ea565b8a85146113ba5760405162461bcd60e51b815260206004820152602f60248201527f636f6d6d69746d656e747320616e64206e756c6c69666965724861736865732060448201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b60648201526084016107ea565b8a83146114155760405162461bcd60e51b815260206004820152602360248201527f636f6d6d69746d656e747320616e6420746f73206c656e677468206d69736d616044820152620e8c6d60eb1b60648201526084016107ea565b8a811461147c5760405162461bcd60e51b815260206004820152602f60248201527f636f6d6d69746d656e747320616e642076616c69646174696f6e73417267732060448201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b60648201526084016107ea565b60005b8b811015611539576115278d8d8381811061149c5761149c6125c8565b905060200201358c8c848181106114b5576114b56125c8565b90506020028101906114c791906125de565b8c8c868181106114d9576114d96125c8565b905060200201358b8b878181106114f2576114f26125c8565b905060200201358a8a8881811061150b5761150b6125c8565b90506020020160208101906115209190612760565b8989611b66565b8061153181612656565b91505061147f565b50505050505050505050505050565b60008160000361157957507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b816001036115a857507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b816002036115d757507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b8160030361160657507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b8160040361163557507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b8160050361166457507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b8160060361169357507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b816007036116c257507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b816008036116f157507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b8160090361171f57507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a0361174e57507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b0361177d57507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c036117ac57507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d036117db57507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e0361180a57507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f0361183957507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b8160100361186857507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b8160110361189757507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b816012036118c657507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b816013036118f557507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b8160140361192457507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b8160150361195357507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b8160160361198257507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b816017036119b157507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b816018036119e057507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b81601903611a0f57507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a03611a3e57507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b03611a6d57507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c03611a9b57507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d03611aca57507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e03611af957507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f03611b2857507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064016107ea565b6000888152600c6020908152604080832054600b9092529091205410611bda5760405162461bcd60e51b8152602060048201526024808201527f4d617463685469636b657441697264726f707065723a204c696d69742072656160448201526318da195960e21b60648201526084016107ea565b6000888152600b60205260408120805460019290611bf990849061277d565b90915550611c0f90508888888888888888610aaa565b604051600181527f3b0a8ddef325df2bfdfa6b430ae4c8421841cd135bfa8fb5e432f200787520bb9060200160405180910390a15050505050505050565b600260045403611c7057604051633ee5aeb560e01b815260040160405180910390fd5b6002600455565b60035460008054909163ffffffff640100000000909104811691611c9d911660026128a7565b63ffffffff168163ffffffff1603611d105760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b60648201526084016107ea565b8083600080805b60005463ffffffff9081169082161015611ddc57611d366002866128bc565b63ffffffff16600003611d7457839250611d558163ffffffff16611548565b63ffffffff821660009081526001602052604090208590559150611d90565b63ffffffff811660009081526001602052604090205492508391505b611dbb7f00000000000000000000000000000000000000000000000000000000000000008484610c03565b9350611dc86002866128df565b945080611dd481612902565b915050611d17565b50600354600090601e90611df79063ffffffff166001612925565b611e0191906128bc565b6003805463ffffffff191663ffffffff831690811790915560009081526002602052604090208590559050611e37866001612925565b6003805463ffffffff929092166401000000000267ffffffff000000001990921691909117905550939695505050505050565b600060208284031215611e7c57600080fd5b81356001600160e01b031981168114611e9457600080fd5b9392505050565b600060208284031215611ead57600080fd5b5035919050565b60008083601f840112611ec657600080fd5b5081356001600160401b03811115611edd57600080fd5b602083019150836020828501011115611ef557600080fd5b9250929050565b6001600160a01b0381168114611f1157600080fd5b50565b60008083601f840112611f2657600080fd5b5081356001600160401b03811115611f3d57600080fd5b6020830191508360208260051b8501011115611ef557600080fd5b60008060008060008060008060c0898b031215611f7457600080fd5b8835975060208901356001600160401b0380821115611f9257600080fd5b611f9e8c838d01611eb4565b909950975060408b0135965060608b0135955060808b01359150611fc182611efc565b90935060a08a01359080821115611fd757600080fd5b50611fe48b828c01611f14565b999c989b5096995094979396929594505050565b6000806040838503121561200b57600080fd5b50508035926020909101359150565b60008060006060848603121561202f57600080fd5b833561203a81611efc565b95602085013595506040909401359392505050565b60008060008060008060a0878903121561206857600080fd5b8635955060208701356001600160401b0381111561208557600080fd5b61209189828a01611f14565b979a90995096976040810135976060820135975060809091013595509350505050565b600080602083850312156120c757600080fd5b82356001600160401b038111156120dd57600080fd5b6120e985828601611f14565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b8181101561212f578351151583529284019291840191600101612111565b50909695505050505050565b60008060008060008060008060008060a08b8d03121561215a57600080fd5b8a356001600160401b038082111561217157600080fd5b61217d8e838f01611f14565b909c509a5060208d013591508082111561219657600080fd5b6121a28e838f01611f14565b909a50985060408d01359150808211156121bb57600080fd5b6121c78e838f01611f14565b909850965060608d01359150808211156121e057600080fd5b6121ec8e838f01611f14565b909650945060808d013591508082111561220557600080fd5b506122128d828e01611f14565b915080935050809150509295989b9194979a5092959850565b60008060008060006080868803121561224357600080fd5b8535945060208601356001600160401b0381111561226057600080fd5b61226c88828901611f14565b9699909850959660408101359660609091013595509350505050565b60008060008060008060008060a0898b0312156122a457600080fd5b88356122af81611efc565b975060208901356122bf81611efc565b965060408901356001600160401b03808211156122db57600080fd5b6122e78c838d01611f14565b909850965060608b013591508082111561230057600080fd5b61230c8c838d01611f14565b909650945060808b013591508082111561232557600080fd5b50611fe48b828c01611eb4565b60008060006040848603121561234757600080fd5b8335925060208401356001600160401b0381111561236457600080fd5b61237086828701611f14565b9497909650939450505050565b60008060008060008060008060008060008060c08d8f03121561239f57600080fd5b6001600160401b038d3511156123b457600080fd5b6123c18e8e358f01611f14565b909c509a506001600160401b0360208e013511156123de57600080fd5b6123ee8e60208f01358f01611f14565b909a5098506001600160401b0360408e0135111561240b57600080fd5b61241b8e60408f01358f01611f14565b90985096506001600160401b0360608e0135111561243857600080fd5b6124488e60608f01358f01611f14565b90965094506001600160401b0360808e0135111561246557600080fd5b6124758e60808f01358f01611f14565b90945092506001600160401b0360a08e0135111561249257600080fd5b6124a28e60a08f01358f01611f14565b81935080925050509295989b509295989b509295989b565b60008060008060008060a087890312156124d357600080fd5b86356124de81611efc565b955060208701356124ee81611efc565b9450604087013593506060870135925060808701356001600160401b0381111561251757600080fd5b61252389828a01611eb4565b979a9699509497509295939492505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60e08152600061257260e083018587612535565b905060208083018460005b600681101561259a5781518352918301919083019060010161257d565b50505050949350505050565b6000602082840312156125b857600080fd5b81518015158114611e9457600080fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126125f557600080fd5b8301803591506001600160401b0382111561260f57600080fd5b602001915036819003821315611ef557600080fd5b602081526000612638602083018486612535565b949350505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161266857612668612640565b5060010190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b600063ffffffff8216806126bd576126bd612640565b6000190192915050565b600080604083850312156126da57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6000808335601e1984360301811261272e57600080fd5b8301803591506001600160401b0382111561274857600080fd5b6020019150600581901b3603821315611ef557600080fd5b60006020828403121561277257600080fd5b8135611e9481611efc565b8082018082111561279057612790612640565b92915050565b600181815b808511156127d3578163ffffffff048211156127b9576127b9612640565b808516156127c657918102915b93841c939080029061279b565b509250929050565b6000826127ea57506001612790565b816127f757506000612790565b816001811461280d576002811461281757612848565b6001915050612790565b60ff84111561282857612828612640565b6001841b915063ffffffff82111561284257612842612640565b50612790565b5060208310610133831016604e8410600b841016171561287f575081810a63ffffffff81111561287a5761287a612640565b612790565b6128898383612796565b8063ffffffff0482111561289f5761289f612640565b029392505050565b600063ffffffff6126388185168285166127db565b600063ffffffff808416806128d3576128d36126eb565b92169190910692915050565b600063ffffffff808416806128f6576128f66126eb565b92169190910492915050565b600063ffffffff80831681810361291b5761291b612640565b6001019392505050565b63ffffffff818116838216019080821115610eb457610eb461264056fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a26469706673582212209174e663956c1ab095ac11fdca7b9e7c18d88be5608fb25de1ebd26f5d0582fd64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "consumeCode(bytes32,bytes,bytes32,bytes32,address,bytes[])": {
        "details": "Consume a code from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all codes in the contract - hash of unique codes nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)"
      },
      "getLastRoot()": {
        "details": "Returns the last root"
      },
      "hashLeftRight(address,bytes32,bytes32)": {
        "details": "Hash 2 tree leaves, returns MiMC(_left, _right)"
      },
      "isKnownRoot(bytes32)": {
        "details": "Whether the root is present in the root history"
      },
      "isSpent(bytes32)": {
        "details": "whether a note is already spent "
      },
      "isSpentArray(bytes32[])": {
        "details": "whether an array of notes is already spent "
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).",
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which previously owned the token",
          "ids": "An array containing ids of each token being transferred (order and length must match values array)",
          "operator": "The address which initiated the batch transfer (i.e. msg.sender)",
          "values": "An array containing amounts of each token being transferred (order and length must match ids array)"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"
        }
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).",
        "params": {
          "data": "Additional data with no specified format",
          "from": "The address which previously owned the token",
          "id": "The ID of the token being transferred",
          "operator": "The address which initiated the transfer (i.e. msg.sender)",
          "value": "The amount of tokens being transferred"
        },
        "returns": {
          "_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"
        }
      },
      "setCode(bytes32,address[])": {
        "details": "Set new code.",
        "params": {
          "_commitment": "the note commitment, which is PedersenHash(nullifier + secret)"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "zeros(uint256)": {
        "details": "provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3541,
        "contract": "contracts/useCases/MatchTicketAirdropper.sol:MatchTicketAirdropper",
        "label": "levels",
        "offset": 0,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 3545,
        "contract": "contracts/useCases/MatchTicketAirdropper.sol:MatchTicketAirdropper",
        "label": "filledSubtrees",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 3549,
        "contract": "contracts/useCases/MatchTicketAirdropper.sol:MatchTicketAirdropper",
        "label": "roots",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 3555,
        "contract": "contracts/useCases/MatchTicketAirdropper.sol:MatchTicketAirdropper",
        "label": "currentRootIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 3558,
        "contract": "contracts/useCases/MatchTicketAirdropper.sol:MatchTicketAirdropper",
        "label": "nextIndex",
        "offset": 4,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 1820,
        "contract": "contracts/useCases/MatchTicketAirdropper.sol:MatchTicketAirdropper",
        "label": "_status",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3106,
        "contract": "contracts/useCases/MatchTicketAirdropper.sol:MatchTicketAirdropper",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 3110,
        "contract": "contracts/useCases/MatchTicketAirdropper.sol:MatchTicketAirdropper",
        "label": "commitments",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 3115,
        "contract": "contracts/useCases/MatchTicketAirdropper.sol:MatchTicketAirdropper",
        "label": "validationModules",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 3384,
        "contract": "contracts/useCases/MatchTicketAirdropper.sol:MatchTicketAirdropper",
        "label": "token",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC1155)1458"
      },
      {
        "astId": 3388,
        "contract": "contracts/useCases/MatchTicketAirdropper.sol:MatchTicketAirdropper",
        "label": "TransferIds",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3392,
        "contract": "contracts/useCases/MatchTicketAirdropper.sol:MatchTicketAirdropper",
        "label": "TransferAmounts",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 4290,
        "contract": "contracts/useCases/MatchTicketAirdropper.sol:MatchTicketAirdropper",
        "label": "consumed",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 4294,
        "contract": "contracts/useCases/MatchTicketAirdropper.sol:MatchTicketAirdropper",
        "label": "limits",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC1155)1458": {
        "encoding": "inplace",
        "label": "contract IERC1155",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}