{
  "address": "0x8b392601107F3bf772C1B536CFd5748F6a036a08",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVerifier",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "contract IHasher",
          "name": "_hasher",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_merkleTreeHeight",
          "type": "uint32"
        },
        {
          "internalType": "contract IERC721",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nullifierHash",
          "type": "bytes32"
        }
      ],
      "name": "ConsumeCode",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "leafIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewCode",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FIELD_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_HISTORY_SIZE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "TransferId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZERO_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_commitments",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_proofs",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_roots",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_nullifierHashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "address payable[]",
          "name": "_tos",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_validationsArgs",
          "type": "bytes[]"
        }
      ],
      "name": "bulkConsumePOAPAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_commitments",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[][]",
          "name": "_validationModules",
          "type": "address[][]"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_limits",
          "type": "uint256[]"
        }
      ],
      "name": "bulkCreatePOAPAirdrop",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "_validationsArgs",
          "type": "bytes[]"
        }
      ],
      "name": "consumeCode",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "_validationsArgs",
          "type": "bytes[]"
        }
      ],
      "name": "consumePOAPAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "_validationsArgs",
          "type": "bytes[]"
        }
      ],
      "name": "consumeTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "consumed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_validationModules",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "createPOAPAirdrop",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_validationModules",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "createTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRootIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "filledSubtrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHasher",
          "name": "_hasher",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_left",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_right",
          "type": "bytes32"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasher",
      "outputs": [
        {
          "internalType": "contract IHasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "isKnownRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        }
      ],
      "name": "isSpent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_nullifierHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "isSpentArray",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "spent",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levels",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "limits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nullifierHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_validationModules",
          "type": "address[]"
        }
      ],
      "name": "setCode",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "validationModules",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "zeros",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xe72c6cbe980176ed961c409e9a31b45e2b0754a30cfb153b8cc6fae69b39771f",
  "receipt": {
    "to": null,
    "from": "0xEB71ed911e4dFc35Da80103a72fE983C8c709F33",
    "contractAddress": "0x8b392601107F3bf772C1B536CFd5748F6a036a08",
    "transactionIndex": 2,
    "gasUsed": "2751014",
    "logsBloom": "0x
    "blockHash": "0x6d59330df52d11be04ad332ffe3fb47cc7d93f46d3d2f39db292012e10f619f4",
    "transactionHash": "0xe72c6cbe980176ed961c409e9a31b45e2b0754a30cfb153b8cc6fae69b39771f",
    "logs": [],
    "blockNumber": 16352838,
    "cumulativeGasUsed": "3359291",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF65c25F287f87B2B1Ca3286121eee1959215d7F6",
    "0x7126d1631d090D0612Cf37cF75B4D36bF2673014",
    20,
    "0x22C1f6050E56d2876009903609a2cC3fEf83B415"
  ],
  "numDeployments": 1,
  "solcInputHash": "c154c0cd5037b6d407216d813b5d963a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"contract IHasher\",\"name\":\"_hasher\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_merkleTreeHeight\",\"type\":\"uint32\"},{\"internalType\":\"contract IERC721\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nullifierHash\",\"type\":\"bytes32\"}],\"name\":\"ConsumeCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"leafIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewCode\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIELD_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_HISTORY_SIZE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"TransferId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_commitments\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_proofs\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_roots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_nullifierHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"address payable[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_validationsArgs\",\"type\":\"bytes[]\"}],\"name\":\"bulkConsumePOAPAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_commitments\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[][]\",\"name\":\"_validationModules\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_limits\",\"type\":\"uint256[]\"}],\"name\":\"bulkCreatePOAPAirdrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_validationsArgs\",\"type\":\"bytes[]\"}],\"name\":\"consumeCode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_validationsArgs\",\"type\":\"bytes[]\"}],\"name\":\"consumePOAPAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_validationsArgs\",\"type\":\"bytes[]\"}],\"name\":\"consumeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"consumed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_validationModules\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"createPOAPAirdrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_validationModules\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"createTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRootIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"filledSubtrees\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHasher\",\"name\":\"_hasher\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_right\",\"type\":\"bytes32\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasher\",\"outputs\":[{\"internalType\":\"contract IHasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"isKnownRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"}],\"name\":\"isSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_nullifierHashes\",\"type\":\"bytes32[]\"}],\"name\":\"isSpentArray\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"spent\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levels\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"limits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nullifierHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_validationModules\",\"type\":\"address[]\"}],\"name\":\"setCode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validationModules\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"zeros\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"consumeCode(bytes32,bytes,bytes32,bytes32,address,bytes[])\":{\"details\":\"Consume a code from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all codes in the contract - hash of unique codes nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)\"},\"getLastRoot()\":{\"details\":\"Returns the last root\"},\"hashLeftRight(address,bytes32,bytes32)\":{\"details\":\"Hash 2 tree leaves, returns MiMC(_left, _right)\"},\"isKnownRoot(bytes32)\":{\"details\":\"Whether the root is present in the root history\"},\"isSpent(bytes32)\":{\"details\":\"whether a note is already spent \"},\"isSpentArray(bytes32[])\":{\"details\":\"whether an array of notes is already spent \"},\"setCode(bytes32,address[])\":{\"details\":\"Set new code.\",\"params\":{\"_commitment\":\"the note commitment, which is PedersenHash(nullifier + secret)\"}},\"zeros(uint256)\":{\"details\":\"provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/useCases/POAPAirdropper.sol\":\"POAPAirdropper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/CommitProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./helpers/MerkleTreeWithHistory.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./modules/IValidationModule.sol\\\";\\n\\ninterface IVerifier {\\n  function verifyProof(bytes memory _proof, uint256[6] memory _input) external returns (bool);\\n}\\n\\ncontract CommitProtocol is MerkleTreeWithHistory, ReentrancyGuard {\\n  IVerifier public immutable verifier;\\n \\n  mapping(bytes32 => bool) public nullifierHashes;\\n  // we store all commitments just to prevent accidental creations with the same commitment\\n  mapping(bytes32 => bool) public commitments;\\n\\n  // commitments to validation modules \\n  mapping(bytes32 => address[]) public validationModules;\\n\\n  event NewCode(bytes32 indexed commitment, uint32 leafIndex, uint256 timestamp);\\n  event ConsumeCode(address to, bytes32 nullifierHash);\\n\\n  /**\\n    @dev The constructor\\n    @param _verifier the address of SNARK verifier for this contract\\n    @param _hasher the address of MiMC hash contract\\n    @param _merkleTreeHeight the height of codes' Merkle Tree\\n  */\\n  constructor(\\n    IVerifier _verifier,\\n    IHasher _hasher,\\n    uint32 _merkleTreeHeight\\n  ) MerkleTreeWithHistory(_merkleTreeHeight, _hasher) {\\n    verifier = _verifier;\\n  }\\n\\n  /**\\n    @dev Set new code.\\n    @param _commitment the note commitment, which is PedersenHash(nullifier + secret)\\n  */\\n  function setCode(bytes32 _commitment, address[] calldata _validationModules) public virtual payable nonReentrant {\\n    require(!commitments[_commitment], \\\"The commitment has been submitted\\\");\\n\\n    uint32 insertedIndex = _insert(_commitment);\\n    commitments[_commitment] = true;\\n\\n    for (uint256 i = 0; i < _validationModules.length; i++) {\\n      validationModules[_commitment].push(_validationModules[i]);\\n    }\\n\\n    emit NewCode(_commitment, insertedIndex, block.timestamp);\\n  }\\n\\n\\n  /**\\n    @dev Consume a code from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs\\n    `input` array consists of:\\n      - merkle root of all codes in the contract\\n      - hash of unique codes nullifier to prevent double spends\\n      - the recipient of funds\\n      - optional fee that goes to the transaction sender (usually a relay)\\n  */\\n  function consumeCode(\\n    bytes32 _commitment,\\n    bytes calldata _proof,\\n    bytes32 _root,\\n    bytes32 _nullifierHash,\\n    address payable _recipient,\\n    bytes[] calldata _validationsArgs\\n  ) public virtual payable nonReentrant {\\n    require(!nullifierHashes[_nullifierHash], \\\"The note has been already spent\\\");\\n    require(isKnownRoot(_root), \\\"Cannot find your merkle root\\\"); // Make sure to use a recent one\\n    \\n    require(\\n      verifier.verifyProof(\\n        _proof,\\n        [uint256(_root), uint256(_nullifierHash), uint256(uint160(address(_recipient))),0 ,0, 0]\\n      ),\\n      \\\"Invalid withdraw proof\\\"\\n    );\\n\\n    for (uint256 i = 0; i < validationModules[_commitment].length; i++) {\\n      IValidationModule(validationModules[_commitment][i]).validate(_validationsArgs[i]);\\n    }\\n\\n    nullifierHashes[_nullifierHash] = true;\\n\\n    emit ConsumeCode(_recipient, _nullifierHash);\\n  }\\n\\n  /** @dev whether a note is already spent */\\n  function isSpent(bytes32 _nullifierHash) public view returns (bool) {\\n    return nullifierHashes[_nullifierHash];\\n  }\\n\\n  /** @dev whether an array of notes is already spent */\\n  function isSpentArray(bytes32[] calldata _nullifierHashes) external view returns (bool[] memory spent) {\\n    spent = new bool[](_nullifierHashes.length);\\n    for (uint256 i = 0; i < _nullifierHashes.length; i++) {\\n      if (isSpent(_nullifierHashes[i])) {\\n        spent[i] = true;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xa5eab5e93ff380d97240111149e0e19b19e24ecdd852c0afb0689d15f3bb5478\",\"license\":\"MIT\"},\"contracts/ERC721Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./CommitProtocol.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ncontract ERC721Transfer is CommitProtocol {\\n  IERC721 public token;\\n\\n  mapping(bytes32 => uint256) public TransferId;\\n\\n   constructor(\\n    IVerifier _verifier,\\n    IHasher _hasher,\\n    uint32 _merkleTreeHeight,\\n    IERC721 _token\\n  ) CommitProtocol(_verifier, _hasher, _merkleTreeHeight) {\\n    token = _token;\\n  }\\n\\n  function createTransfer(bytes32 _commitment, address[] calldata _validationModules, uint256 _id) public payable nonReentrant {\\n    super.setCode(_commitment, _validationModules);\\n\\n    token.safeTransferFrom(msg.sender, address(this), _id);\\n\\n    TransferId[_commitment] = _id;\\n  }\\n\\n  function consumeTransfer(\\n  bytes32 _commitment,\\n    bytes calldata _proof,\\n    bytes32 _root,\\n    bytes32 _nullifierHash,\\n    address payable _to,\\n    bytes[] calldata _validationsArgs\\n  ) public nonReentrant {\\n    super.consumeCode(_commitment,_proof, _root, _nullifierHash, _to, _validationsArgs);\\n\\n    uint256 id = TransferId[_commitment];\\n\\n    token.safeTransferFrom(address(this), _to, id);\\n  }\\n \\n}\",\"keccak256\":\"0xa5bccf4627cf4d8ac36f9b67a567ed91e611317544b7dab8436da869cb9f6bce\",\"license\":\"MIT\"},\"contracts/helpers/MerkleTreeWithHistory.sol\":{\"content\":\"// https://tornado.cash\\n/*\\n * d888888P                                           dP              a88888b.                   dP\\n *    88                                              88             d8'   `88                   88\\n *    88    .d8888b. 88d888b. 88d888b. .d8888b. .d888b88 .d8888b.    88        .d8888b. .d8888b. 88d888b.\\n *    88    88'  `88 88'  `88 88'  `88 88'  `88 88'  `88 88'  `88    88        88'  `88 Y8ooooo. 88'  `88\\n *    88    88.  .88 88       88    88 88.  .88 88.  .88 88.  .88 dP Y8.   .88 88.  .88       88 88    88\\n *    dP    `88888P' dP       dP    dP `88888P8 `88888P8 `88888P' 88  Y88888P' `88888P8 `88888P' dP    dP\\n * ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IHasher {\\n  function MiMCSponge(uint256 in_xL, uint256 in_xR) external pure returns (uint256 xL, uint256 xR);\\n}\\n\\ncontract MerkleTreeWithHistory {\\n  uint256 public constant FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n  uint256 public constant ZERO_VALUE = 21663839004416932945382355908790599225266501822907911457504978515578255421292; // = keccak256(\\\"tornado\\\") % FIELD_SIZE\\n  IHasher public immutable hasher;\\n\\n  uint32 public levels;\\n\\n  // the following variables are made public for easier testing and debugging and\\n  // are not supposed to be accessed in regular code\\n\\n  // filledSubtrees and roots could be bytes32[size], but using mappings makes it cheaper because\\n  // it removes index range check on every interaction\\n  mapping(uint256 => bytes32) public filledSubtrees;\\n  mapping(uint256 => bytes32) public roots;\\n  uint32 public constant ROOT_HISTORY_SIZE = 30;\\n  uint32 public currentRootIndex = 0;\\n  uint32 public nextIndex = 0;\\n\\n  constructor(uint32 _levels, IHasher _hasher) {\\n    require(_levels > 0, \\\"_levels should be greater than zero\\\");\\n    require(_levels < 32, \\\"_levels should be less than 32\\\");\\n    levels = _levels;\\n    hasher = _hasher;\\n\\n    for (uint32 i = 0; i < _levels; i++) {\\n      filledSubtrees[i] = zeros(i);\\n    }\\n\\n    roots[0] = zeros(_levels - 1);\\n  }\\n\\n  /**\\n    @dev Hash 2 tree leaves, returns MiMC(_left, _right)\\n  */\\n  function hashLeftRight(\\n    IHasher _hasher,\\n    bytes32 _left,\\n    bytes32 _right\\n  ) public pure returns (bytes32) {\\n    require(uint256(_left) < FIELD_SIZE, \\\"_left should be inside the field\\\");\\n    require(uint256(_right) < FIELD_SIZE, \\\"_right should be inside the field\\\");\\n    uint256 R = uint256(_left);\\n    uint256 C = 0;\\n    (R, C) = _hasher.MiMCSponge(R, C);\\n    R = addmod(R, uint256(_right), FIELD_SIZE);\\n    (R, C) = _hasher.MiMCSponge(R, C);\\n    return bytes32(R);\\n  }\\n\\n  function _insert(bytes32 _leaf) internal returns (uint32 index) {\\n    uint32 _nextIndex = nextIndex;\\n    require(_nextIndex != uint32(2)**levels, \\\"Merkle tree is full. No more leaves can be added\\\");\\n    uint32 currentIndex = _nextIndex;\\n    bytes32 currentLevelHash = _leaf;\\n    bytes32 left;\\n    bytes32 right;\\n\\n    for (uint32 i = 0; i < levels; i++) {\\n      if (currentIndex % 2 == 0) {\\n        left = currentLevelHash;\\n        right = zeros(i);\\n        filledSubtrees[i] = currentLevelHash;\\n      } else {\\n        left = filledSubtrees[i];\\n        right = currentLevelHash;\\n      }\\n      currentLevelHash = hashLeftRight(hasher, left, right);\\n      currentIndex /= 2;\\n    }\\n\\n    uint32 newRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\\n    currentRootIndex = newRootIndex;\\n    roots[newRootIndex] = currentLevelHash;\\n    nextIndex = _nextIndex + 1;\\n    return _nextIndex;\\n  }\\n\\n  /**\\n    @dev Whether the root is present in the root history\\n  */\\n  function isKnownRoot(bytes32 _root) public view returns (bool) {\\n    if (_root == 0) {\\n      return false;\\n    }\\n    uint32 _currentRootIndex = currentRootIndex;\\n    uint32 i = _currentRootIndex;\\n    do {\\n      if (_root == roots[i]) {\\n        return true;\\n      }\\n      if (i == 0) {\\n        i = ROOT_HISTORY_SIZE;\\n      }\\n      i--;\\n    } while (i != _currentRootIndex);\\n    return false;\\n  }\\n\\n  /**\\n    @dev Returns the last root\\n  */\\n  function getLastRoot() public view returns (bytes32) {\\n    return roots[currentRootIndex];\\n  }\\n\\n  /// @dev provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\\n  function zeros(uint256 i) public pure returns (bytes32) {\\n    if (i == 0) return bytes32(0x2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c);\\n    else if (i == 1) return bytes32(0x256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d);\\n    else if (i == 2) return bytes32(0x1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200);\\n    else if (i == 3) return bytes32(0x20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb);\\n    else if (i == 4) return bytes32(0x0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9);\\n    else if (i == 5) return bytes32(0x24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959);\\n    else if (i == 6) return bytes32(0x1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c);\\n    else if (i == 7) return bytes32(0x19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4);\\n    else if (i == 8) return bytes32(0x261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80);\\n    else if (i == 9) return bytes32(0x0058459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007);\\n    else if (i == 10) return bytes32(0x1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30);\\n    else if (i == 11) return bytes32(0x1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5);\\n    else if (i == 12) return bytes32(0x0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f);\\n    else if (i == 13) return bytes32(0x1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd);\\n    else if (i == 14) return bytes32(0x133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108);\\n    else if (i == 15) return bytes32(0x13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6);\\n    else if (i == 16) return bytes32(0x1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854);\\n    else if (i == 17) return bytes32(0x0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea);\\n    else if (i == 18) return bytes32(0x24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d);\\n    else if (i == 19) return bytes32(0x198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05);\\n    else if (i == 20) return bytes32(0x29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4);\\n    else if (i == 21) return bytes32(0x19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967);\\n    else if (i == 22) return bytes32(0x1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453);\\n    else if (i == 23) return bytes32(0x10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48);\\n    else if (i == 24) return bytes32(0x0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1);\\n    else if (i == 25) return bytes32(0x019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c);\\n    else if (i == 26) return bytes32(0x2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99);\\n    else if (i == 27) return bytes32(0x2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354);\\n    else if (i == 28) return bytes32(0x002df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d);\\n    else if (i == 29) return bytes32(0x104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427);\\n    else if (i == 30) return bytes32(0x1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb);\\n    else if (i == 31) return bytes32(0x2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc);\\n    else revert(\\\"Index out of bounds\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x7ca5c42171d3a80191c56b126a47f86093075bece4fa96eace305f8ee3d4f6ae\",\"license\":\"MIT\"},\"contracts/modules/IValidationModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IValidationModule {\\n  function validate(bytes calldata arg) external returns (bool);\\n}\",\"keccak256\":\"0xbce3d3ab208ca1c7fd5e6500f0836c0b99c6dd4b172ebb27bab1a41d2322f94f\",\"license\":\"MIT\"},\"contracts/useCases/POAPAirdropper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../ERC721Transfer.sol\\\";\\n\\ncontract POAPAirdropper is ERC721Transfer {\\n\\n// Map for consumed poaps per campaign\\n  mapping(bytes32 => uint256) public consumed;\\n// Map for limit amount of poaps per campaign\\n  mapping(bytes32 => uint256) public limits;\\n\\n  constructor (\\n    IVerifier _verifier,\\n    IHasher _hasher,\\n    uint32 _merkleTreeHeight,\\n    IERC721 _token\\n  ) ERC721Transfer(_verifier, _hasher, _merkleTreeHeight, _token) {  \\n  }\\n\\n  function createPOAPAirdrop(bytes32 _commitment, address[] calldata _validationModules, uint256 _id, uint256 limit) public payable  {\\n    limits[_commitment] = limit;\\n    \\n    createTransfer(\\n      _commitment,\\n      _validationModules,\\n      _id\\n    );\\n  }\\n\\n  function consumePOAPAirdrop(\\n    bytes32 _commitment,\\n    bytes calldata _proof,\\n    bytes32 _root,\\n    bytes32 _nullifierHash,\\n    address payable _to,\\n    bytes[] calldata _validationsArgs\\n  ) public  {\\n    require(consumed[_commitment] < limits[_commitment], \\\"POAPAirdropper: Limit reached\\\");\\n\\n    consumed[_commitment] += 1;\\n    consumeTransfer(\\n      _commitment,\\n      _proof,\\n      _root,\\n      _nullifierHash,\\n      _to,\\n      _validationsArgs\\n    );\\n  }\\n\\n  function bulkCreatePOAPAirdrop(bytes32[] calldata _commitments, address[][] calldata _validationModules, uint256[] calldata _ids, uint256[] calldata _limits) external payable  {\\n    require(_commitments.length == _ids.length, \\\"commitments and ids length mismatch\\\");\\n    require(_commitments.length == _limits.length, \\\"commitments and limits length mismatch\\\");\\n    require(_commitments.length == _validationModules.length, \\\"commitments and validationModules length mismatch\\\");\\n\\n    for (uint256 i = 0; i < _commitments.length; i++) {\\n      createPOAPAirdrop(_commitments[i], _validationModules[i], _ids[i], _limits[i]);\\n    }\\n  }\\n\\n  function bulkConsumePOAPAirdrop(\\n    bytes32[] calldata _commitments,\\n    bytes[] calldata _proofs,\\n    bytes32[] calldata _roots,\\n    bytes32[] calldata _nullifierHashes,\\n    address payable[] calldata _tos,\\n    bytes[] calldata _validationsArgs\\n  ) external  {\\n    require(_commitments.length == _proofs.length, \\\"commitments and proofs length mismatch\\\");\\n    require(_commitments.length == _roots.length, \\\"commitments and roots length mismatch\\\");\\n    require(_commitments.length == _nullifierHashes.length, \\\"commitments and nullifierHashes length mismatch\\\");\\n    require(_commitments.length == _tos.length, \\\"commitments and tos length mismatch\\\");\\n    require(_commitments.length == _validationsArgs.length, \\\"commitments and validationsArgs length mismatch\\\");\\n\\n    for (uint256 i = 0; i < _commitments.length; i++) {\\n      consumePOAPAirdrop(_commitments[i], _proofs[i], _roots[i], _nullifierHashes[i], _tos[i], _validationsArgs);\\n    }\\n  }\\n}\",\"keccak256\":\"0x5c7cfa74ff695d6b30d5b359a537dd177e26b62ffdc6f41636a948db020eb7cf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600380546001600160401b03191690553480156200002157600080fd5b5060405162002fb838038062002fb8833981016040819052620000449162000869565b83838383838383808260008263ffffffff1611620000b55760405162461bcd60e51b815260206004820152602360248201527f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60448201526265726f60e81b60648201526084015b60405180910390fd5b60208263ffffffff16106200010d5760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e20333200006044820152606401620000ac565b6000805463ffffffff191663ffffffff84161781556001600160a01b0382166080525b8263ffffffff168163ffffffff16101562000181576200015663ffffffff821662000207565b63ffffffff8216600090815260016020526040902055806200017881620008ef565b91505062000130565b506200019f6200019360018462000915565b63ffffffff1662000207565b6000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b555050600160045550506001600160a01b0390811660a052600880546001600160a01b03191692909116919091179055506200093c95505050505050565b6000816000036200023957507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b816001036200026957507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b816002036200029957507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b81600303620002c957507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b81600403620002f957507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b816005036200032957507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b816006036200035957507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b816007036200038957507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b81600803620003b957507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b81600903620003e857507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a036200041857507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b036200044857507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c036200047857507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d03620004a857507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e03620004d857507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f036200050857507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b816010036200053857507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b816011036200056857507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b816012036200059857507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b81601303620005c857507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b81601403620005f857507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b816015036200062857507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b816016036200065857507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b816017036200068857507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b81601803620006b857507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b81601903620006e857507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a036200071857507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b036200074857507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c036200077757507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d03620007a757507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e03620007d757507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f036200080757507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e6473000000000000000000000000006044820152606401620000ac565b6001600160a01b03811681146200086657600080fd5b50565b600080600080608085870312156200088057600080fd5b84516200088d8162000850565b6020860151909450620008a08162000850565b604086015190935063ffffffff81168114620008bb57600080fd5b6060860151909250620008ce8162000850565b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff8083168181036200090b576200090b620008d9565b6001019392505050565b63ffffffff828116828216039080821115620009355762000935620008d9565b5092915050565b60805160a051612648620009706000396000818161028401526109500152600081816105f40152611c3b01526126486000f3fe6080604052600436106101d85760003560e01c806390eeb02b11610102578063d265d09911610095578063ed33639f11610064578063ed33639f146105e2578063f178e47c14610616578063fc0c546a14610643578063fc7e9c6f1461066357600080fd5b8063d265d0991461053e578063e5285dcc1461055e578063e82955881461058e578063ec732959146105ae57600080fd5b8063c1105820116100d1578063c1105820146104c9578063c2b40ae4146104e9578063cc013d8514610516578063cd87a3b41461052957600080fd5b806390eeb02b1461044257806399ad2cc91461045f5780639fa12d0b14610472578063ba70f7571461049f57600080fd5b80634648c9431161017a5780637835a0c9116101495780637835a0c9146103bf578063838a11fd146103d2578063839df945146103f25780638ea3099e1461042257600080fd5b80634648c943146103135780634ecf518b146103405780635c1b7d38146103725780636d9833e31461039f57600080fd5b80632b7ac3f3116101b65780632b7ac3f3146102725780633e7fd3b4146102be578063414a37ba146102d15780634488e595146102f357600080fd5b806317cc915c146101dd5780631ad088be146102225780632469ab9214610237575b600080fd5b3480156101e957600080fd5b5061020d6101f8366004611d10565b60056020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b610235610230366004611d74565b610688565b005b34801561024357600080fd5b50610264610252366004611d10565b60096020526000908152604090205481565b604051908152602001610219565b34801561027e57600080fd5b506102a67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610219565b6102356102cc366004611e5a565b61084e565b3480156102dd57600080fd5b506102646000805160206125f383398151915281565b3480156102ff57600080fd5b5061023561030e366004611e5a565b610b6c565b34801561031f57600080fd5b5061026461032e366004611d10565b600a6020526000908152604090205481565b34801561034c57600080fd5b5060005461035d9063ffffffff1681565b60405163ffffffff9091168152602001610219565b34801561037e57600080fd5b5061026461038d366004611d10565b600b6020526000908152604090205481565b3480156103ab57600080fd5b5061020d6103ba366004611d10565b610c0e565b6102356103cd366004611f01565b610c8c565b3480156103de57600080fd5b506102a66103ed366004611f53565b610d2a565b3480156103fe57600080fd5b5061020d61040d366004611d10565b60066020526000908152604090205460ff1681565b34801561042e57600080fd5b5061026461043d366004611f75565b610d62565b34801561044e57600080fd5b5060035461035d9063ffffffff1681565b61023561046d366004611faa565b610f2f565b34801561047e57600080fd5b5061049261048d366004612007565b610f53565b6040516102199190612048565b3480156104ab57600080fd5b5060035463ffffffff16600090815260026020526040902054610264565b3480156104d557600080fd5b506102356104e436600461208e565b611018565b3480156104f557600080fd5b50610264610504366004611d10565b60026020526000908152604090205481565b6102356105243660046121cb565b6112c8565b34801561053557600080fd5b5061035d601e81565b34801561054a57600080fd5b50610235610559366004611e5a565b611433565b34801561056a57600080fd5b5061020d610579366004611d10565b60009081526005602052604090205460ff1690565b34801561059a57600080fd5b506102646105a9366004611d10565b6114d0565b3480156105ba57600080fd5b506102647f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b3480156105ee57600080fd5b506102a67f000000000000000000000000000000000000000000000000000000000000000081565b34801561062257600080fd5b50610264610631366004611d10565b60016020526000908152604090205481565b34801561064f57600080fd5b506008546102a6906001600160a01b031681565b34801561066f57600080fd5b5060035461035d90640100000000900463ffffffff1681565b8683146106e85760405162461bcd60e51b815260206004820152602360248201527f636f6d6d69746d656e747320616e6420696473206c656e677468206d69736d616044820152620e8c6d60eb1b60648201526084015b60405180910390fd5b8681146107465760405162461bcd60e51b815260206004820152602660248201527f636f6d6d69746d656e747320616e64206c696d697473206c656e677468206d696044820152650e6dac2e8c6d60d31b60648201526084016106df565b8685146107af5760405162461bcd60e51b815260206004820152603160248201527f636f6d6d69746d656e747320616e642076616c69646174696f6e4d6f64756c656044820152700e640d8cadccee8d040dad2e6dac2e8c6d607b1b60648201526084016106df565b60005b87811015610843576108318989838181106107cf576107cf612216565b905060200201358888848181106107e8576107e8612216565b90506020028101906107fa919061222c565b88888681811061080c5761080c612216565b9050602002013587878781811061082557610825612216565b90506020020135610f2f565b8061083b8161228b565b9150506107b2565b505050505050505050565b610856611af3565b60008481526005602052604090205460ff16156108b55760405162461bcd60e51b815260206004820152601f60248201527f546865206e6f746520686173206265656e20616c7265616479207370656e740060448201526064016106df565b6108be85610c0e565b61090a5760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742066696e6420796f7572206d65726b6c6520726f6f740000000060448201526064016106df565b6040805160c081018252868152602081018690526001600160a01b03858116828401526000606083018190526080830181905260a0830152915163695ef6f960e01b81527f00000000000000000000000000000000000000000000000000000000000000009092169163695ef6f991610989918b918b916004016122cd565b6020604051808303816000875af11580156109a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cc9190612315565b610a115760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2103bb4ba34323930bb90383937b7b360511b60448201526064016106df565b60005b600089815260076020526040902054811015610afb576000898152600760205260409020805482908110610a4a57610a4a612216565b6000918252602090912001546001600160a01b031663c16e50ef848484818110610a7657610a76612216565b9050602002810190610a88919061233e565b6040518363ffffffff1660e01b8152600401610aa5929190612384565b6020604051808303816000875af1158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae89190612315565b5080610af38161228b565b915050610a14565b50600084815260056020908152604091829020805460ff1916600117905581516001600160a01b03861681529081018690527f9ebe94a87e9d85fb44a2b38b11c3b10117eba3fbd045c54a8577bc62540d5d75910160405180910390a1610b626001600455565b5050505050505050565b610b74611af3565b610b84888888888888888861084e565b60008881526009602052604090819020546008549151632142170760e11b81523060048201526001600160a01b03868116602483015260448201839052919291909116906342842e0e90606401600060405180830381600087803b158015610beb57600080fd5b505af1158015610bff573d6000803e3d6000fd5b5050505050610b626001600455565b6000818103610c1f57506000919050565b60035463ffffffff16805b63ffffffff81166000908152600260205260409020548403610c50575060019392505050565b8063ffffffff16600003610c625750601e5b80610c6c816123a0565b9150508163ffffffff168163ffffffff1603610c2a575060009392505050565b610c94611af3565b610c9f8484846112c8565b600854604051632142170760e11b8152336004820152306024820152604481018390526001600160a01b03909116906342842e0e90606401600060405180830381600087803b158015610cf157600080fd5b505af1158015610d05573d6000803e3d6000fd5b505050600085815260096020526040902082905550610d246001600455565b50505050565b60076020528160005260406000208181548110610d4657600080fd5b6000918252602090912001546001600160a01b03169150829050565b60006000805160206125f38339815191528310610dc15760405162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c6460448201526064016106df565b6000805160206125f38339815191528210610e285760405162461bcd60e51b815260206004820152602160248201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c6044820152601960fa1b60648201526084016106df565b60405163f47d33b560e01b81526004810184905260006024820181905284916001600160a01b0387169063f47d33b5906044016040805180830381865afa158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b91906123c0565b90925090506000805160206125f383398151915284830860405163f47d33b560e01b815260048101829052602481018390529092506001600160a01b0387169063f47d33b5906044016040805180830381865afa158015610f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2491906123c0565b509695505050505050565b6000858152600b60205260409020819055610f4c85858585610c8c565b5050505050565b6060816001600160401b03811115610f6d57610f6d6123fa565b604051908082528060200260200182016040528015610f96578160200160208202803683370190505b50905060005b8281101561101157610fd5848483818110610fb957610fb9612216565b9050602002013560009081526005602052604090205460ff1690565b15610fff576001828281518110610fee57610fee612216565b911515602092830291909101909101525b806110098161228b565b915050610f9c565b5092915050565b8a89146110765760405162461bcd60e51b815260206004820152602660248201527f636f6d6d69746d656e747320616e642070726f6f6673206c656e677468206d696044820152650e6dac2e8c6d60d31b60648201526084016106df565b8a87146110d35760405162461bcd60e51b815260206004820152602560248201527f636f6d6d69746d656e747320616e6420726f6f7473206c656e677468206d69736044820152640dac2e8c6d60db1b60648201526084016106df565b8a851461113a5760405162461bcd60e51b815260206004820152602f60248201527f636f6d6d69746d656e747320616e64206e756c6c69666965724861736865732060448201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b60648201526084016106df565b8a83146111955760405162461bcd60e51b815260206004820152602360248201527f636f6d6d69746d656e747320616e6420746f73206c656e677468206d69736d616044820152620e8c6d60eb1b60648201526084016106df565b8a81146111fc5760405162461bcd60e51b815260206004820152602f60248201527f636f6d6d69746d656e747320616e642076616c69646174696f6e73417267732060448201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b60648201526084016106df565b60005b8b8110156112b9576112a78d8d8381811061121c5761121c612216565b905060200201358c8c8481811061123557611235612216565b9050602002810190611247919061233e565b8c8c8681811061125957611259612216565b905060200201358b8b8781811061127257611272612216565b905060200201358a8a8881811061128b5761128b612216565b90506020020160208101906112a09190612410565b8989611433565b806112b18161228b565b9150506111ff565b50505050505050505050505050565b6112d0611af3565b60008381526006602052604090205460ff16156113395760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b60648201526084016106df565b600061134484611b1d565b6000858152600660205260408120805460ff191660011790559091505b828110156113e257600085815260076020526040902084848381811061138957611389612216565b905060200201602081019061139e9190612410565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b03909216919091179055806113da8161228b565b915050611361565b506040805163ffffffff8316815242602082015285917fee825d3f4d0fa209d8e2a39afe24a21286d8dc103d63061a2ed322db4ce018e3910160405180910390a25061142e6001600455565b505050565b6000888152600b6020908152604080832054600a909252909120541061149b5760405162461bcd60e51b815260206004820152601d60248201527f504f415041697264726f707065723a204c696d6974207265616368656400000060448201526064016106df565b6000888152600a602052604081208054600192906114ba90849061242d565b90915550610b6290508888888888888888610b6c565b60008160000361150157507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b8160010361153057507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b8160020361155f57507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b8160030361158e57507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b816004036115bd57507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b816005036115ec57507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b8160060361161b57507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b8160070361164a57507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b8160080361167957507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b816009036116a757507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a036116d657507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b0361170557507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c0361173457507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d0361176357507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e0361179257507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f036117c157507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b816010036117f057507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b8160110361181f57507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b8160120361184e57507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b8160130361187d57507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b816014036118ac57507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b816015036118db57507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b8160160361190a57507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b8160170361193957507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b8160180361196857507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b8160190361199757507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a036119c657507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b036119f557507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c03611a2357507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d03611a5257507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e03611a8157507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f03611ab057507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064016106df565b919050565b600260045403611b1657604051633ee5aeb560e01b815260040160405180910390fd5b6002600455565b60035460008054909163ffffffff640100000000909104811691611b4391166002612557565b63ffffffff168163ffffffff1603611bb65760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b60648201526084016106df565b8083600080805b60005463ffffffff9081169082161015611c8257611bdc60028661256c565b63ffffffff16600003611c1a57839250611bfb8163ffffffff166114d0565b63ffffffff821660009081526001602052604090208590559150611c36565b63ffffffff811660009081526001602052604090205492508391505b611c617f00000000000000000000000000000000000000000000000000000000000000008484610d62565b9350611c6e60028661258f565b945080611c7a816125b2565b915050611bbd565b50600354600090601e90611c9d9063ffffffff1660016125d5565b611ca7919061256c565b6003805463ffffffff191663ffffffff831690811790915560009081526002602052604090208590559050611cdd8660016125d5565b6003805463ffffffff929092166401000000000267ffffffff000000001990921691909117905550939695505050505050565b600060208284031215611d2257600080fd5b5035919050565b60008083601f840112611d3b57600080fd5b5081356001600160401b03811115611d5257600080fd5b6020830191508360208260051b8501011115611d6d57600080fd5b9250929050565b6000806000806000806000806080898b031215611d9057600080fd5b88356001600160401b0380821115611da757600080fd5b611db38c838d01611d29565b909a50985060208b0135915080821115611dcc57600080fd5b611dd88c838d01611d29565b909850965060408b0135915080821115611df157600080fd5b611dfd8c838d01611d29565b909650945060608b0135915080821115611e1657600080fd5b50611e238b828c01611d29565b999c989b5096995094979396929594505050565b6001600160a01b0381168114611e4c57600080fd5b50565b8035611aee81611e37565b60008060008060008060008060c0898b031215611e7657600080fd5b8835975060208901356001600160401b0380821115611e9457600080fd5b818b0191508b601f830112611ea857600080fd5b813581811115611eb757600080fd5b8c6020828501011115611ec957600080fd5b602083019950975060408b0135965060608b01359550611eeb60808c01611e4f565b945060a08b0135915080821115611e1657600080fd5b60008060008060608587031215611f1757600080fd5b8435935060208501356001600160401b03811115611f3457600080fd5b611f4087828801611d29565b9598909750949560400135949350505050565b60008060408385031215611f6657600080fd5b50508035926020909101359150565b600080600060608486031215611f8a57600080fd5b8335611f9581611e37565b95602085013595506040909401359392505050565b600080600080600060808688031215611fc257600080fd5b8535945060208601356001600160401b03811115611fdf57600080fd5b611feb88828901611d29565b9699909850959660408101359660609091013595509350505050565b6000806020838503121561201a57600080fd5b82356001600160401b0381111561203057600080fd5b61203c85828601611d29565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015612082578351151583529284019291840191600101612064565b50909695505050505050565b60008060008060008060008060008060008060c08d8f0312156120b057600080fd5b6001600160401b038d3511156120c557600080fd5b6120d28e8e358f01611d29565b909c509a506001600160401b0360208e013511156120ef57600080fd5b6120ff8e60208f01358f01611d29565b909a5098506001600160401b0360408e0135111561211c57600080fd5b61212c8e60408f01358f01611d29565b90985096506001600160401b0360608e0135111561214957600080fd5b6121598e60608f01358f01611d29565b90965094506001600160401b0360808e0135111561217657600080fd5b6121868e60808f01358f01611d29565b90945092506001600160401b0360a08e013511156121a357600080fd5b6121b38e60a08f01358f01611d29565b81935080925050509295989b509295989b509295989b565b6000806000604084860312156121e057600080fd5b8335925060208401356001600160401b038111156121fd57600080fd5b61220986828701611d29565b9497909650939450505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261224357600080fd5b8301803591506001600160401b0382111561225d57600080fd5b6020019150600581901b3603821315611d6d57600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161229d5761229d612275565b5060010190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60e0815260006122e160e0830185876122a4565b905060208083018460005b6006811015612309578151835291830191908301906001016122ec565b50505050949350505050565b60006020828403121561232757600080fd5b8151801515811461233757600080fd5b9392505050565b6000808335601e1984360301811261235557600080fd5b8301803591506001600160401b0382111561236f57600080fd5b602001915036819003821315611d6d57600080fd5b6020815260006123986020830184866122a4565b949350505050565b600063ffffffff8216806123b6576123b6612275565b6000190192915050565b600080604083850312156123d357600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60006020828403121561242257600080fd5b813561233781611e37565b8082018082111561244057612440612275565b92915050565b600181815b80851115612483578163ffffffff0482111561246957612469612275565b8085161561247657918102915b93841c939080029061244b565b509250929050565b60008261249a57506001612440565b816124a757506000612440565b81600181146124bd57600281146124c7576124f8565b6001915050612440565b60ff8411156124d8576124d8612275565b6001841b915063ffffffff8211156124f2576124f2612275565b50612440565b5060208310610133831016604e8410600b841016171561252f575081810a63ffffffff81111561252a5761252a612275565b612440565b6125398383612446565b8063ffffffff0482111561254f5761254f612275565b029392505050565b600063ffffffff61239881851682851661248b565b600063ffffffff80841680612583576125836123e4565b92169190910692915050565b600063ffffffff808416806125a6576125a66123e4565b92169190910492915050565b600063ffffffff8083168181036125cb576125cb612275565b6001019392505050565b63ffffffff8181168382160190808211156110115761101161227556fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a2646970667358221220e3b11aea8a6691b5a44a5ba9522a9ecae95a5cecfdaad0ef4b7c6454b41b4b4d64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c806390eeb02b11610102578063d265d09911610095578063ed33639f11610064578063ed33639f146105e2578063f178e47c14610616578063fc0c546a14610643578063fc7e9c6f1461066357600080fd5b8063d265d0991461053e578063e5285dcc1461055e578063e82955881461058e578063ec732959146105ae57600080fd5b8063c1105820116100d1578063c1105820146104c9578063c2b40ae4146104e9578063cc013d8514610516578063cd87a3b41461052957600080fd5b806390eeb02b1461044257806399ad2cc91461045f5780639fa12d0b14610472578063ba70f7571461049f57600080fd5b80634648c9431161017a5780637835a0c9116101495780637835a0c9146103bf578063838a11fd146103d2578063839df945146103f25780638ea3099e1461042257600080fd5b80634648c943146103135780634ecf518b146103405780635c1b7d38146103725780636d9833e31461039f57600080fd5b80632b7ac3f3116101b65780632b7ac3f3146102725780633e7fd3b4146102be578063414a37ba146102d15780634488e595146102f357600080fd5b806317cc915c146101dd5780631ad088be146102225780632469ab9214610237575b600080fd5b3480156101e957600080fd5b5061020d6101f8366004611d10565b60056020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b610235610230366004611d74565b610688565b005b34801561024357600080fd5b50610264610252366004611d10565b60096020526000908152604090205481565b604051908152602001610219565b34801561027e57600080fd5b506102a67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610219565b6102356102cc366004611e5a565b61084e565b3480156102dd57600080fd5b506102646000805160206125f383398151915281565b3480156102ff57600080fd5b5061023561030e366004611e5a565b610b6c565b34801561031f57600080fd5b5061026461032e366004611d10565b600a6020526000908152604090205481565b34801561034c57600080fd5b5060005461035d9063ffffffff1681565b60405163ffffffff9091168152602001610219565b34801561037e57600080fd5b5061026461038d366004611d10565b600b6020526000908152604090205481565b3480156103ab57600080fd5b5061020d6103ba366004611d10565b610c0e565b6102356103cd366004611f01565b610c8c565b3480156103de57600080fd5b506102a66103ed366004611f53565b610d2a565b3480156103fe57600080fd5b5061020d61040d366004611d10565b60066020526000908152604090205460ff1681565b34801561042e57600080fd5b5061026461043d366004611f75565b610d62565b34801561044e57600080fd5b5060035461035d9063ffffffff1681565b61023561046d366004611faa565b610f2f565b34801561047e57600080fd5b5061049261048d366004612007565b610f53565b6040516102199190612048565b3480156104ab57600080fd5b5060035463ffffffff16600090815260026020526040902054610264565b3480156104d557600080fd5b506102356104e436600461208e565b611018565b3480156104f557600080fd5b50610264610504366004611d10565b60026020526000908152604090205481565b6102356105243660046121cb565b6112c8565b34801561053557600080fd5b5061035d601e81565b34801561054a57600080fd5b50610235610559366004611e5a565b611433565b34801561056a57600080fd5b5061020d610579366004611d10565b60009081526005602052604090205460ff1690565b34801561059a57600080fd5b506102646105a9366004611d10565b6114d0565b3480156105ba57600080fd5b506102647f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b3480156105ee57600080fd5b506102a67f000000000000000000000000000000000000000000000000000000000000000081565b34801561062257600080fd5b50610264610631366004611d10565b60016020526000908152604090205481565b34801561064f57600080fd5b506008546102a6906001600160a01b031681565b34801561066f57600080fd5b5060035461035d90640100000000900463ffffffff1681565b8683146106e85760405162461bcd60e51b815260206004820152602360248201527f636f6d6d69746d656e747320616e6420696473206c656e677468206d69736d616044820152620e8c6d60eb1b60648201526084015b60405180910390fd5b8681146107465760405162461bcd60e51b815260206004820152602660248201527f636f6d6d69746d656e747320616e64206c696d697473206c656e677468206d696044820152650e6dac2e8c6d60d31b60648201526084016106df565b8685146107af5760405162461bcd60e51b815260206004820152603160248201527f636f6d6d69746d656e747320616e642076616c69646174696f6e4d6f64756c656044820152700e640d8cadccee8d040dad2e6dac2e8c6d607b1b60648201526084016106df565b60005b87811015610843576108318989838181106107cf576107cf612216565b905060200201358888848181106107e8576107e8612216565b90506020028101906107fa919061222c565b88888681811061080c5761080c612216565b9050602002013587878781811061082557610825612216565b90506020020135610f2f565b8061083b8161228b565b9150506107b2565b505050505050505050565b610856611af3565b60008481526005602052604090205460ff16156108b55760405162461bcd60e51b815260206004820152601f60248201527f546865206e6f746520686173206265656e20616c7265616479207370656e740060448201526064016106df565b6108be85610c0e565b61090a5760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742066696e6420796f7572206d65726b6c6520726f6f740000000060448201526064016106df565b6040805160c081018252868152602081018690526001600160a01b03858116828401526000606083018190526080830181905260a0830152915163695ef6f960e01b81527f00000000000000000000000000000000000000000000000000000000000000009092169163695ef6f991610989918b918b916004016122cd565b6020604051808303816000875af11580156109a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cc9190612315565b610a115760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2103bb4ba34323930bb90383937b7b360511b60448201526064016106df565b60005b600089815260076020526040902054811015610afb576000898152600760205260409020805482908110610a4a57610a4a612216565b6000918252602090912001546001600160a01b031663c16e50ef848484818110610a7657610a76612216565b9050602002810190610a88919061233e565b6040518363ffffffff1660e01b8152600401610aa5929190612384565b6020604051808303816000875af1158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae89190612315565b5080610af38161228b565b915050610a14565b50600084815260056020908152604091829020805460ff1916600117905581516001600160a01b03861681529081018690527f9ebe94a87e9d85fb44a2b38b11c3b10117eba3fbd045c54a8577bc62540d5d75910160405180910390a1610b626001600455565b5050505050505050565b610b74611af3565b610b84888888888888888861084e565b60008881526009602052604090819020546008549151632142170760e11b81523060048201526001600160a01b03868116602483015260448201839052919291909116906342842e0e90606401600060405180830381600087803b158015610beb57600080fd5b505af1158015610bff573d6000803e3d6000fd5b5050505050610b626001600455565b6000818103610c1f57506000919050565b60035463ffffffff16805b63ffffffff81166000908152600260205260409020548403610c50575060019392505050565b8063ffffffff16600003610c625750601e5b80610c6c816123a0565b9150508163ffffffff168163ffffffff1603610c2a575060009392505050565b610c94611af3565b610c9f8484846112c8565b600854604051632142170760e11b8152336004820152306024820152604481018390526001600160a01b03909116906342842e0e90606401600060405180830381600087803b158015610cf157600080fd5b505af1158015610d05573d6000803e3d6000fd5b505050600085815260096020526040902082905550610d246001600455565b50505050565b60076020528160005260406000208181548110610d4657600080fd5b6000918252602090912001546001600160a01b03169150829050565b60006000805160206125f38339815191528310610dc15760405162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c6460448201526064016106df565b6000805160206125f38339815191528210610e285760405162461bcd60e51b815260206004820152602160248201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c6044820152601960fa1b60648201526084016106df565b60405163f47d33b560e01b81526004810184905260006024820181905284916001600160a01b0387169063f47d33b5906044016040805180830381865afa158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b91906123c0565b90925090506000805160206125f383398151915284830860405163f47d33b560e01b815260048101829052602481018390529092506001600160a01b0387169063f47d33b5906044016040805180830381865afa158015610f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2491906123c0565b509695505050505050565b6000858152600b60205260409020819055610f4c85858585610c8c565b5050505050565b6060816001600160401b03811115610f6d57610f6d6123fa565b604051908082528060200260200182016040528015610f96578160200160208202803683370190505b50905060005b8281101561101157610fd5848483818110610fb957610fb9612216565b9050602002013560009081526005602052604090205460ff1690565b15610fff576001828281518110610fee57610fee612216565b911515602092830291909101909101525b806110098161228b565b915050610f9c565b5092915050565b8a89146110765760405162461bcd60e51b815260206004820152602660248201527f636f6d6d69746d656e747320616e642070726f6f6673206c656e677468206d696044820152650e6dac2e8c6d60d31b60648201526084016106df565b8a87146110d35760405162461bcd60e51b815260206004820152602560248201527f636f6d6d69746d656e747320616e6420726f6f7473206c656e677468206d69736044820152640dac2e8c6d60db1b60648201526084016106df565b8a851461113a5760405162461bcd60e51b815260206004820152602f60248201527f636f6d6d69746d656e747320616e64206e756c6c69666965724861736865732060448201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b60648201526084016106df565b8a83146111955760405162461bcd60e51b815260206004820152602360248201527f636f6d6d69746d656e747320616e6420746f73206c656e677468206d69736d616044820152620e8c6d60eb1b60648201526084016106df565b8a81146111fc5760405162461bcd60e51b815260206004820152602f60248201527f636f6d6d69746d656e747320616e642076616c69646174696f6e73417267732060448201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b60648201526084016106df565b60005b8b8110156112b9576112a78d8d8381811061121c5761121c612216565b905060200201358c8c8481811061123557611235612216565b9050602002810190611247919061233e565b8c8c8681811061125957611259612216565b905060200201358b8b8781811061127257611272612216565b905060200201358a8a8881811061128b5761128b612216565b90506020020160208101906112a09190612410565b8989611433565b806112b18161228b565b9150506111ff565b50505050505050505050505050565b6112d0611af3565b60008381526006602052604090205460ff16156113395760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b60648201526084016106df565b600061134484611b1d565b6000858152600660205260408120805460ff191660011790559091505b828110156113e257600085815260076020526040902084848381811061138957611389612216565b905060200201602081019061139e9190612410565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b03909216919091179055806113da8161228b565b915050611361565b506040805163ffffffff8316815242602082015285917fee825d3f4d0fa209d8e2a39afe24a21286d8dc103d63061a2ed322db4ce018e3910160405180910390a25061142e6001600455565b505050565b6000888152600b6020908152604080832054600a909252909120541061149b5760405162461bcd60e51b815260206004820152601d60248201527f504f415041697264726f707065723a204c696d6974207265616368656400000060448201526064016106df565b6000888152600a602052604081208054600192906114ba90849061242d565b90915550610b6290508888888888888888610b6c565b60008160000361150157507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b8160010361153057507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b8160020361155f57507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b8160030361158e57507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b816004036115bd57507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b816005036115ec57507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b8160060361161b57507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b8160070361164a57507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b8160080361167957507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b816009036116a757507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a036116d657507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b0361170557507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c0361173457507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d0361176357507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e0361179257507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f036117c157507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b816010036117f057507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b8160110361181f57507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b8160120361184e57507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b8160130361187d57507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b816014036118ac57507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b816015036118db57507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b8160160361190a57507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b8160170361193957507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b8160180361196857507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b8160190361199757507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a036119c657507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b036119f557507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c03611a2357507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d03611a5257507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e03611a8157507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f03611ab057507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064016106df565b919050565b600260045403611b1657604051633ee5aeb560e01b815260040160405180910390fd5b6002600455565b60035460008054909163ffffffff640100000000909104811691611b4391166002612557565b63ffffffff168163ffffffff1603611bb65760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b60648201526084016106df565b8083600080805b60005463ffffffff9081169082161015611c8257611bdc60028661256c565b63ffffffff16600003611c1a57839250611bfb8163ffffffff166114d0565b63ffffffff821660009081526001602052604090208590559150611c36565b63ffffffff811660009081526001602052604090205492508391505b611c617f00000000000000000000000000000000000000000000000000000000000000008484610d62565b9350611c6e60028661258f565b945080611c7a816125b2565b915050611bbd565b50600354600090601e90611c9d9063ffffffff1660016125d5565b611ca7919061256c565b6003805463ffffffff191663ffffffff831690811790915560009081526002602052604090208590559050611cdd8660016125d5565b6003805463ffffffff929092166401000000000267ffffffff000000001990921691909117905550939695505050505050565b600060208284031215611d2257600080fd5b5035919050565b60008083601f840112611d3b57600080fd5b5081356001600160401b03811115611d5257600080fd5b6020830191508360208260051b8501011115611d6d57600080fd5b9250929050565b6000806000806000806000806080898b031215611d9057600080fd5b88356001600160401b0380821115611da757600080fd5b611db38c838d01611d29565b909a50985060208b0135915080821115611dcc57600080fd5b611dd88c838d01611d29565b909850965060408b0135915080821115611df157600080fd5b611dfd8c838d01611d29565b909650945060608b0135915080821115611e1657600080fd5b50611e238b828c01611d29565b999c989b5096995094979396929594505050565b6001600160a01b0381168114611e4c57600080fd5b50565b8035611aee81611e37565b60008060008060008060008060c0898b031215611e7657600080fd5b8835975060208901356001600160401b0380821115611e9457600080fd5b818b0191508b601f830112611ea857600080fd5b813581811115611eb757600080fd5b8c6020828501011115611ec957600080fd5b602083019950975060408b0135965060608b01359550611eeb60808c01611e4f565b945060a08b0135915080821115611e1657600080fd5b60008060008060608587031215611f1757600080fd5b8435935060208501356001600160401b03811115611f3457600080fd5b611f4087828801611d29565b9598909750949560400135949350505050565b60008060408385031215611f6657600080fd5b50508035926020909101359150565b600080600060608486031215611f8a57600080fd5b8335611f9581611e37565b95602085013595506040909401359392505050565b600080600080600060808688031215611fc257600080fd5b8535945060208601356001600160401b03811115611fdf57600080fd5b611feb88828901611d29565b9699909850959660408101359660609091013595509350505050565b6000806020838503121561201a57600080fd5b82356001600160401b0381111561203057600080fd5b61203c85828601611d29565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015612082578351151583529284019291840191600101612064565b50909695505050505050565b60008060008060008060008060008060008060c08d8f0312156120b057600080fd5b6001600160401b038d3511156120c557600080fd5b6120d28e8e358f01611d29565b909c509a506001600160401b0360208e013511156120ef57600080fd5b6120ff8e60208f01358f01611d29565b909a5098506001600160401b0360408e0135111561211c57600080fd5b61212c8e60408f01358f01611d29565b90985096506001600160401b0360608e0135111561214957600080fd5b6121598e60608f01358f01611d29565b90965094506001600160401b0360808e0135111561217657600080fd5b6121868e60808f01358f01611d29565b90945092506001600160401b0360a08e013511156121a357600080fd5b6121b38e60a08f01358f01611d29565b81935080925050509295989b509295989b509295989b565b6000806000604084860312156121e057600080fd5b8335925060208401356001600160401b038111156121fd57600080fd5b61220986828701611d29565b9497909650939450505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261224357600080fd5b8301803591506001600160401b0382111561225d57600080fd5b6020019150600581901b3603821315611d6d57600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161229d5761229d612275565b5060010190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60e0815260006122e160e0830185876122a4565b905060208083018460005b6006811015612309578151835291830191908301906001016122ec565b50505050949350505050565b60006020828403121561232757600080fd5b8151801515811461233757600080fd5b9392505050565b6000808335601e1984360301811261235557600080fd5b8301803591506001600160401b0382111561236f57600080fd5b602001915036819003821315611d6d57600080fd5b6020815260006123986020830184866122a4565b949350505050565b600063ffffffff8216806123b6576123b6612275565b6000190192915050565b600080604083850312156123d357600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60006020828403121561242257600080fd5b813561233781611e37565b8082018082111561244057612440612275565b92915050565b600181815b80851115612483578163ffffffff0482111561246957612469612275565b8085161561247657918102915b93841c939080029061244b565b509250929050565b60008261249a57506001612440565b816124a757506000612440565b81600181146124bd57600281146124c7576124f8565b6001915050612440565b60ff8411156124d8576124d8612275565b6001841b915063ffffffff8211156124f2576124f2612275565b50612440565b5060208310610133831016604e8410600b841016171561252f575081810a63ffffffff81111561252a5761252a612275565b612440565b6125398383612446565b8063ffffffff0482111561254f5761254f612275565b029392505050565b600063ffffffff61239881851682851661248b565b600063ffffffff80841680612583576125836123e4565b92169190910692915050565b600063ffffffff808416806125a6576125a66123e4565b92169190910492915050565b600063ffffffff8083168181036125cb576125cb612275565b6001019392505050565b63ffffffff8181168382160190808211156110115761101161227556fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a2646970667358221220e3b11aea8a6691b5a44a5ba9522a9ecae95a5cecfdaad0ef4b7c6454b41b4b4d64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "consumeCode(bytes32,bytes,bytes32,bytes32,address,bytes[])": {
        "details": "Consume a code from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all codes in the contract - hash of unique codes nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)"
      },
      "getLastRoot()": {
        "details": "Returns the last root"
      },
      "hashLeftRight(address,bytes32,bytes32)": {
        "details": "Hash 2 tree leaves, returns MiMC(_left, _right)"
      },
      "isKnownRoot(bytes32)": {
        "details": "Whether the root is present in the root history"
      },
      "isSpent(bytes32)": {
        "details": "whether a note is already spent "
      },
      "isSpentArray(bytes32[])": {
        "details": "whether an array of notes is already spent "
      },
      "setCode(bytes32,address[])": {
        "details": "Set new code.",
        "params": {
          "_commitment": "the note commitment, which is PedersenHash(nullifier + secret)"
        }
      },
      "zeros(uint256)": {
        "details": "provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 843,
        "contract": "contracts/useCases/POAPAirdropper.sol:POAPAirdropper",
        "label": "levels",
        "offset": 0,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 847,
        "contract": "contracts/useCases/POAPAirdropper.sol:POAPAirdropper",
        "label": "filledSubtrees",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 851,
        "contract": "contracts/useCases/POAPAirdropper.sol:POAPAirdropper",
        "label": "roots",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 857,
        "contract": "contracts/useCases/POAPAirdropper.sol:POAPAirdropper",
        "label": "currentRootIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 860,
        "contract": "contracts/useCases/POAPAirdropper.sol:POAPAirdropper",
        "label": "nextIndex",
        "offset": 4,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 205,
        "contract": "contracts/useCases/POAPAirdropper.sol:POAPAirdropper",
        "label": "_status",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 303,
        "contract": "contracts/useCases/POAPAirdropper.sol:POAPAirdropper",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 307,
        "contract": "contracts/useCases/POAPAirdropper.sol:POAPAirdropper",
        "label": "commitments",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 312,
        "contract": "contracts/useCases/POAPAirdropper.sol:POAPAirdropper",
        "label": "validationModules",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 704,
        "contract": "contracts/useCases/POAPAirdropper.sol:POAPAirdropper",
        "label": "token",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC721)194"
      },
      {
        "astId": 708,
        "contract": "contracts/useCases/POAPAirdropper.sol:POAPAirdropper",
        "label": "TransferId",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2040,
        "contract": "contracts/useCases/POAPAirdropper.sol:POAPAirdropper",
        "label": "consumed",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2044,
        "contract": "contracts/useCases/POAPAirdropper.sol:POAPAirdropper",
        "label": "limits",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC721)194": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}