/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../../common";
import type {
  DVNOptions,
  DVNOptionsInterface,
} from "../../../../../../@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions";

const _abi = [
  {
    inputs: [],
    name: "DVN_InvalidDVNIdx",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cursor",
        type: "uint256",
      },
    ],
    name: "DVN_InvalidDVNOptions",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220867340c97c282c85448a1448acbb2e87f01e0cbf8579392e70bcbca7c7a3b19864736f6c63430008140033";

type DVNOptionsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DVNOptionsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DVNOptions__factory extends ContractFactory {
  constructor(...args: DVNOptionsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DVNOptions & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DVNOptions__factory {
    return super.connect(runner) as DVNOptions__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DVNOptionsInterface {
    return new Interface(_abi) as DVNOptionsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DVNOptions {
    return new Contract(address, _abi, runner) as unknown as DVNOptions;
  }
}
