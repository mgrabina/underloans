/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  Errors,
  ErrorsInterface,
} from "../../../../../@layerzerolabs/lz-evm-protocol-v2/contracts/libs/Errors";

const _abi = [
  {
    inputs: [],
    name: "LZ_AlreadyRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_ComposeExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "expected",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "actual",
        type: "bytes32",
      },
    ],
    name: "LZ_ComposeNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_DefaultReceiveLibUnavailable",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_DefaultSendLibUnavailable",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requiredNative",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "suppliedNative",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requiredLzToken",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "suppliedLzToken",
        type: "uint256",
      },
    ],
    name: "LZ_InsufficientFee",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "required",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "supplied",
        type: "uint256",
      },
    ],
    name: "LZ_InvalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_InvalidArgument",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_InvalidExpiry",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "nonce",
        type: "uint64",
      },
    ],
    name: "LZ_InvalidNonce",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_InvalidPayloadHash",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_InvalidReceiveLibrary",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_LzTokenUnavailable",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_NotImplemented",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_OnlyNonDefaultLib",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_OnlyReceiveLib",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_OnlyRegisteredLib",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_OnlyRegisteredOrDefaultLib",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_OnlySendLib",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_PathNotInitializable",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_PathNotVerifiable",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "expected",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "actual",
        type: "bytes32",
      },
    ],
    name: "LZ_PayloadHashNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_SameValue",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_SendReentrancy",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_Unauthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_UnsupportedEid",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_UnsupportedInterface",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_ZeroLzTokenFee",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212206d7ce687407f5006801871da36f21d1c4b267a5349377d6c00f6793f84111c6264736f6c63430008140033";

type ErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Errors & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Errors__factory {
    return super.connect(runner) as Errors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorsInterface {
    return new Interface(_abi) as ErrorsInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Errors {
    return new Contract(address, _abi, runner) as unknown as Errors;
  }
}
