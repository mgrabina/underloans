/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  CommitProtocol,
  CommitProtocolInterface,
} from "../../../contracts/CommitProtocol.sol/CommitProtocol";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IVerifier",
        name: "_verifier",
        type: "address",
      },
      {
        internalType: "contract IHasher",
        name: "_hasher",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "_merkleTreeHeight",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "nullifierHash",
        type: "bytes32",
      },
    ],
    name: "ConsumeCode",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "commitment",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "leafIndex",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "NewCode",
    type: "event",
  },
  {
    inputs: [],
    name: "FIELD_SIZE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ROOT_HISTORY_SIZE",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ZERO_VALUE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "commitments",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_commitment",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "_proof",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_nullifierHash",
        type: "bytes32",
      },
      {
        internalType: "address payable",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "bytes[]",
        name: "_validationsArgs",
        type: "bytes[]",
      },
    ],
    name: "consumeCode",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "currentRootIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "filledSubtrees",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IHasher",
        name: "_hasher",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_left",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_right",
        type: "bytes32",
      },
    ],
    name: "hashLeftRight",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "hasher",
    outputs: [
      {
        internalType: "contract IHasher",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
    ],
    name: "isKnownRoot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_nullifierHash",
        type: "bytes32",
      },
    ],
    name: "isSpent",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_nullifierHashes",
        type: "bytes32[]",
      },
    ],
    name: "isSpentArray",
    outputs: [
      {
        internalType: "bool[]",
        name: "spent",
        type: "bool[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "levels",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "nullifierHashes",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "roots",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_commitment",
        type: "bytes32",
      },
      {
        internalType: "address[]",
        name: "_validationModules",
        type: "address[]",
      },
    ],
    name: "setCode",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "validationModules",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "contract IVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "zeros",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c0604052600380546001600160401b03191690553480156200002157600080fd5b506040516200243338038062002433833981016040819052620000449162000840565b808260008263ffffffff1611620000ae5760405162461bcd60e51b815260206004820152602360248201527f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60448201526265726f60e81b60648201526084015b60405180910390fd5b60208263ffffffff1610620001065760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e20333200006044820152606401620000a5565b6000805463ffffffff191663ffffffff84161781556001600160a01b0382166080525b8263ffffffff168163ffffffff1610156200017a576200014f63ffffffff8216620001de565b63ffffffff8216600090815260016020526040902055806200017181620008b2565b91505062000129565b50620001986200018c600184620008d8565b63ffffffff16620001de565b6000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b555050600160045550506001600160a01b031660a052620008ff565b6000816000036200021057507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b816001036200024057507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b816002036200027057507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b81600303620002a057507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b81600403620002d057507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b816005036200030057507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b816006036200033057507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b816007036200036057507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b816008036200039057507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b81600903620003bf57507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a03620003ef57507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b036200041f57507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c036200044f57507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d036200047f57507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e03620004af57507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f03620004df57507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b816010036200050f57507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b816011036200053f57507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b816012036200056f57507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b816013036200059f57507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b81601403620005cf57507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b81601503620005ff57507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b816016036200062f57507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b816017036200065f57507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b816018036200068f57507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b81601903620006bf57507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a03620006ef57507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b036200071f57507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c036200074e57507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d036200077e57507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e03620007ae57507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f03620007de57507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e6473000000000000000000000000006044820152606401620000a5565b6001600160a01b03811681146200083d57600080fd5b50565b6000806000606084860312156200085657600080fd5b8351620008638162000827565b6020850151909350620008768162000827565b604085015190925063ffffffff811681146200089157600080fd5b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff808316818103620008ce57620008ce6200089c565b6001019392505050565b63ffffffff828116828216039080821115620008f857620008f86200089c565b5092915050565b60805160a051611b00620009336000396000818161018601526105a101526000818161042601526113dc0152611b006000f3fe60806040526004361061012a5760003560e01c80639fa12d0b116100ab578063e5285dcc1161006f578063e5285dcc14610390578063e8295588146103c0578063ec732959146103e0578063ed33639f14610414578063f178e47c14610448578063fc7e9c6f1461047557600080fd5b80639fa12d0b146102e4578063ba70f75714610311578063c2b40ae41461033b578063cc013d8514610368578063cd87a3b41461037b57600080fd5b80636d9833e3116100f25780636d9833e314610237578063838a11fd14610257578063839df945146102775780638ea3099e146102a757806390eeb02b146102c757600080fd5b806317cc915c1461012f5780632b7ac3f3146101745780633e7fd3b4146101c0578063414a37ba146101d55780634ecf518b14610205575b600080fd5b34801561013b57600080fd5b5061015f61014a3660046114b1565b60056020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561018057600080fd5b506101a87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161016b565b6101d36101ce366004611539565b61049a565b005b3480156101e157600080fd5b506101f7600080516020611aab83398151915281565b60405190815260200161016b565b34801561021157600080fd5b506000546102229063ffffffff1681565b60405163ffffffff909116815260200161016b565b34801561024357600080fd5b5061015f6102523660046114b1565b6107bd565b34801561026357600080fd5b506101a8610272366004611602565b61083b565b34801561028357600080fd5b5061015f6102923660046114b1565b60066020526000908152604090205460ff1681565b3480156102b357600080fd5b506101f76102c2366004611624565b610873565b3480156102d357600080fd5b506003546102229063ffffffff1681565b3480156102f057600080fd5b506103046102ff366004611659565b610a40565b60405161016b919061169b565b34801561031d57600080fd5b5060035463ffffffff166000908152600260205260409020546101f7565b34801561034757600080fd5b506101f76103563660046114b1565b60026020526000908152604090205481565b6101d36103763660046116e1565b610b06565b34801561038757600080fd5b50610222601e81565b34801561039c57600080fd5b5061015f6103ab3660046114b1565b60009081526005602052604090205460ff1690565b3480156103cc57600080fd5b506101f76103db3660046114b1565b610c71565b3480156103ec57600080fd5b506101f77f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b34801561042057600080fd5b506101a87f000000000000000000000000000000000000000000000000000000000000000081565b34801561045457600080fd5b506101f76104633660046114b1565b60016020526000908152604090205481565b34801561048157600080fd5b5060035461022290640100000000900463ffffffff1681565b6104a2611294565b60008481526005602052604090205460ff16156105065760405162461bcd60e51b815260206004820152601f60248201527f546865206e6f746520686173206265656e20616c7265616479207370656e740060448201526064015b60405180910390fd5b61050f856107bd565b61055b5760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742066696e6420796f7572206d65726b6c6520726f6f740000000060448201526064016104fd565b6040805160c081018252868152602081018690526001600160a01b03858116828401526000606083018190526080830181905260a0830152915163695ef6f960e01b81527f00000000000000000000000000000000000000000000000000000000000000009092169163695ef6f9916105da918b918b91600401611756565b6020604051808303816000875af11580156105f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061d919061179e565b6106625760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2103bb4ba34323930bb90383937b7b360511b60448201526064016104fd565b60005b60008981526007602052604090205481101561074c57600089815260076020526040902080548290811061069b5761069b6117c7565b6000918252602090912001546001600160a01b031663c16e50ef8484848181106106c7576106c76117c7565b90506020028101906106d991906117dd565b6040518363ffffffff1660e01b81526004016106f6929190611824565b6020604051808303816000875af1158015610715573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610739919061179e565b508061074481611856565b915050610665565b50600084815260056020908152604091829020805460ff1916600117905581516001600160a01b03861681529081018690527f9ebe94a87e9d85fb44a2b38b11c3b10117eba3fbd045c54a8577bc62540d5d75910160405180910390a16107b36001600455565b5050505050505050565b60008181036107ce57506000919050565b60035463ffffffff16805b63ffffffff811660009081526002602052604090205484036107ff575060019392505050565b8063ffffffff166000036108115750601e5b8061081b8161186f565b9150508163ffffffff168163ffffffff16036107d9575060009392505050565b6007602052816000526040600020818154811061085757600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000600080516020611aab83398151915283106108d25760405162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c6460448201526064016104fd565b600080516020611aab83398151915282106109395760405162461bcd60e51b815260206004820152602160248201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c6044820152601960fa1b60648201526084016104fd565b60405163f47d33b560e01b81526004810184905260006024820181905284916001600160a01b0387169063f47d33b5906044016040805180830381865afa158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac919061188f565b9092509050600080516020611aab83398151915284830860405163f47d33b560e01b815260048101829052602481018390529092506001600160a01b0387169063f47d33b5906044016040805180830381865afa158015610a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a35919061188f565b509695505050505050565b60608167ffffffffffffffff811115610a5b57610a5b6118c9565b604051908082528060200260200182016040528015610a84578160200160208202803683370190505b50905060005b82811015610aff57610ac3848483818110610aa757610aa76117c7565b9050602002013560009081526005602052604090205460ff1690565b15610aed576001828281518110610adc57610adc6117c7565b911515602092830291909101909101525b80610af781611856565b915050610a8a565b5092915050565b610b0e611294565b60008381526006602052604090205460ff1615610b775760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b60648201526084016104fd565b6000610b82846112be565b6000858152600660205260408120805460ff191660011790559091505b82811015610c20576000858152600760205260409020848483818110610bc757610bc76117c7565b9050602002016020810190610bdc91906118df565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b0390921691909117905580610c1881611856565b915050610b9f565b506040805163ffffffff8316815242602082015285917fee825d3f4d0fa209d8e2a39afe24a21286d8dc103d63061a2ed322db4ce018e3910160405180910390a250610c6c6001600455565b505050565b600081600003610ca257507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b81600103610cd157507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b81600203610d0057507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b81600303610d2f57507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b81600403610d5e57507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b81600503610d8d57507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b81600603610dbc57507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b81600703610deb57507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b81600803610e1a57507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b81600903610e4857507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a03610e7757507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b03610ea657507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c03610ed557507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d03610f0457507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e03610f3357507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f03610f6257507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b81601003610f9157507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b81601103610fc057507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b81601203610fef57507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b8160130361101e57507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b8160140361104d57507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b8160150361107c57507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b816016036110ab57507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b816017036110da57507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b8160180361110957507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b8160190361113857507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a0361116757507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b0361119657507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c036111c457507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d036111f357507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e0361122257507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f0361125157507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064016104fd565b919050565b6002600454036112b757604051633ee5aeb560e01b815260040160405180910390fd5b6002600455565b60035460008054909163ffffffff6401000000009091048116916112e491166002611a0f565b63ffffffff168163ffffffff16036113575760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b60648201526084016104fd565b8083600080805b60005463ffffffff90811690821610156114235761137d600286611a24565b63ffffffff166000036113bb5783925061139c8163ffffffff16610c71565b63ffffffff8216600090815260016020526040902085905591506113d7565b63ffffffff811660009081526001602052604090205492508391505b6114027f00000000000000000000000000000000000000000000000000000000000000008484610873565b935061140f600286611a47565b94508061141b81611a6a565b91505061135e565b50600354600090601e9061143e9063ffffffff166001611a8d565b6114489190611a24565b6003805463ffffffff191663ffffffff83169081179091556000908152600260205260409020859055905061147e866001611a8d565b6003805463ffffffff929092166401000000000267ffffffff000000001990921691909117905550939695505050505050565b6000602082840312156114c357600080fd5b5035919050565b6001600160a01b03811681146114df57600080fd5b50565b803561128f816114ca565b60008083601f8401126114ff57600080fd5b50813567ffffffffffffffff81111561151757600080fd5b6020830191508360208260051b850101111561153257600080fd5b9250929050565b60008060008060008060008060c0898b03121561155557600080fd5b88359750602089013567ffffffffffffffff8082111561157457600080fd5b818b0191508b601f83011261158857600080fd5b81358181111561159757600080fd5b8c60208285010111156115a957600080fd5b602083019950975060408b0135965060608b013595506115cb60808c016114e2565b945060a08b01359150808211156115e157600080fd5b506115ee8b828c016114ed565b999c989b5096995094979396929594505050565b6000806040838503121561161557600080fd5b50508035926020909101359150565b60008060006060848603121561163957600080fd5b8335611644816114ca565b95602085013595506040909401359392505050565b6000806020838503121561166c57600080fd5b823567ffffffffffffffff81111561168357600080fd5b61168f858286016114ed565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156116d55783511515835292840192918401916001016116b7565b50909695505050505050565b6000806000604084860312156116f657600080fd5b83359250602084013567ffffffffffffffff81111561171457600080fd5b611720868287016114ed565b9497909650939450505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60e08152600061176a60e08301858761172d565b905060208083018460005b600681101561179257815183529183019190830190600101611775565b50505050949350505050565b6000602082840312156117b057600080fd5b815180151581146117c057600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126117f457600080fd5b83018035915067ffffffffffffffff82111561180f57600080fd5b60200191503681900382131561153257600080fd5b60208152600061183860208301848661172d565b949350505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161186857611868611840565b5060010190565b600063ffffffff82168061188557611885611840565b6000190192915050565b600080604083850312156118a257600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6000602082840312156118f157600080fd5b81356117c0816114ca565b600181815b80851115611939578163ffffffff0482111561191f5761191f611840565b8085161561192c57918102915b93841c9390800290611901565b509250929050565b60008261195057506001611a09565b8161195d57506000611a09565b8160018114611973576002811461197d576119ae565b6001915050611a09565b60ff84111561198e5761198e611840565b6001841b915063ffffffff8211156119a8576119a8611840565b50611a09565b5060208310610133831016604e8410600b84101617156119e5575081810a63ffffffff8111156119e0576119e0611840565b611a09565b6119ef83836118fc565b8063ffffffff04821115611a0557611a05611840565b0290505b92915050565b600063ffffffff611838818516828516611941565b600063ffffffff80841680611a3b57611a3b6118b3565b92169190910692915050565b600063ffffffff80841680611a5e57611a5e6118b3565b92169190910492915050565b600063ffffffff808316818103611a8357611a83611840565b6001019392505050565b63ffffffff818116838216019080821115610aff57610aff61184056fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a264697066735822122012da6177ee3b5e7ffd95de3c8a61e23a3c3cd15f7c130874ae996eca34c5b04864736f6c63430008140033";

type CommitProtocolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CommitProtocolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CommitProtocol__factory extends ContractFactory {
  constructor(...args: CommitProtocolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _verifier: AddressLike,
    _hasher: AddressLike,
    _merkleTreeHeight: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _verifier,
      _hasher,
      _merkleTreeHeight,
      overrides || {}
    );
  }
  override deploy(
    _verifier: AddressLike,
    _hasher: AddressLike,
    _merkleTreeHeight: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _verifier,
      _hasher,
      _merkleTreeHeight,
      overrides || {}
    ) as Promise<
      CommitProtocol & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CommitProtocol__factory {
    return super.connect(runner) as CommitProtocol__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CommitProtocolInterface {
    return new Interface(_abi) as CommitProtocolInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CommitProtocol {
    return new Contract(address, _abi, runner) as unknown as CommitProtocol;
  }
}
