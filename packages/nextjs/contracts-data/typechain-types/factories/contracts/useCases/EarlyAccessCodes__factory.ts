/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  EarlyAccessCodes,
  EarlyAccessCodesInterface,
} from "../../../contracts/useCases/EarlyAccessCodes";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IVerifier",
        name: "_verifier",
        type: "address",
      },
      {
        internalType: "contract IHasher",
        name: "_hasher",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "_merkleTreeHeight",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "nullifierHash",
        type: "bytes32",
      },
    ],
    name: "ConsumeCode",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "commitment",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "leafIndex",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "NewCode",
    type: "event",
  },
  {
    inputs: [],
    name: "FIELD_SIZE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ROOT_HISTORY_SIZE",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ZERO_VALUE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_commitments",
        type: "bytes32[]",
      },
      {
        internalType: "bytes[]",
        name: "_proofs",
        type: "bytes[]",
      },
      {
        internalType: "bytes32[]",
        name: "_roots",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32[]",
        name: "_nullifierHashes",
        type: "bytes32[]",
      },
      {
        internalType: "address payable[]",
        name: "_tos",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "_validationsArgs",
        type: "bytes[]",
      },
    ],
    name: "bulkConsumeEarlyAccessCodes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_commitments",
        type: "bytes32[]",
      },
      {
        internalType: "address[][]",
        name: "_validationModules",
        type: "address[][]",
      },
    ],
    name: "bulkCreateEarlyAccessCodes",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "commitments",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_commitment",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "_proof",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_nullifierHash",
        type: "bytes32",
      },
      {
        internalType: "address payable",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "bytes[]",
        name: "_validationsArgs",
        type: "bytes[]",
      },
    ],
    name: "consumeCode",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_commitment",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "_proof",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_nullifierHash",
        type: "bytes32",
      },
      {
        internalType: "address payable",
        name: "_to",
        type: "address",
      },
      {
        internalType: "bytes[]",
        name: "_validationsArgs",
        type: "bytes[]",
      },
    ],
    name: "consumeEarlyAccessCode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_commitment",
        type: "bytes32",
      },
      {
        internalType: "address[]",
        name: "_validationModules",
        type: "address[]",
      },
    ],
    name: "createEarlyAccessCode",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "currentRootIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "filledSubtrees",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IHasher",
        name: "_hasher",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_left",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_right",
        type: "bytes32",
      },
    ],
    name: "hashLeftRight",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "hasher",
    outputs: [
      {
        internalType: "contract IHasher",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
    ],
    name: "isKnownRoot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_nullifierHash",
        type: "bytes32",
      },
    ],
    name: "isSpent",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_nullifierHashes",
        type: "bytes32[]",
      },
    ],
    name: "isSpentArray",
    outputs: [
      {
        internalType: "bool[]",
        name: "spent",
        type: "bool[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "levels",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "nullifierHashes",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "roots",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_commitment",
        type: "bytes32",
      },
      {
        internalType: "address[]",
        name: "_validationModules",
        type: "address[]",
      },
    ],
    name: "setCode",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "validationModules",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "contract IVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "zeros",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c0604052600380546001600160401b03191690553480156200002157600080fd5b506040516200281238038062002812833981016040819052620000449162000847565b828282808260008263ffffffff1611620000b15760405162461bcd60e51b815260206004820152602360248201527f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60448201526265726f60e81b60648201526084015b60405180910390fd5b60208263ffffffff1610620001095760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e20333200006044820152606401620000a8565b6000805463ffffffff191663ffffffff84161781556001600160a01b0382166080525b8263ffffffff168163ffffffff1610156200017d576200015263ffffffff8216620001e5565b63ffffffff8216600090815260016020526040902055806200017481620008b9565b9150506200012c565b506200019b6200018f600184620008df565b63ffffffff16620001e5565b6000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b555050600160045550506001600160a01b031660a0525062000906915050565b6000816000036200021757507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b816001036200024757507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b816002036200027757507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b81600303620002a757507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b81600403620002d757507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b816005036200030757507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b816006036200033757507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b816007036200036757507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b816008036200039757507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b81600903620003c657507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a03620003f657507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b036200042657507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c036200045657507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d036200048657507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e03620004b657507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f03620004e657507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b816010036200051657507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b816011036200054657507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b816012036200057657507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b81601303620005a657507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b81601403620005d657507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b816015036200060657507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b816016036200063657507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b816017036200066657507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b816018036200069657507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b81601903620006c657507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a03620006f657507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b036200072657507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c036200075557507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d036200078557507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e03620007b557507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f03620007e557507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e6473000000000000000000000000006044820152606401620000a8565b6001600160a01b03811681146200084457600080fd5b50565b6000806000606084860312156200085d57600080fd5b83516200086a816200082e565b60208501519093506200087d816200082e565b604085015190925063ffffffff811681146200089857600080fd5b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff808316818103620008d557620008d5620008a3565b6001019392505050565b63ffffffff828116828216039080821115620008ff57620008ff620008a3565b5092915050565b60805160a051611ed86200093a600039600081816101c201526106430152600081816104b501526115c80152611ed86000f3fe6080604052600436106101665760003560e01c80639fa12d0b116100d1578063e5285dcc1161008a578063ed33639f11610064578063ed33639f146104a3578063f178e47c146104d7578063f8f5342414610504578063fc7e9c6f1461051757600080fd5b8063e5285dcc1461041f578063e82955881461044f578063ec7329591461046f57600080fd5b80639fa12d0b14610353578063b07e1ffd14610380578063ba70f757146103a0578063c2b40ae4146103ca578063cc013d85146103f7578063cd87a3b41461040a57600080fd5b80636d9833e3116101235780636d9833e314610286578063838a11fd146102a6578063839df945146102c65780638ea3099e146102f657806390eeb02b14610316578063917cdce01461033357600080fd5b806317cc915c1461016b5780632b7ac3f3146101b05780633e7fd3b4146101fc578063414a37ba146102115780634ecf518b146102415780636c31a67d14610273575b600080fd5b34801561017757600080fd5b5061019b61018636600461169d565b60056020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b3480156101bc57600080fd5b506101e47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101a7565b61020f61020a366004611724565b61053c565b005b34801561021d57600080fd5b50610233600080516020611e8383398151915281565b6040519081526020016101a7565b34801561024d57600080fd5b5060005461025e9063ffffffff1681565b60405163ffffffff90911681526020016101a7565b61020f6102813660046117ec565b61085f565b34801561029257600080fd5b5061019b6102a136600461169d565b61086f565b3480156102b257600080fd5b506101e46102c1366004611837565b6108ed565b3480156102d257600080fd5b5061019b6102e136600461169d565b60066020526000908152604090205460ff1681565b34801561030257600080fd5b50610233610311366004611859565b610925565b34801561032257600080fd5b5060035461025e9063ffffffff1681565b34801561033f57600080fd5b5061020f61034e366004611724565b610af2565b34801561035f57600080fd5b5061037361036e36600461188e565b610b02565b6040516101a791906118cf565b34801561038c57600080fd5b5061020f61039b366004611915565b610bc7565b3480156103ac57600080fd5b5060035463ffffffff16600090815260026020526040902054610233565b3480156103d657600080fd5b506102336103e536600461169d565b60026020526000908152604090205481565b61020f6104053660046117ec565b610c93565b34801561041657600080fd5b5061025e601e81565b34801561042b57600080fd5b5061019b61043a36600461169d565b60009081526005602052604090205460ff1690565b34801561045b57600080fd5b5061023361046a36600461169d565b610df9565b34801561047b57600080fd5b506102337f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b3480156104af57600080fd5b506101e47f000000000000000000000000000000000000000000000000000000000000000081565b3480156104e357600080fd5b506102336104f236600461169d565b60016020526000908152604090205481565b61020f610512366004611a52565b61141c565b34801561052357600080fd5b5060035461025e90640100000000900463ffffffff1681565b610544611480565b60008481526005602052604090205460ff16156105a85760405162461bcd60e51b815260206004820152601f60248201527f546865206e6f746520686173206265656e20616c7265616479207370656e740060448201526064015b60405180910390fd5b6105b18561086f565b6105fd5760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742066696e6420796f7572206d65726b6c6520726f6f7400000000604482015260640161059f565b6040805160c081018252868152602081018690526001600160a01b03858116828401526000606083018190526080830181905260a0830152915163695ef6f960e01b81527f00000000000000000000000000000000000000000000000000000000000000009092169163695ef6f99161067c918b918b91600401611ae6565b6020604051808303816000875af115801561069b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bf9190611b2e565b6107045760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2103bb4ba34323930bb90383937b7b360511b604482015260640161059f565b60005b6000898152600760205260409020548110156107ee57600089815260076020526040902080548290811061073d5761073d611b57565b6000918252602090912001546001600160a01b031663c16e50ef84848481811061076957610769611b57565b905060200281019061077b9190611b6d565b6040518363ffffffff1660e01b8152600401610798929190611bb3565b6020604051808303816000875af11580156107b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107db9190611b2e565b50806107e681611be5565b915050610707565b50600084815260056020908152604091829020805460ff1916600117905581516001600160a01b03861681529081018690527f9ebe94a87e9d85fb44a2b38b11c3b10117eba3fbd045c54a8577bc62540d5d75910160405180910390a16108556001600455565b5050505050505050565b61086a838383610c93565b505050565b600081810361088057506000919050565b60035463ffffffff16805b63ffffffff811660009081526002602052604090205484036108b1575060019392505050565b8063ffffffff166000036108c35750601e5b806108cd81611bfe565b9150508163ffffffff168163ffffffff160361088b575060009392505050565b6007602052816000526040600020818154811061090957600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000600080516020611e8383398151915283106109845760405162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c64604482015260640161059f565b600080516020611e8383398151915282106109eb5760405162461bcd60e51b815260206004820152602160248201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c6044820152601960fa1b606482015260840161059f565b60405163f47d33b560e01b81526004810184905260006024820181905284916001600160a01b0387169063f47d33b5906044016040805180830381865afa158015610a3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5e9190611c1e565b9092509050600080516020611e8383398151915284830860405163f47d33b560e01b815260048101829052602481018390529092506001600160a01b0387169063f47d33b5906044016040805180830381865afa158015610ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae79190611c1e565b509695505050505050565b610855888888888888888861053c565b6060816001600160401b03811115610b1c57610b1c611c58565b604051908082528060200260200182016040528015610b45578160200160208202803683370190505b50905060005b82811015610bc057610b84848483818110610b6857610b68611b57565b9050602002013560009081526005602052604090205460ff1690565b15610bae576001828281518110610b9d57610b9d611b57565b911515602092830291909101909101525b80610bb881611be5565b915050610b4b565b5092915050565b60005b8b811015610c8457610c728d8d83818110610be757610be7611b57565b905060200201358c8c84818110610c0057610c00611b57565b9050602002810190610c129190611b6d565b8c8c86818110610c2457610c24611b57565b905060200201358b8b87818110610c3d57610c3d611b57565b905060200201358a8a88818110610c5657610c56611b57565b9050602002016020810190610c6b9190611c6e565b8989610af2565b80610c7c81611be5565b915050610bca565b50505050505050505050505050565b610c9b611480565b60008381526006602052604090205460ff1615610d045760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b606482015260840161059f565b6000610d0f846114aa565b6000858152600660205260408120805460ff191660011790559091505b82811015610dad576000858152600760205260409020848483818110610d5457610d54611b57565b9050602002016020810190610d699190611c6e565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b0390921691909117905580610da581611be5565b915050610d2c565b506040805163ffffffff8316815242602082015285917fee825d3f4d0fa209d8e2a39afe24a21286d8dc103d63061a2ed322db4ce018e3910160405180910390a25061086a6001600455565b600081600003610e2a57507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b81600103610e5957507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b81600203610e8857507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b81600303610eb757507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b81600403610ee657507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b81600503610f1557507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b81600603610f4457507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b81600703610f7357507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b81600803610fa257507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b81600903610fd057507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a03610fff57507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b0361102e57507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c0361105d57507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d0361108c57507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e036110bb57507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f036110ea57507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b8160100361111957507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b8160110361114857507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b8160120361117757507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b816013036111a657507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b816014036111d557507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b8160150361120457507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b8160160361123357507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b8160170361126257507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b8160180361129157507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b816019036112c057507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a036112ef57507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b0361131e57507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c0361134c57507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d0361137b57507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e036113aa57507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f036113d957507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b604482015260640161059f565b919050565b60005b838110156114795761146785858381811061143c5761143c611b57565b9050602002013584848481811061145557611455611b57565b90506020028101906102819190611c8b565b8061147181611be5565b91505061141f565b5050505050565b6002600454036114a357604051633ee5aeb560e01b815260040160405180910390fd5b6002600455565b60035460008054909163ffffffff6401000000009091048116916114d091166002611de7565b63ffffffff168163ffffffff16036115435760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b606482015260840161059f565b8083600080805b60005463ffffffff908116908216101561160f57611569600286611dfc565b63ffffffff166000036115a7578392506115888163ffffffff16610df9565b63ffffffff8216600090815260016020526040902085905591506115c3565b63ffffffff811660009081526001602052604090205492508391505b6115ee7f00000000000000000000000000000000000000000000000000000000000000008484610925565b93506115fb600286611e1f565b94508061160781611e42565b91505061154a565b50600354600090601e9061162a9063ffffffff166001611e65565b6116349190611dfc565b6003805463ffffffff191663ffffffff83169081179091556000908152600260205260409020859055905061166a866001611e65565b6003805463ffffffff929092166401000000000267ffffffff000000001990921691909117905550939695505050505050565b6000602082840312156116af57600080fd5b5035919050565b6001600160a01b03811681146116cb57600080fd5b50565b8035611417816116b6565b60008083601f8401126116eb57600080fd5b5081356001600160401b0381111561170257600080fd5b6020830191508360208260051b850101111561171d57600080fd5b9250929050565b60008060008060008060008060c0898b03121561174057600080fd5b8835975060208901356001600160401b038082111561175e57600080fd5b818b0191508b601f83011261177257600080fd5b81358181111561178157600080fd5b8c602082850101111561179357600080fd5b602083019950975060408b0135965060608b013595506117b560808c016116ce565b945060a08b01359150808211156117cb57600080fd5b506117d88b828c016116d9565b999c989b5096995094979396929594505050565b60008060006040848603121561180157600080fd5b8335925060208401356001600160401b0381111561181e57600080fd5b61182a868287016116d9565b9497909650939450505050565b6000806040838503121561184a57600080fd5b50508035926020909101359150565b60008060006060848603121561186e57600080fd5b8335611879816116b6565b95602085013595506040909401359392505050565b600080602083850312156118a157600080fd5b82356001600160401b038111156118b757600080fd5b6118c3858286016116d9565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156119095783511515835292840192918401916001016118eb565b50909695505050505050565b60008060008060008060008060008060008060c08d8f03121561193757600080fd5b6001600160401b038d35111561194c57600080fd5b6119598e8e358f016116d9565b909c509a506001600160401b0360208e0135111561197657600080fd5b6119868e60208f01358f016116d9565b909a5098506001600160401b0360408e013511156119a357600080fd5b6119b38e60408f01358f016116d9565b90985096506001600160401b0360608e013511156119d057600080fd5b6119e08e60608f01358f016116d9565b90965094506001600160401b0360808e013511156119fd57600080fd5b611a0d8e60808f01358f016116d9565b90945092506001600160401b0360a08e01351115611a2a57600080fd5b611a3a8e60a08f01358f016116d9565b81935080925050509295989b509295989b509295989b565b60008060008060408587031215611a6857600080fd5b84356001600160401b0380821115611a7f57600080fd5b611a8b888389016116d9565b90965094506020870135915080821115611aa457600080fd5b50611ab1878288016116d9565b95989497509550505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60e081526000611afa60e083018587611abd565b905060208083018460005b6006811015611b2257815183529183019190830190600101611b05565b50505050949350505050565b600060208284031215611b4057600080fd5b81518015158114611b5057600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112611b8457600080fd5b8301803591506001600160401b03821115611b9e57600080fd5b60200191503681900382131561171d57600080fd5b602081526000611bc7602083018486611abd565b949350505050565b634e487b7160e01b600052601160045260246000fd5b600060018201611bf757611bf7611bcf565b5060010190565b600063ffffffff821680611c1457611c14611bcf565b6000190192915050565b60008060408385031215611c3157600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060208284031215611c8057600080fd5b8135611b50816116b6565b6000808335601e19843603018112611ca257600080fd5b8301803591506001600160401b03821115611cbc57600080fd5b6020019150600581901b360382131561171d57600080fd5b600181815b80851115611d11578163ffffffff04821115611cf757611cf7611bcf565b80851615611d0457918102915b93841c9390800290611cd9565b509250929050565b600082611d2857506001611de1565b81611d3557506000611de1565b8160018114611d4b5760028114611d5557611d86565b6001915050611de1565b60ff841115611d6657611d66611bcf565b6001841b915063ffffffff821115611d8057611d80611bcf565b50611de1565b5060208310610133831016604e8410600b8410161715611dbd575081810a63ffffffff811115611db857611db8611bcf565b611de1565b611dc78383611cd4565b8063ffffffff04821115611ddd57611ddd611bcf565b0290505b92915050565b600063ffffffff611bc7818516828516611d19565b600063ffffffff80841680611e1357611e13611c42565b92169190910692915050565b600063ffffffff80841680611e3657611e36611c42565b92169190910492915050565b600063ffffffff808316818103611e5b57611e5b611bcf565b6001019392505050565b63ffffffff818116838216019080821115610bc057610bc0611bcf56fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a26469706673582212208f3863393d11f1703c639c69e0a5523d2cc896c295d12006be01b62fad5aed5b64736f6c63430008140033";

type EarlyAccessCodesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EarlyAccessCodesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EarlyAccessCodes__factory extends ContractFactory {
  constructor(...args: EarlyAccessCodesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _verifier: AddressLike,
    _hasher: AddressLike,
    _merkleTreeHeight: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _verifier,
      _hasher,
      _merkleTreeHeight,
      overrides || {}
    );
  }
  override deploy(
    _verifier: AddressLike,
    _hasher: AddressLike,
    _merkleTreeHeight: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _verifier,
      _hasher,
      _merkleTreeHeight,
      overrides || {}
    ) as Promise<
      EarlyAccessCodes & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): EarlyAccessCodes__factory {
    return super.connect(runner) as EarlyAccessCodes__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EarlyAccessCodesInterface {
    return new Interface(_abi) as EarlyAccessCodesInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): EarlyAccessCodes {
    return new Contract(address, _abi, runner) as unknown as EarlyAccessCodes;
  }
}
