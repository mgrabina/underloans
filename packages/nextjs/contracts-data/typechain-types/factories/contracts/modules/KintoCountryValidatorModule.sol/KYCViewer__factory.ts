/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  KYCViewer,
  KYCViewerInterface,
} from "../../../../contracts/modules/KintoCountryValidatorModule.sol/KYCViewer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "getBalances",
    outputs: [
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getCountry",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "_wallet",
        type: "address",
      },
    ],
    name: "getUserInfo",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "ownerBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "walletBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "walletPolicy",
            type: "uint256",
          },
          {
            internalType: "address[]",
            name: "walletOwners",
            type: "address[]",
          },
          {
            internalType: "bool",
            name: "claimedFaucet",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "hasNFT",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "engenCreditsEarned",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "engenCreditsClaimed",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isKYC",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "recoveryTs",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "insurancePolicy",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "hasValidInsurance",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "insuranceTimestamp",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "deployer",
            type: "address",
          },
        ],
        internalType: "struct KYCViewer.UserInfo",
        name: "info",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_traitId",
        type: "uint16",
      },
    ],
    name: "hasTrait",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "isCompany",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "isIndividual",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "isKYC",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "isSanctionsSafe",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_countryId",
        type: "uint16",
      },
    ],
    name: "isSanctionsSafeIn",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class KYCViewer__factory {
  static readonly abi = _abi;
  static createInterface(): KYCViewerInterface {
    return new Interface(_abi) as KYCViewerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): KYCViewer {
    return new Contract(address, _abi, runner) as unknown as KYCViewer;
  }
}
