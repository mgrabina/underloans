/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestValidatorModule,
  TestValidatorModuleInterface,
} from "../../../contracts/modules/TestValidatorModule";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "arg",
        type: "bytes",
      },
    ],
    name: "validate",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063c16e50ef14602d575b600080fd5b604060383660046054565b600192915050565b604051901515815260200160405180910390f35b60008060208385031215606657600080fd5b823567ffffffffffffffff80821115607d57600080fd5b818501915085601f830112609057600080fd5b813581811115609e57600080fd5b86602082850101111560af57600080fd5b6020929092019691955090935050505056fea26469706673582212208739ee06ac8d648df91ec45097555ffdb8319a99e3b6cc4ebc0db2d50c5fea1964736f6c63430008140033";

type TestValidatorModuleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestValidatorModuleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestValidatorModule__factory extends ContractFactory {
  constructor(...args: TestValidatorModuleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestValidatorModule & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): TestValidatorModule__factory {
    return super.connect(runner) as TestValidatorModule__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestValidatorModuleInterface {
    return new Interface(_abi) as TestValidatorModuleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestValidatorModule {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as TestValidatorModule;
  }
}
