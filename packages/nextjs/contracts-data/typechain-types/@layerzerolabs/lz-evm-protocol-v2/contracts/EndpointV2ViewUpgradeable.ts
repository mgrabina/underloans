/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type OriginStruct = {
  srcEid: BigNumberish;
  sender: BytesLike;
  nonce: BigNumberish;
};

export type OriginStructOutput = [
  srcEid: bigint,
  sender: string,
  nonce: bigint
] & { srcEid: bigint; sender: string; nonce: bigint };

export interface EndpointV2ViewUpgradeableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EMPTY_PAYLOAD_HASH"
      | "NIL_PAYLOAD_HASH"
      | "endpoint"
      | "executable"
      | "initializable"
      | "verifiable"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;

  encodeFunctionData(
    functionFragment: "EMPTY_PAYLOAD_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NIL_PAYLOAD_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executable",
    values: [OriginStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializable",
    values: [OriginStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiable",
    values: [OriginStruct, AddressLike, AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "EMPTY_PAYLOAD_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NIL_PAYLOAD_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifiable", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EndpointV2ViewUpgradeable extends BaseContract {
  connect(runner?: ContractRunner | null): EndpointV2ViewUpgradeable;
  waitForDeployment(): Promise<this>;

  interface: EndpointV2ViewUpgradeableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EMPTY_PAYLOAD_HASH: TypedContractMethod<[], [string], "view">;

  NIL_PAYLOAD_HASH: TypedContractMethod<[], [string], "view">;

  endpoint: TypedContractMethod<[], [string], "view">;

  executable: TypedContractMethod<
    [_origin: OriginStruct, _receiver: AddressLike],
    [bigint],
    "view"
  >;

  initializable: TypedContractMethod<
    [_origin: OriginStruct, _receiver: AddressLike],
    [boolean],
    "view"
  >;

  verifiable: TypedContractMethod<
    [
      _origin: OriginStruct,
      _receiver: AddressLike,
      _receiveLib: AddressLike,
      _payloadHash: BytesLike
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EMPTY_PAYLOAD_HASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "NIL_PAYLOAD_HASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "endpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "executable"
  ): TypedContractMethod<
    [_origin: OriginStruct, _receiver: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initializable"
  ): TypedContractMethod<
    [_origin: OriginStruct, _receiver: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifiable"
  ): TypedContractMethod<
    [
      _origin: OriginStruct,
      _receiver: AddressLike,
      _receiveLib: AddressLike,
      _payloadHash: BytesLike
    ],
    [boolean],
    "view"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
  };
}
