/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IExecutorFeeLib {
  export type FeeParamsStruct = {
    priceFeed: AddressLike;
    dstEid: BigNumberish;
    sender: AddressLike;
    calldataSize: BigNumberish;
    defaultMultiplierBps: BigNumberish;
  };

  export type FeeParamsStructOutput = [
    priceFeed: string,
    dstEid: bigint,
    sender: string,
    calldataSize: bigint,
    defaultMultiplierBps: bigint
  ] & {
    priceFeed: string;
    dstEid: bigint;
    sender: string;
    calldataSize: bigint;
    defaultMultiplierBps: bigint;
  };
}

export declare namespace IExecutor {
  export type DstConfigStruct = {
    lzReceiveBaseGas: BigNumberish;
    multiplierBps: BigNumberish;
    floorMarginUSD: BigNumberish;
    nativeCap: BigNumberish;
    lzComposeBaseGas: BigNumberish;
  };

  export type DstConfigStructOutput = [
    lzReceiveBaseGas: bigint,
    multiplierBps: bigint,
    floorMarginUSD: bigint,
    nativeCap: bigint,
    lzComposeBaseGas: bigint
  ] & {
    lzReceiveBaseGas: bigint;
    multiplierBps: bigint;
    floorMarginUSD: bigint;
    nativeCap: bigint;
    lzComposeBaseGas: bigint;
  };
}

export interface IExecutorFeeLibInterface extends Interface {
  getFunction(nameOrSignature: "getFee" | "getFeeOnSend"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getFee",
    values: [
      IExecutorFeeLib.FeeParamsStruct,
      IExecutor.DstConfigStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeOnSend",
    values: [
      IExecutorFeeLib.FeeParamsStruct,
      IExecutor.DstConfigStruct,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeOnSend",
    data: BytesLike
  ): Result;
}

export interface IExecutorFeeLib extends BaseContract {
  connect(runner?: ContractRunner | null): IExecutorFeeLib;
  waitForDeployment(): Promise<this>;

  interface: IExecutorFeeLibInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFee: TypedContractMethod<
    [
      _params: IExecutorFeeLib.FeeParamsStruct,
      _dstConfig: IExecutor.DstConfigStruct,
      _options: BytesLike
    ],
    [bigint],
    "view"
  >;

  getFeeOnSend: TypedContractMethod<
    [
      _params: IExecutorFeeLib.FeeParamsStruct,
      _dstConfig: IExecutor.DstConfigStruct,
      _options: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getFee"
  ): TypedContractMethod<
    [
      _params: IExecutorFeeLib.FeeParamsStruct,
      _dstConfig: IExecutor.DstConfigStruct,
      _options: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeeOnSend"
  ): TypedContractMethod<
    [
      _params: IExecutorFeeLib.FeeParamsStruct,
      _dstConfig: IExecutor.DstConfigStruct,
      _options: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
