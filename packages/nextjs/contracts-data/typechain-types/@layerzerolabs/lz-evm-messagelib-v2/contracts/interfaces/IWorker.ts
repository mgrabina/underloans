/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IWorkerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "defaultMultiplierBps"
      | "getSupportedOptionTypes"
      | "priceFeed"
      | "setDefaultMultiplierBps"
      | "setPriceFeed"
      | "setSupportedOptionTypes"
      | "withdrawFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "SetDefaultMultiplierBps"
      | "SetPriceFeed"
      | "SetSupportedOptionTypes"
      | "SetWorkerLib"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "defaultMultiplierBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedOptionTypes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDefaultMultiplierBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportedOptionTypes",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "defaultMultiplierBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedOptionTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultMultiplierBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportedOptionTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;
}

export namespace SetDefaultMultiplierBpsEvent {
  export type InputTuple = [multiplierBps: BigNumberish];
  export type OutputTuple = [multiplierBps: bigint];
  export interface OutputObject {
    multiplierBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPriceFeedEvent {
  export type InputTuple = [priceFeed: AddressLike];
  export type OutputTuple = [priceFeed: string];
  export interface OutputObject {
    priceFeed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetSupportedOptionTypesEvent {
  export type InputTuple = [dstEid: BigNumberish, optionTypes: BigNumberish[]];
  export type OutputTuple = [dstEid: bigint, optionTypes: bigint[]];
  export interface OutputObject {
    dstEid: bigint;
    optionTypes: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetWorkerLibEvent {
  export type InputTuple = [workerLib: AddressLike];
  export type OutputTuple = [workerLib: string];
  export interface OutputObject {
    workerLib: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    lib: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [lib: string, to: string, amount: bigint];
  export interface OutputObject {
    lib: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IWorker extends BaseContract {
  connect(runner?: ContractRunner | null): IWorker;
  waitForDeployment(): Promise<this>;

  interface: IWorkerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  defaultMultiplierBps: TypedContractMethod<[], [bigint], "view">;

  getSupportedOptionTypes: TypedContractMethod<
    [_eid: BigNumberish],
    [bigint[]],
    "view"
  >;

  priceFeed: TypedContractMethod<[], [string], "view">;

  setDefaultMultiplierBps: TypedContractMethod<
    [_multiplierBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPriceFeed: TypedContractMethod<
    [_priceFeed: AddressLike],
    [void],
    "nonpayable"
  >;

  setSupportedOptionTypes: TypedContractMethod<
    [_eid: BigNumberish, _optionTypes: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  withdrawFee: TypedContractMethod<
    [_lib: AddressLike, _to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "defaultMultiplierBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSupportedOptionTypes"
  ): TypedContractMethod<[_eid: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "priceFeed"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setDefaultMultiplierBps"
  ): TypedContractMethod<[_multiplierBps: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPriceFeed"
  ): TypedContractMethod<[_priceFeed: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSupportedOptionTypes"
  ): TypedContractMethod<
    [_eid: BigNumberish, _optionTypes: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFee"
  ): TypedContractMethod<
    [_lib: AddressLike, _to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "SetDefaultMultiplierBps"
  ): TypedContractEvent<
    SetDefaultMultiplierBpsEvent.InputTuple,
    SetDefaultMultiplierBpsEvent.OutputTuple,
    SetDefaultMultiplierBpsEvent.OutputObject
  >;
  getEvent(
    key: "SetPriceFeed"
  ): TypedContractEvent<
    SetPriceFeedEvent.InputTuple,
    SetPriceFeedEvent.OutputTuple,
    SetPriceFeedEvent.OutputObject
  >;
  getEvent(
    key: "SetSupportedOptionTypes"
  ): TypedContractEvent<
    SetSupportedOptionTypesEvent.InputTuple,
    SetSupportedOptionTypesEvent.OutputTuple,
    SetSupportedOptionTypesEvent.OutputObject
  >;
  getEvent(
    key: "SetWorkerLib"
  ): TypedContractEvent<
    SetWorkerLibEvent.InputTuple,
    SetWorkerLibEvent.OutputTuple,
    SetWorkerLibEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "SetDefaultMultiplierBps(uint16)": TypedContractEvent<
      SetDefaultMultiplierBpsEvent.InputTuple,
      SetDefaultMultiplierBpsEvent.OutputTuple,
      SetDefaultMultiplierBpsEvent.OutputObject
    >;
    SetDefaultMultiplierBps: TypedContractEvent<
      SetDefaultMultiplierBpsEvent.InputTuple,
      SetDefaultMultiplierBpsEvent.OutputTuple,
      SetDefaultMultiplierBpsEvent.OutputObject
    >;

    "SetPriceFeed(address)": TypedContractEvent<
      SetPriceFeedEvent.InputTuple,
      SetPriceFeedEvent.OutputTuple,
      SetPriceFeedEvent.OutputObject
    >;
    SetPriceFeed: TypedContractEvent<
      SetPriceFeedEvent.InputTuple,
      SetPriceFeedEvent.OutputTuple,
      SetPriceFeedEvent.OutputObject
    >;

    "SetSupportedOptionTypes(uint32,uint8[])": TypedContractEvent<
      SetSupportedOptionTypesEvent.InputTuple,
      SetSupportedOptionTypesEvent.OutputTuple,
      SetSupportedOptionTypesEvent.OutputObject
    >;
    SetSupportedOptionTypes: TypedContractEvent<
      SetSupportedOptionTypesEvent.InputTuple,
      SetSupportedOptionTypesEvent.OutputTuple,
      SetSupportedOptionTypesEvent.OutputObject
    >;

    "SetWorkerLib(address)": TypedContractEvent<
      SetWorkerLibEvent.InputTuple,
      SetWorkerLibEvent.OutputTuple,
      SetWorkerLibEvent.OutputObject
    >;
    SetWorkerLib: TypedContractEvent<
      SetWorkerLibEvent.InputTuple,
      SetWorkerLibEvent.OutputTuple,
      SetWorkerLibEvent.OutputObject
    >;

    "Withdraw(address,address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
