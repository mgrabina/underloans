{
  "address": "0x4B956bFc4A58193A7391F8749F2Fed3BB8770317",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVerifier",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "contract IHasher",
          "name": "_hasher",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_merkleTreeHeight",
          "type": "uint32"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nullifierHash",
          "type": "bytes32"
        }
      ],
      "name": "ConsumeCode",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "leafIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewCode",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "Success",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FIELD_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_HISTORY_SIZE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "TransferValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZERO_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_commitments",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_proofs",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_roots",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_nullifierHashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "address payable[]",
          "name": "_tos",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_validationsArgs",
          "type": "bytes[]"
        }
      ],
      "name": "bulkConsumeGifCard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_commitments",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[][]",
          "name": "_validationModules",
          "type": "address[][]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "_metadata",
          "type": "string[]"
        }
      ],
      "name": "bulkCreateGiftCard",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "_validationsArgs",
          "type": "bytes[]"
        }
      ],
      "name": "consumeCode",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "_validationsArgs",
          "type": "bytes[]"
        }
      ],
      "name": "consumeGiftCard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "_validationsArgs",
          "type": "bytes[]"
        }
      ],
      "name": "consumeTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_validationModules",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_metadata",
          "type": "string"
        }
      ],
      "name": "createGiftCard",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_validationModules",
          "type": "address[]"
        }
      ],
      "name": "createTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRootIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "filledSubtrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHasher",
          "name": "_hasher",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_left",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_right",
          "type": "bytes32"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasher",
      "outputs": [
        {
          "internalType": "contract IHasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "isKnownRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        }
      ],
      "name": "isSpent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_nullifierHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "isSpentArray",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "spent",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levels",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nullifierHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_validationModules",
          "type": "address[]"
        }
      ],
      "name": "setCode",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "validationModules",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "zeros",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xfde711ec86703670396031de63bcc5952c4ccacd5e98eaa6a9c0f1ac0b945eaf",
  "receipt": {
    "to": null,
    "from": "0xEB71ed911e4dFc35Da80103a72fE983C8c709F33",
    "contractAddress": "0x4B956bFc4A58193A7391F8749F2Fed3BB8770317",
    "transactionIndex": 1,
    "gasUsed": "2966761",
    "logsBloom": "0x
    "blockHash": "0x8109cce169818fb10cda80330b48d76e216f5181697ae6d6d9c736bac2990fd2",
    "transactionHash": "0xfde711ec86703670396031de63bcc5952c4ccacd5e98eaa6a9c0f1ac0b945eaf",
    "logs": [],
    "blockNumber": 16919509,
    "cumulativeGasUsed": "3010648",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4Bba2d07Bff41F188Ae8279402445556685Ec64A",
    "0xe5941240a4fA52aD2402B49Ed0e1b94a35DaaB76",
    20,
    "0x053810730e74bB9e03b80a2b19d89Af1f394E4dA"
  ],
  "numDeployments": 2,
  "solcInputHash": "9a4520b3e8e67bd927beafeaa18d7e2c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"contract IHasher\",\"name\":\"_hasher\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_merkleTreeHeight\",\"type\":\"uint32\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nullifierHash\",\"type\":\"bytes32\"}],\"name\":\"ConsumeCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"leafIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"Success\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIELD_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_HISTORY_SIZE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"TransferValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_commitments\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_proofs\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_roots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_nullifierHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"address payable[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_validationsArgs\",\"type\":\"bytes[]\"}],\"name\":\"bulkConsumeGifCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_commitments\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[][]\",\"name\":\"_validationModules\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_metadata\",\"type\":\"string[]\"}],\"name\":\"bulkCreateGiftCard\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_validationsArgs\",\"type\":\"bytes[]\"}],\"name\":\"consumeCode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_validationsArgs\",\"type\":\"bytes[]\"}],\"name\":\"consumeGiftCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_validationsArgs\",\"type\":\"bytes[]\"}],\"name\":\"consumeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_validationModules\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"}],\"name\":\"createGiftCard\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_validationModules\",\"type\":\"address[]\"}],\"name\":\"createTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRootIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"filledSubtrees\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHasher\",\"name\":\"_hasher\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_right\",\"type\":\"bytes32\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasher\",\"outputs\":[{\"internalType\":\"contract IHasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"isKnownRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"}],\"name\":\"isSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_nullifierHashes\",\"type\":\"bytes32[]\"}],\"name\":\"isSpentArray\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"spent\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levels\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nullifierHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_validationModules\",\"type\":\"address[]\"}],\"name\":\"setCode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validationModules\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"zeros\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"consumeCode(bytes32,bytes,bytes32,bytes32,address,bytes[])\":{\"details\":\"Consume a code from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all codes in the contract - hash of unique codes nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)\"},\"getLastRoot()\":{\"details\":\"Returns the last root\"},\"hashLeftRight(address,bytes32,bytes32)\":{\"details\":\"Hash 2 tree leaves, returns MiMC(_left, _right)\"},\"isKnownRoot(bytes32)\":{\"details\":\"Whether the root is present in the root history\"},\"isSpent(bytes32)\":{\"details\":\"whether a note is already spent \"},\"isSpentArray(bytes32[])\":{\"details\":\"whether an array of notes is already spent \"},\"setCode(bytes32,address[])\":{\"details\":\"Set new code.\",\"params\":{\"_commitment\":\"the note commitment, which is PedersenHash(nullifier + secret)\"}},\"zeros(uint256)\":{\"details\":\"provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/useCases/GiftCards.sol\":\"GiftCards\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/CommitProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./helpers/MerkleTreeWithHistory.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./modules/IValidationModule.sol\\\";\\n\\ninterface IVerifier {\\n  function verifyProof(bytes memory _proof, uint256[6] memory _input) external returns (bool);\\n}\\n\\ncontract CommitProtocol is MerkleTreeWithHistory, ReentrancyGuard {\\n  IVerifier public immutable verifier;\\n \\n  mapping(bytes32 => bool) public nullifierHashes;\\n  // we store all commitments just to prevent accidental creations with the same commitment\\n  mapping(bytes32 => bool) public commitments;\\n\\n  // commitments to validation modules \\n  mapping(bytes32 => address[]) public validationModules;\\n\\n  event NewCode(bytes32 indexed commitment, uint32 leafIndex, uint256 timestamp);\\n  event ConsumeCode(address to, bytes32 nullifierHash);\\n\\n  /**\\n    @dev The constructor\\n    @param _verifier the address of SNARK verifier for this contract\\n    @param _hasher the address of MiMC hash contract\\n    @param _merkleTreeHeight the height of codes' Merkle Tree\\n  */\\n  constructor(\\n    IVerifier _verifier,\\n    IHasher _hasher,\\n    uint32 _merkleTreeHeight\\n  ) MerkleTreeWithHistory(_merkleTreeHeight, _hasher) {\\n    verifier = _verifier;\\n  }\\n\\n  /**\\n    @dev Set new code.\\n    @param _commitment the note commitment, which is PedersenHash(nullifier + secret)\\n  */\\n  function setCode(bytes32 _commitment, address[] calldata _validationModules) public virtual payable nonReentrant {\\n    require(!commitments[_commitment], \\\"The commitment has been submitted\\\");\\n\\n    uint32 insertedIndex = _insert(_commitment);\\n    commitments[_commitment] = true;\\n\\n    for (uint256 i = 0; i < _validationModules.length; i++) {\\n      validationModules[_commitment].push(_validationModules[i]);\\n    }\\n\\n    emit NewCode(_commitment, insertedIndex, block.timestamp);\\n  }\\n\\n\\n  /**\\n    @dev Consume a code from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs\\n    `input` array consists of:\\n      - merkle root of all codes in the contract\\n      - hash of unique codes nullifier to prevent double spends\\n      - the recipient of funds\\n      - optional fee that goes to the transaction sender (usually a relay)\\n  */\\n  function consumeCode(\\n    bytes32 _commitment,\\n    bytes memory _proof,\\n    bytes32 _root,\\n    bytes32 _nullifierHash,\\n    address payable _recipient,\\n    bytes[] memory _validationsArgs\\n  ) public virtual payable nonReentrant {\\n    require(!nullifierHashes[_nullifierHash], \\\"The note has been already spent\\\");\\n    require(isKnownRoot(_root), \\\"Cannot find your merkle root\\\"); // Make sure to use a recent one\\n        \\n    require(\\n      verifier.verifyProof(\\n        _proof,\\n        [uint256(_root), uint256(_nullifierHash), uint256(uint160(address(_recipient))),0 ,0, 0]\\n      ),\\n      \\\"Invalid withdraw proof\\\"\\n    );\\n\\n    for (uint256 i = 0; i < validationModules[_commitment].length; i++) {\\n      IValidationModule(validationModules[_commitment][i]).validate(_validationsArgs[i]);\\n    }\\n\\n    nullifierHashes[_nullifierHash] = true;\\n\\n    emit ConsumeCode(_recipient, _nullifierHash);\\n  }\\n\\n  /** @dev whether a note is already spent */\\n  function isSpent(bytes32 _nullifierHash) public view returns (bool) {\\n    return nullifierHashes[_nullifierHash];\\n  }\\n\\n  /** @dev whether an array of notes is already spent */\\n  function isSpentArray(bytes32[] calldata _nullifierHashes) external view returns (bool[] memory spent) {\\n    spent = new bool[](_nullifierHashes.length);\\n    for (uint256 i = 0; i < _nullifierHashes.length; i++) {\\n      if (isSpent(_nullifierHashes[i])) {\\n        spent[i] = true;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xc6a9b726d92b596a465a45c3adc82a1510adc510219cc22816884dc5126e7b60\",\"license\":\"MIT\"},\"contracts/ERC20Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./CommitProtocol.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract ERC20Transfer is CommitProtocol {\\n  IERC20 public token;\\n\\n  mapping(bytes32 => uint256) public TransferValues;\\n\\n   constructor(\\n    IVerifier _verifier,\\n    IHasher _hasher,\\n    uint32 _merkleTreeHeight,\\n    IERC20 _token\\n  ) CommitProtocol(_verifier, _hasher, _merkleTreeHeight) {\\n    token = _token;\\n  }\\n\\n  function createTransfer(bytes32 _commitment, uint256 _value, address[] calldata _validationModules) public payable {\\n    super.setCode(_commitment, _validationModules);\\n\\n    token.transferFrom(msg.sender, address(this), _value);\\n\\n    TransferValues[_commitment] = _value;\\n  }\\n\\n  function consumeTransfer(\\n    bytes32 _commitment,\\n    bytes calldata _proof,\\n    bytes32 _root,\\n    bytes32 _nullifierHash,\\n    address payable _to,\\n    bytes[] calldata _validationsArgs\\n  ) public {\\n    super.consumeCode(_commitment, _proof, _root, _nullifierHash, _to, _validationsArgs );\\n\\n    uint256 value = TransferValues[_commitment];\\n\\n    token.transfer(_to, value);\\n  }\\n\\n \\n}\",\"keccak256\":\"0xbd67bb7536712e747f80ce4fea8611c90d2cdc3fdd54cc41518e918bccfb9357\",\"license\":\"MIT\"},\"contracts/helpers/MerkleTreeWithHistory.sol\":{\"content\":\"// https://tornado.cash\\n/*\\n * d888888P                                           dP              a88888b.                   dP\\n *    88                                              88             d8'   `88                   88\\n *    88    .d8888b. 88d888b. 88d888b. .d8888b. .d888b88 .d8888b.    88        .d8888b. .d8888b. 88d888b.\\n *    88    88'  `88 88'  `88 88'  `88 88'  `88 88'  `88 88'  `88    88        88'  `88 Y8ooooo. 88'  `88\\n *    88    88.  .88 88       88    88 88.  .88 88.  .88 88.  .88 dP Y8.   .88 88.  .88       88 88    88\\n *    dP    `88888P' dP       dP    dP `88888P8 `88888P8 `88888P' 88  Y88888P' `88888P8 `88888P' dP    dP\\n * ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IHasher {\\n  function MiMCSponge(uint256 in_xL, uint256 in_xR) external pure returns (uint256 xL, uint256 xR);\\n}\\n\\ncontract MerkleTreeWithHistory {\\n  uint256 public constant FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n  uint256 public constant ZERO_VALUE = 21663839004416932945382355908790599225266501822907911457504978515578255421292; // = keccak256(\\\"tornado\\\") % FIELD_SIZE\\n  IHasher public immutable hasher;\\n\\n  uint32 public levels;\\n\\n  // the following variables are made public for easier testing and debugging and\\n  // are not supposed to be accessed in regular code\\n\\n  // filledSubtrees and roots could be bytes32[size], but using mappings makes it cheaper because\\n  // it removes index range check on every interaction\\n  mapping(uint256 => bytes32) public filledSubtrees;\\n  mapping(uint256 => bytes32) public roots;\\n  uint32 public constant ROOT_HISTORY_SIZE = 30;\\n  uint32 public currentRootIndex = 0;\\n  uint32 public nextIndex = 0;\\n\\n  constructor(uint32 _levels, IHasher _hasher) {\\n    require(_levels > 0, \\\"_levels should be greater than zero\\\");\\n    require(_levels < 32, \\\"_levels should be less than 32\\\");\\n    levels = _levels;\\n    hasher = _hasher;\\n\\n    for (uint32 i = 0; i < _levels; i++) {\\n      filledSubtrees[i] = zeros(i);\\n    }\\n\\n    roots[0] = zeros(_levels - 1);\\n  }\\n\\n  /**\\n    @dev Hash 2 tree leaves, returns MiMC(_left, _right)\\n  */\\n  function hashLeftRight(\\n    IHasher _hasher,\\n    bytes32 _left,\\n    bytes32 _right\\n  ) public pure returns (bytes32) {\\n    require(uint256(_left) < FIELD_SIZE, \\\"_left should be inside the field\\\");\\n    require(uint256(_right) < FIELD_SIZE, \\\"_right should be inside the field\\\");\\n    uint256 R = uint256(_left);\\n    uint256 C = 0;\\n    (R, C) = _hasher.MiMCSponge(R, C);\\n    R = addmod(R, uint256(_right), FIELD_SIZE);\\n    (R, C) = _hasher.MiMCSponge(R, C);\\n    return bytes32(R);\\n  }\\n\\n  function _insert(bytes32 _leaf) internal returns (uint32 index) {\\n    uint32 _nextIndex = nextIndex;\\n    require(_nextIndex != uint32(2)**levels, \\\"Merkle tree is full. No more leaves can be added\\\");\\n    uint32 currentIndex = _nextIndex;\\n    bytes32 currentLevelHash = _leaf;\\n    bytes32 left;\\n    bytes32 right;\\n\\n    for (uint32 i = 0; i < levels; i++) {\\n      if (currentIndex % 2 == 0) {\\n        left = currentLevelHash;\\n        right = zeros(i);\\n        filledSubtrees[i] = currentLevelHash;\\n      } else {\\n        left = filledSubtrees[i];\\n        right = currentLevelHash;\\n      }\\n      currentLevelHash = hashLeftRight(hasher, left, right);\\n      currentIndex /= 2;\\n    }\\n\\n    uint32 newRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\\n    currentRootIndex = newRootIndex;\\n    roots[newRootIndex] = currentLevelHash;\\n    nextIndex = _nextIndex + 1;\\n    return _nextIndex;\\n  }\\n\\n  /**\\n    @dev Whether the root is present in the root history\\n  */\\n  function isKnownRoot(bytes32 _root) public view returns (bool) {\\n    if (_root == 0) {\\n      return false;\\n    }\\n    uint32 _currentRootIndex = currentRootIndex;\\n    uint32 i = _currentRootIndex;\\n    do {\\n      if (_root == roots[i]) {\\n        return true;\\n      }\\n      if (i == 0) {\\n        i = ROOT_HISTORY_SIZE;\\n      }\\n      i--;\\n    } while (i != _currentRootIndex);\\n    return false;\\n  }\\n\\n  /**\\n    @dev Returns the last root\\n  */\\n  function getLastRoot() public view returns (bytes32) {\\n    return roots[currentRootIndex];\\n  }\\n\\n  /// @dev provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\\n  function zeros(uint256 i) public pure returns (bytes32) {\\n    if (i == 0) return bytes32(0x2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c);\\n    else if (i == 1) return bytes32(0x256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d);\\n    else if (i == 2) return bytes32(0x1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200);\\n    else if (i == 3) return bytes32(0x20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb);\\n    else if (i == 4) return bytes32(0x0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9);\\n    else if (i == 5) return bytes32(0x24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959);\\n    else if (i == 6) return bytes32(0x1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c);\\n    else if (i == 7) return bytes32(0x19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4);\\n    else if (i == 8) return bytes32(0x261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80);\\n    else if (i == 9) return bytes32(0x0058459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007);\\n    else if (i == 10) return bytes32(0x1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30);\\n    else if (i == 11) return bytes32(0x1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5);\\n    else if (i == 12) return bytes32(0x0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f);\\n    else if (i == 13) return bytes32(0x1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd);\\n    else if (i == 14) return bytes32(0x133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108);\\n    else if (i == 15) return bytes32(0x13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6);\\n    else if (i == 16) return bytes32(0x1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854);\\n    else if (i == 17) return bytes32(0x0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea);\\n    else if (i == 18) return bytes32(0x24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d);\\n    else if (i == 19) return bytes32(0x198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05);\\n    else if (i == 20) return bytes32(0x29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4);\\n    else if (i == 21) return bytes32(0x19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967);\\n    else if (i == 22) return bytes32(0x1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453);\\n    else if (i == 23) return bytes32(0x10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48);\\n    else if (i == 24) return bytes32(0x0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1);\\n    else if (i == 25) return bytes32(0x019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c);\\n    else if (i == 26) return bytes32(0x2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99);\\n    else if (i == 27) return bytes32(0x2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354);\\n    else if (i == 28) return bytes32(0x002df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d);\\n    else if (i == 29) return bytes32(0x104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427);\\n    else if (i == 30) return bytes32(0x1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb);\\n    else if (i == 31) return bytes32(0x2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc);\\n    else revert(\\\"Index out of bounds\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x7ca5c42171d3a80191c56b126a47f86093075bece4fa96eace305f8ee3d4f6ae\",\"license\":\"MIT\"},\"contracts/modules/IValidationModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IValidationModule {\\n  function validate(bytes calldata arg) external returns (bool);\\n}\",\"keccak256\":\"0xbce3d3ab208ca1c7fd5e6500f0836c0b99c6dd4b172ebb27bab1a41d2322f94f\",\"license\":\"MIT\"},\"contracts/useCases/GiftCards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../ERC20Transfer.sol\\\";\\n\\ncontract GiftCards is ERC20Transfer {\\n\\n  // Mapping for gift card's metadata\\n  mapping(bytes32 => string) public metadata;\\n\\n  event Success(bool success);\\n\\n  constructor (\\n    IVerifier _verifier,\\n    IHasher _hasher,\\n    uint32 _merkleTreeHeight,\\n    IERC20 _token\\n  ) ERC20Transfer(_verifier, _hasher, _merkleTreeHeight, _token) {  }\\n\\n  function createGiftCard(bytes32 _commitment, address[] calldata _validationModules, uint256 _value, string memory _metadata) public payable  {\\n    metadata[_commitment] = _metadata;\\n\\n    super.createTransfer(\\n      _commitment,\\n      _value,\\n      _validationModules\\n    );\\n  }\\n\\n  function consumeGiftCard(\\n    bytes32 _commitment,\\n    bytes calldata _proof,\\n    bytes32 _root,\\n    bytes32 _nullifierHash,\\n    address payable _to,\\n    bytes[] calldata _validationsArgs\\n  ) public  {\\n    super.consumeTransfer(\\n      _commitment,\\n      _proof,\\n      _root,\\n      _nullifierHash,\\n      _to,\\n      _validationsArgs\\n    );\\n\\n        emit Success(true);\\n\\n  }\\n\\n  function bulkCreateGiftCard(bytes32[] calldata _commitments, address[][] calldata _validationModules, uint256[] calldata _values, string[] calldata _metadata) external payable  {\\n    require(_commitments.length == _values.length, \\\"commitments and values length mismatch\\\");\\n    require(_commitments.length == _metadata.length, \\\"commitments and metadata length mismatch\\\");\\n    require(_commitments.length == _validationModules.length, \\\"commitments and validationModules length mismatch\\\");\\n\\n    for (uint256 i = 0; i < _commitments.length; i++) {\\n      createGiftCard(_commitments[i], _validationModules[i], _values[i], _metadata[i]);\\n    }\\n  }\\n\\n  function bulkConsumeGifCard(\\n    bytes32[] calldata _commitments,\\n    bytes[] calldata _proofs,\\n    bytes32[] calldata _roots,\\n    bytes32[] calldata _nullifierHashes,\\n    address payable[] calldata _tos,\\n    bytes[] calldata _validationsArgs\\n  ) external  {\\n    require(_commitments.length == _proofs.length, \\\"commitments and proofs length mismatch\\\");\\n    require(_commitments.length == _roots.length, \\\"commitments and roots length mismatch\\\");\\n    require(_commitments.length == _nullifierHashes.length, \\\"commitments and nullifierHashes length mismatch\\\");\\n    require(_commitments.length == _tos.length, \\\"commitments and tos length mismatch\\\");\\n    require(_commitments.length == _validationsArgs.length, \\\"commitments and validationsArgs length mismatch\\\");\\n\\n    for (uint256 i = 0; i < _commitments.length; i++) {\\n      consumeGiftCard(\\n        _commitments[i],\\n        _proofs[i],\\n        _roots[i],\\n        _nullifierHashes[i],\\n        _tos[i],\\n        _validationsArgs\\n      );\\n    }\\n  }\\n}\",\"keccak256\":\"0xa3a24de156a6f9bd1893b4ebe08c1596f2a0c1faf16dd88068cb69dd4cbbadae\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600380546001600160401b03191690553480156200002157600080fd5b506040516200339f3803806200339f833981016040819052620000449162000869565b83838383838383808260008263ffffffff1611620000b55760405162461bcd60e51b815260206004820152602360248201527f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60448201526265726f60e81b60648201526084015b60405180910390fd5b60208263ffffffff16106200010d5760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e20333200006044820152606401620000ac565b6000805463ffffffff191663ffffffff84161781556001600160a01b0382166080525b8263ffffffff168163ffffffff16101562000181576200015663ffffffff821662000207565b63ffffffff8216600090815260016020526040902055806200017881620008ef565b91505062000130565b506200019f6200019360018462000915565b63ffffffff1662000207565b6000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b555050600160045550506001600160a01b0390811660a052600880546001600160a01b03191692909116919091179055506200093c95505050505050565b6000816000036200023957507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b816001036200026957507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b816002036200029957507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b81600303620002c957507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b81600403620002f957507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b816005036200032957507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b816006036200035957507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b816007036200038957507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b81600803620003b957507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b81600903620003e857507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a036200041857507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b036200044857507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c036200047857507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d03620004a857507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e03620004d857507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f036200050857507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b816010036200053857507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b816011036200056857507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b816012036200059857507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b81601303620005c857507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b81601403620005f857507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b816015036200062857507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b816016036200065857507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b816017036200068857507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b81601803620006b857507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b81601903620006e857507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a036200071857507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b036200074857507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c036200077757507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d03620007a757507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e03620007d757507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f036200080757507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e6473000000000000000000000000006044820152606401620000ac565b6001600160a01b03811681146200086657600080fd5b50565b600080600080608085870312156200088057600080fd5b84516200088d8162000850565b6020860151909450620008a08162000850565b604086015190935063ffffffff81168114620008bb57600080fd5b6060860151909250620008ce8162000850565b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff8083168181036200090b576200090b620008d9565b6001019392505050565b63ffffffff828116828216039080821115620009355762000935620008d9565b5092915050565b60805160a051612a2f620009706000396000818161023e01526109f80152600081816105bc0152611cce0152612a2f6000f3fe6080604052600436106101cd5760003560e01c80638ea3099e116100f7578063cd87a3b411610095578063ed33639f11610064578063ed33639f146105aa578063f178e47c146105de578063fc0c546a1461060b578063fc7e9c6f1461062b57600080fd5b8063cd87a3b414610511578063e5285dcc14610526578063e829558814610556578063ec7329591461057657600080fd5b8063ba70f757116100d1578063ba70f7571461047a578063c2b40ae4146104a4578063c345cc4f146104d1578063cc013d85146104fe57600080fd5b80638ea3099e1461041057806390eeb02b146104305780639fa12d0b1461044d57600080fd5b80634488e5951161016f5780637122ba061161013e5780637122ba0614610373578063838a11fd146103a0578063839df945146103c057806386bdf8a9146103f057600080fd5b80634488e595146102e15780634ecf518b1461030157806365e4af88146103335780636d9833e31461035357600080fd5b8063323020e5116101ab578063323020e5146102785780633e7fd3b41461028b578063414a37ba1461029e5780634346fc55146102ce57600080fd5b806317cc915c146101d257806319da7f78146102175780632b7ac3f31461022c575b600080fd5b3480156101de57600080fd5b506102026101ed366004611da3565b60056020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61022a610225366004611e07565b610650565b005b34801561023857600080fd5b506102607f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161020e565b61022a610286366004611eca565b61085b565b61022a610299366004612087565b6108f6565b3480156102aa57600080fd5b506102c06000805160206129da83398151915281565b60405190815260200161020e565b61022a6102dc36600461212e565b610c0c565b3480156102ed57600080fd5b5061022a6102fc3660046121be565b610c38565b34801561030d57600080fd5b5060005461031e9063ffffffff1681565b60405163ffffffff909116815260200161020e565b34801561033f57600080fd5b5061022a61034e366004612265565b610d18565b34801561035f57600080fd5b5061020261036e366004611da3565b610fc8565b34801561037f57600080fd5b5061039361038e366004611da3565b611046565b60405161020e91906123e8565b3480156103ac57600080fd5b506102606103bb3660046123fb565b6110e0565b3480156103cc57600080fd5b506102026103db366004611da3565b60066020526000908152604090205460ff1681565b3480156103fc57600080fd5b5061022a61040b3660046121be565b611118565b34801561041c57600080fd5b506102c061042b36600461241d565b611166565b34801561043c57600080fd5b5060035461031e9063ffffffff1681565b34801561045957600080fd5b5061046d610468366004612452565b611333565b60405161020e9190612493565b34801561048657600080fd5b5060035463ffffffff166000908152600260205260409020546102c0565b3480156104b057600080fd5b506102c06104bf366004611da3565b60026020526000908152604090205481565b3480156104dd57600080fd5b506102c06104ec366004611da3565b60096020526000908152604090205481565b61022a61050c3660046124d9565b6113f8565b34801561051d57600080fd5b5061031e601e81565b34801561053257600080fd5b50610202610541366004611da3565b60009081526005602052604090205460ff1690565b34801561056257600080fd5b506102c0610571366004611da3565b611563565b34801561058257600080fd5b506102c07f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b3480156105b657600080fd5b506102607f000000000000000000000000000000000000000000000000000000000000000081565b3480156105ea57600080fd5b506102c06105f9366004611da3565b60016020526000908152604090205481565b34801561061757600080fd5b50600854610260906001600160a01b031681565b34801561063757600080fd5b5060035461031e90640100000000900463ffffffff1681565b8683146106b35760405162461bcd60e51b815260206004820152602660248201527f636f6d6d69746d656e747320616e642076616c756573206c656e677468206d696044820152650e6dac2e8c6d60d31b60648201526084015b60405180910390fd5b8681146107135760405162461bcd60e51b815260206004820152602860248201527f636f6d6d69746d656e747320616e64206d65746164617461206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016106aa565b86851461077c5760405162461bcd60e51b815260206004820152603160248201527f636f6d6d69746d656e747320616e642076616c69646174696f6e4d6f64756c656044820152700e640d8cadccee8d040dad2e6dac2e8c6d607b1b60648201526084016106aa565b60005b878110156108505761083e89898381811061079c5761079c612524565b905060200201358888848181106107b5576107b5612524565b90506020028101906107c7919061253a565b8888868181106107d9576107d9612524565b905060200201358787878181106107f2576107f2612524565b90506020028101906108049190612583565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c0c92505050565b80610848816125df565b91505061077f565b505050505050505050565b6108668483836113f8565b6008546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156108bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e191906125f8565b50505060009182526009602052604090912055565b6108fe611b86565b60008381526005602052604090205460ff161561095d5760405162461bcd60e51b815260206004820152601f60248201527f546865206e6f746520686173206265656e20616c7265616479207370656e740060448201526064016106aa565b61096684610fc8565b6109b25760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742066696e6420796f7572206d65726b6c6520726f6f740000000060448201526064016106aa565b6040805160c081018252858152602081018590526001600160a01b03848116828401526000606083018190526080830181905260a0830152915163695ef6f960e01b81527f00000000000000000000000000000000000000000000000000000000000000009092169163695ef6f991610a309189919060040161261a565b6020604051808303816000875af1158015610a4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7391906125f8565b610ab85760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2103bb4ba34323930bb90383937b7b360511b60448201526064016106aa565b60005b600087815260076020526040902054811015610b9d576000878152600760205260409020805482908110610af157610af1612524565b60009182526020909120015482516001600160a01b039091169063c16e50ef90849084908110610b2357610b23612524565b60200260200101516040518263ffffffff1660e01b8152600401610b4791906123e8565b6020604051808303816000875af1158015610b66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8a91906125f8565b5080610b95816125df565b915050610abb565b50600083815260056020908152604091829020805460ff1916600117905581516001600160a01b03851681529081018590527f9ebe94a87e9d85fb44a2b38b11c3b10117eba3fbd045c54a8577bc62540d5d75910160405180910390a1610c046001600455565b505050505050565b6000858152600a60205260409020610c2482826126e0565b50610c318583868661085b565b5050505050565b610c828888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250899150889050610299878961279f565b6000888152600960205260409081902054600854915163a9059cbb60e01b81526001600160a01b038681166004830152602482018390529192919091169063a9059cbb906044016020604051808303816000875af1158015610ce8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0c91906125f8565b50505050505050505050565b8a8914610d765760405162461bcd60e51b815260206004820152602660248201527f636f6d6d69746d656e747320616e642070726f6f6673206c656e677468206d696044820152650e6dac2e8c6d60d31b60648201526084016106aa565b8a8714610dd35760405162461bcd60e51b815260206004820152602560248201527f636f6d6d69746d656e747320616e6420726f6f7473206c656e677468206d69736044820152640dac2e8c6d60db1b60648201526084016106aa565b8a8514610e3a5760405162461bcd60e51b815260206004820152602f60248201527f636f6d6d69746d656e747320616e64206e756c6c69666965724861736865732060448201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b60648201526084016106aa565b8a8314610e955760405162461bcd60e51b815260206004820152602360248201527f636f6d6d69746d656e747320616e6420746f73206c656e677468206d69736d616044820152620e8c6d60eb1b60648201526084016106aa565b8a8114610efc5760405162461bcd60e51b815260206004820152602f60248201527f636f6d6d69746d656e747320616e642076616c69646174696f6e73417267732060448201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b60648201526084016106aa565b60005b8b811015610fb957610fa78d8d83818110610f1c57610f1c612524565b905060200201358c8c84818110610f3557610f35612524565b9050602002810190610f479190612583565b8c8c86818110610f5957610f59612524565b905060200201358b8b87818110610f7257610f72612524565b905060200201358a8a88818110610f8b57610f8b612524565b9050602002016020810190610fa091906127ac565b8989611118565b80610fb1816125df565b915050610eff565b50505050505050505050505050565b6000818103610fd957506000919050565b60035463ffffffff16805b63ffffffff8116600090815260026020526040902054840361100a575060019392505050565b8063ffffffff1660000361101c5750601e5b80611026816127c9565b9150508163ffffffff168163ffffffff1603610fe4575060009392505050565b600a602052600090815260409020805461105f90612660565b80601f016020809104026020016040519081016040528092919081815260200182805461108b90612660565b80156110d85780601f106110ad576101008083540402835291602001916110d8565b820191906000526020600020905b8154815290600101906020018083116110bb57829003601f168201915b505050505081565b600760205281600052604060002081815481106110fc57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6111288888888888888888610c38565b604051600181527f3b0a8ddef325df2bfdfa6b430ae4c8421841cd135bfa8fb5e432f200787520bb9060200160405180910390a15050505050505050565b60006000805160206129da83398151915283106111c55760405162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c6460448201526064016106aa565b6000805160206129da833981519152821061122c5760405162461bcd60e51b815260206004820152602160248201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c6044820152601960fa1b60648201526084016106aa565b60405163f47d33b560e01b81526004810184905260006024820181905284916001600160a01b0387169063f47d33b5906044016040805180830381865afa15801561127b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129f91906127e9565b90925090506000805160206129da83398151915284830860405163f47d33b560e01b815260048101829052602481018390529092506001600160a01b0387169063f47d33b5906044016040805180830381865afa158015611304573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132891906127e9565b509695505050505050565b6060816001600160401b0381111561134d5761134d611f1c565b604051908082528060200260200182016040528015611376578160200160208202803683370190505b50905060005b828110156113f1576113b584848381811061139957611399612524565b9050602002013560009081526005602052604090205460ff1690565b156113df5760018282815181106113ce576113ce612524565b911515602092830291909101909101525b806113e9816125df565b91505061137c565b5092915050565b611400611b86565b60008381526006602052604090205460ff16156114695760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b60648201526084016106aa565b600061147484611bb0565b6000858152600660205260408120805460ff191660011790559091505b828110156115125760008581526007602052604090208484838181106114b9576114b9612524565b90506020020160208101906114ce91906127ac565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b039092169190911790558061150a816125df565b915050611491565b506040805163ffffffff8316815242602082015285917fee825d3f4d0fa209d8e2a39afe24a21286d8dc103d63061a2ed322db4ce018e3910160405180910390a25061155e6001600455565b505050565b60008160000361159457507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b816001036115c357507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b816002036115f257507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b8160030361162157507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b8160040361165057507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b8160050361167f57507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b816006036116ae57507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b816007036116dd57507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b8160080361170c57507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b8160090361173a57507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a0361176957507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b0361179857507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c036117c757507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d036117f657507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e0361182557507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f0361185457507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b8160100361188357507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b816011036118b257507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b816012036118e157507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b8160130361191057507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b8160140361193f57507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b8160150361196e57507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b8160160361199d57507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b816017036119cc57507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b816018036119fb57507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b81601903611a2a57507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a03611a5957507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b03611a8857507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c03611ab657507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d03611ae557507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e03611b1457507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f03611b4357507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064016106aa565b919050565b600260045403611ba957604051633ee5aeb560e01b815260040160405180910390fd5b6002600455565b60035460008054909163ffffffff640100000000909104811691611bd691166002612936565b63ffffffff168163ffffffff1603611c495760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b60648201526084016106aa565b8083600080805b60005463ffffffff9081169082161015611d1557611c6f600286612953565b63ffffffff16600003611cad57839250611c8e8163ffffffff16611563565b63ffffffff821660009081526001602052604090208590559150611cc9565b63ffffffff811660009081526001602052604090205492508391505b611cf47f00000000000000000000000000000000000000000000000000000000000000008484611166565b9350611d01600286612976565b945080611d0d81612999565b915050611c50565b50600354600090601e90611d309063ffffffff1660016129bc565b611d3a9190612953565b6003805463ffffffff191663ffffffff831690811790915560009081526002602052604090208590559050611d708660016129bc565b6003805463ffffffff929092166401000000000267ffffffff000000001990921691909117905550939695505050505050565b600060208284031215611db557600080fd5b5035919050565b60008083601f840112611dce57600080fd5b5081356001600160401b03811115611de557600080fd5b6020830191508360208260051b8501011115611e0057600080fd5b9250929050565b6000806000806000806000806080898b031215611e2357600080fd5b88356001600160401b0380821115611e3a57600080fd5b611e468c838d01611dbc565b909a50985060208b0135915080821115611e5f57600080fd5b611e6b8c838d01611dbc565b909850965060408b0135915080821115611e8457600080fd5b611e908c838d01611dbc565b909650945060608b0135915080821115611ea957600080fd5b50611eb68b828c01611dbc565b999c989b5096995094979396929594505050565b60008060008060608587031215611ee057600080fd5b843593506020850135925060408501356001600160401b03811115611f0457600080fd5b611f1087828801611dbc565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611f5a57611f5a611f1c565b604052919050565b60006001600160401b03831115611f7b57611f7b611f1c565b611f8e601f8401601f1916602001611f32565b9050828152838383011115611fa257600080fd5b828260208301376000602084830101529392505050565b600082601f830112611fca57600080fd5b611fd983833560208501611f62565b9392505050565b6001600160a01b0381168114611ff557600080fd5b50565b8035611b8181611fe0565b60006001600160401b038084111561201d5761201d611f1c565b8360051b602061202e818301611f32565b8681529350908401908084018783111561204757600080fd5b855b8381101561207b578035858111156120615760008081fd5b61206d8a828a01611fb9565b835250908201908201612049565b50505050509392505050565b60008060008060008060c087890312156120a057600080fd5b8635955060208701356001600160401b03808211156120be57600080fd5b6120ca8a838b01611fb9565b96506040890135955060608901359450608089013591506120ea82611fe0565b90925060a0880135908082111561210057600080fd5b508701601f8101891361211257600080fd5b61212189823560208401612003565b9150509295509295509295565b60008060008060006080868803121561214657600080fd5b8535945060208601356001600160401b038082111561216457600080fd5b61217089838a01611dbc565b909650945060408801359350606088013591508082111561219057600080fd5b508601601f810188136121a257600080fd5b6121b188823560208401611f62565b9150509295509295909350565b60008060008060008060008060c0898b0312156121da57600080fd5b8835975060208901356001600160401b03808211156121f857600080fd5b818b0191508b601f83011261220c57600080fd5b81358181111561221b57600080fd5b8c602082850101111561222d57600080fd5b602083019950975060408b0135965060608b0135955061224f60808c01611ff8565b945060a08b0135915080821115611ea957600080fd5b60008060008060008060008060008060008060c08d8f03121561228757600080fd5b6001600160401b038d35111561229c57600080fd5b6122a98e8e358f01611dbc565b909c509a506001600160401b0360208e013511156122c657600080fd5b6122d68e60208f01358f01611dbc565b909a5098506001600160401b0360408e013511156122f357600080fd5b6123038e60408f01358f01611dbc565b90985096506001600160401b0360608e0135111561232057600080fd5b6123308e60608f01358f01611dbc565b90965094506001600160401b0360808e0135111561234d57600080fd5b61235d8e60808f01358f01611dbc565b90945092506001600160401b0360a08e0135111561237a57600080fd5b61238a8e60a08f01358f01611dbc565b81935080925050509295989b509295989b509295989b565b6000815180845260005b818110156123c8576020818501810151868301820152016123ac565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611fd960208301846123a2565b6000806040838503121561240e57600080fd5b50508035926020909101359150565b60008060006060848603121561243257600080fd5b833561243d81611fe0565b95602085013595506040909401359392505050565b6000806020838503121561246557600080fd5b82356001600160401b0381111561247b57600080fd5b61248785828601611dbc565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156124cd5783511515835292840192918401916001016124af565b50909695505050505050565b6000806000604084860312156124ee57600080fd5b8335925060208401356001600160401b0381111561250b57600080fd5b61251786828701611dbc565b9497909650939450505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261255157600080fd5b8301803591506001600160401b0382111561256b57600080fd5b6020019150600581901b3603821315611e0057600080fd5b6000808335601e1984360301811261259a57600080fd5b8301803591506001600160401b038211156125b457600080fd5b602001915036819003821315611e0057600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016125f1576125f16125c9565b5060010190565b60006020828403121561260a57600080fd5b81518015158114611fd957600080fd5b60e08152600061262d60e08301856123a2565b905060208083018460005b600681101561265557815183529183019190830190600101612638565b505050509392505050565b600181811c9082168061267457607f821691505b60208210810361269457634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561155e57600081815260208120601f850160051c810160208610156126c15750805b601f850160051c820191505b81811015610c04578281556001016126cd565b81516001600160401b038111156126f9576126f9611f1c565b61270d816127078454612660565b8461269a565b602080601f831160018114612742576000841561272a5750858301515b600019600386901b1c1916600185901b178555610c04565b600085815260208120601f198616915b8281101561277157888601518255948401946001909101908401612752565b508582101561278f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000611fd9368484612003565b6000602082840312156127be57600080fd5b8135611fd981611fe0565b600063ffffffff8216806127df576127df6125c9565b6000190192915050565b600080604083850312156127fc57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601260045260246000fd5b600181815b80851115612860578163ffffffff04821115612846576128466125c9565b8085161561285357918102915b93841c9390800290612828565b509250929050565b60008261287757506001612930565b8161288457506000612930565b816001811461289a57600281146128a4576128d5565b6001915050612930565b60ff8411156128b5576128b56125c9565b6001841b915063ffffffff8211156128cf576128cf6125c9565b50612930565b5060208310610133831016604e8410600b841016171561290c575081810a63ffffffff811115612907576129076125c9565b612930565b6129168383612823565b8063ffffffff0482111561292c5761292c6125c9565b0290505b92915050565b600063ffffffff61294b818516828516612868565b949350505050565b600063ffffffff8084168061296a5761296a61280d565b92169190910692915050565b600063ffffffff8084168061298d5761298d61280d565b92169190910492915050565b600063ffffffff8083168181036129b2576129b26125c9565b6001019392505050565b63ffffffff8181168382160190808211156113f1576113f16125c956fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a26469706673582212208fa31c3b584a6b6cad7dc912b1fe78680d4d741a8246d7a7b413a995adb46a6764736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c80638ea3099e116100f7578063cd87a3b411610095578063ed33639f11610064578063ed33639f146105aa578063f178e47c146105de578063fc0c546a1461060b578063fc7e9c6f1461062b57600080fd5b8063cd87a3b414610511578063e5285dcc14610526578063e829558814610556578063ec7329591461057657600080fd5b8063ba70f757116100d1578063ba70f7571461047a578063c2b40ae4146104a4578063c345cc4f146104d1578063cc013d85146104fe57600080fd5b80638ea3099e1461041057806390eeb02b146104305780639fa12d0b1461044d57600080fd5b80634488e5951161016f5780637122ba061161013e5780637122ba0614610373578063838a11fd146103a0578063839df945146103c057806386bdf8a9146103f057600080fd5b80634488e595146102e15780634ecf518b1461030157806365e4af88146103335780636d9833e31461035357600080fd5b8063323020e5116101ab578063323020e5146102785780633e7fd3b41461028b578063414a37ba1461029e5780634346fc55146102ce57600080fd5b806317cc915c146101d257806319da7f78146102175780632b7ac3f31461022c575b600080fd5b3480156101de57600080fd5b506102026101ed366004611da3565b60056020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61022a610225366004611e07565b610650565b005b34801561023857600080fd5b506102607f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161020e565b61022a610286366004611eca565b61085b565b61022a610299366004612087565b6108f6565b3480156102aa57600080fd5b506102c06000805160206129da83398151915281565b60405190815260200161020e565b61022a6102dc36600461212e565b610c0c565b3480156102ed57600080fd5b5061022a6102fc3660046121be565b610c38565b34801561030d57600080fd5b5060005461031e9063ffffffff1681565b60405163ffffffff909116815260200161020e565b34801561033f57600080fd5b5061022a61034e366004612265565b610d18565b34801561035f57600080fd5b5061020261036e366004611da3565b610fc8565b34801561037f57600080fd5b5061039361038e366004611da3565b611046565b60405161020e91906123e8565b3480156103ac57600080fd5b506102606103bb3660046123fb565b6110e0565b3480156103cc57600080fd5b506102026103db366004611da3565b60066020526000908152604090205460ff1681565b3480156103fc57600080fd5b5061022a61040b3660046121be565b611118565b34801561041c57600080fd5b506102c061042b36600461241d565b611166565b34801561043c57600080fd5b5060035461031e9063ffffffff1681565b34801561045957600080fd5b5061046d610468366004612452565b611333565b60405161020e9190612493565b34801561048657600080fd5b5060035463ffffffff166000908152600260205260409020546102c0565b3480156104b057600080fd5b506102c06104bf366004611da3565b60026020526000908152604090205481565b3480156104dd57600080fd5b506102c06104ec366004611da3565b60096020526000908152604090205481565b61022a61050c3660046124d9565b6113f8565b34801561051d57600080fd5b5061031e601e81565b34801561053257600080fd5b50610202610541366004611da3565b60009081526005602052604090205460ff1690565b34801561056257600080fd5b506102c0610571366004611da3565b611563565b34801561058257600080fd5b506102c07f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b3480156105b657600080fd5b506102607f000000000000000000000000000000000000000000000000000000000000000081565b3480156105ea57600080fd5b506102c06105f9366004611da3565b60016020526000908152604090205481565b34801561061757600080fd5b50600854610260906001600160a01b031681565b34801561063757600080fd5b5060035461031e90640100000000900463ffffffff1681565b8683146106b35760405162461bcd60e51b815260206004820152602660248201527f636f6d6d69746d656e747320616e642076616c756573206c656e677468206d696044820152650e6dac2e8c6d60d31b60648201526084015b60405180910390fd5b8681146107135760405162461bcd60e51b815260206004820152602860248201527f636f6d6d69746d656e747320616e64206d65746164617461206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016106aa565b86851461077c5760405162461bcd60e51b815260206004820152603160248201527f636f6d6d69746d656e747320616e642076616c69646174696f6e4d6f64756c656044820152700e640d8cadccee8d040dad2e6dac2e8c6d607b1b60648201526084016106aa565b60005b878110156108505761083e89898381811061079c5761079c612524565b905060200201358888848181106107b5576107b5612524565b90506020028101906107c7919061253a565b8888868181106107d9576107d9612524565b905060200201358787878181106107f2576107f2612524565b90506020028101906108049190612583565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c0c92505050565b80610848816125df565b91505061077f565b505050505050505050565b6108668483836113f8565b6008546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156108bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e191906125f8565b50505060009182526009602052604090912055565b6108fe611b86565b60008381526005602052604090205460ff161561095d5760405162461bcd60e51b815260206004820152601f60248201527f546865206e6f746520686173206265656e20616c7265616479207370656e740060448201526064016106aa565b61096684610fc8565b6109b25760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742066696e6420796f7572206d65726b6c6520726f6f740000000060448201526064016106aa565b6040805160c081018252858152602081018590526001600160a01b03848116828401526000606083018190526080830181905260a0830152915163695ef6f960e01b81527f00000000000000000000000000000000000000000000000000000000000000009092169163695ef6f991610a309189919060040161261a565b6020604051808303816000875af1158015610a4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7391906125f8565b610ab85760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2103bb4ba34323930bb90383937b7b360511b60448201526064016106aa565b60005b600087815260076020526040902054811015610b9d576000878152600760205260409020805482908110610af157610af1612524565b60009182526020909120015482516001600160a01b039091169063c16e50ef90849084908110610b2357610b23612524565b60200260200101516040518263ffffffff1660e01b8152600401610b4791906123e8565b6020604051808303816000875af1158015610b66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8a91906125f8565b5080610b95816125df565b915050610abb565b50600083815260056020908152604091829020805460ff1916600117905581516001600160a01b03851681529081018590527f9ebe94a87e9d85fb44a2b38b11c3b10117eba3fbd045c54a8577bc62540d5d75910160405180910390a1610c046001600455565b505050505050565b6000858152600a60205260409020610c2482826126e0565b50610c318583868661085b565b5050505050565b610c828888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250899150889050610299878961279f565b6000888152600960205260409081902054600854915163a9059cbb60e01b81526001600160a01b038681166004830152602482018390529192919091169063a9059cbb906044016020604051808303816000875af1158015610ce8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0c91906125f8565b50505050505050505050565b8a8914610d765760405162461bcd60e51b815260206004820152602660248201527f636f6d6d69746d656e747320616e642070726f6f6673206c656e677468206d696044820152650e6dac2e8c6d60d31b60648201526084016106aa565b8a8714610dd35760405162461bcd60e51b815260206004820152602560248201527f636f6d6d69746d656e747320616e6420726f6f7473206c656e677468206d69736044820152640dac2e8c6d60db1b60648201526084016106aa565b8a8514610e3a5760405162461bcd60e51b815260206004820152602f60248201527f636f6d6d69746d656e747320616e64206e756c6c69666965724861736865732060448201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b60648201526084016106aa565b8a8314610e955760405162461bcd60e51b815260206004820152602360248201527f636f6d6d69746d656e747320616e6420746f73206c656e677468206d69736d616044820152620e8c6d60eb1b60648201526084016106aa565b8a8114610efc5760405162461bcd60e51b815260206004820152602f60248201527f636f6d6d69746d656e747320616e642076616c69646174696f6e73417267732060448201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b60648201526084016106aa565b60005b8b811015610fb957610fa78d8d83818110610f1c57610f1c612524565b905060200201358c8c84818110610f3557610f35612524565b9050602002810190610f479190612583565b8c8c86818110610f5957610f59612524565b905060200201358b8b87818110610f7257610f72612524565b905060200201358a8a88818110610f8b57610f8b612524565b9050602002016020810190610fa091906127ac565b8989611118565b80610fb1816125df565b915050610eff565b50505050505050505050505050565b6000818103610fd957506000919050565b60035463ffffffff16805b63ffffffff8116600090815260026020526040902054840361100a575060019392505050565b8063ffffffff1660000361101c5750601e5b80611026816127c9565b9150508163ffffffff168163ffffffff1603610fe4575060009392505050565b600a602052600090815260409020805461105f90612660565b80601f016020809104026020016040519081016040528092919081815260200182805461108b90612660565b80156110d85780601f106110ad576101008083540402835291602001916110d8565b820191906000526020600020905b8154815290600101906020018083116110bb57829003601f168201915b505050505081565b600760205281600052604060002081815481106110fc57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6111288888888888888888610c38565b604051600181527f3b0a8ddef325df2bfdfa6b430ae4c8421841cd135bfa8fb5e432f200787520bb9060200160405180910390a15050505050505050565b60006000805160206129da83398151915283106111c55760405162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c6460448201526064016106aa565b6000805160206129da833981519152821061122c5760405162461bcd60e51b815260206004820152602160248201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c6044820152601960fa1b60648201526084016106aa565b60405163f47d33b560e01b81526004810184905260006024820181905284916001600160a01b0387169063f47d33b5906044016040805180830381865afa15801561127b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129f91906127e9565b90925090506000805160206129da83398151915284830860405163f47d33b560e01b815260048101829052602481018390529092506001600160a01b0387169063f47d33b5906044016040805180830381865afa158015611304573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132891906127e9565b509695505050505050565b6060816001600160401b0381111561134d5761134d611f1c565b604051908082528060200260200182016040528015611376578160200160208202803683370190505b50905060005b828110156113f1576113b584848381811061139957611399612524565b9050602002013560009081526005602052604090205460ff1690565b156113df5760018282815181106113ce576113ce612524565b911515602092830291909101909101525b806113e9816125df565b91505061137c565b5092915050565b611400611b86565b60008381526006602052604090205460ff16156114695760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b60648201526084016106aa565b600061147484611bb0565b6000858152600660205260408120805460ff191660011790559091505b828110156115125760008581526007602052604090208484838181106114b9576114b9612524565b90506020020160208101906114ce91906127ac565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b039092169190911790558061150a816125df565b915050611491565b506040805163ffffffff8316815242602082015285917fee825d3f4d0fa209d8e2a39afe24a21286d8dc103d63061a2ed322db4ce018e3910160405180910390a25061155e6001600455565b505050565b60008160000361159457507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b816001036115c357507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b816002036115f257507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b8160030361162157507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b8160040361165057507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b8160050361167f57507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b816006036116ae57507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b816007036116dd57507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b8160080361170c57507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b8160090361173a57507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a0361176957507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b0361179857507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c036117c757507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d036117f657507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e0361182557507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f0361185457507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b8160100361188357507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b816011036118b257507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b816012036118e157507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b8160130361191057507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b8160140361193f57507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b8160150361196e57507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b8160160361199d57507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b816017036119cc57507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b816018036119fb57507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b81601903611a2a57507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a03611a5957507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b03611a8857507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c03611ab657507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d03611ae557507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e03611b1457507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f03611b4357507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b60448201526064016106aa565b919050565b600260045403611ba957604051633ee5aeb560e01b815260040160405180910390fd5b6002600455565b60035460008054909163ffffffff640100000000909104811691611bd691166002612936565b63ffffffff168163ffffffff1603611c495760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b60648201526084016106aa565b8083600080805b60005463ffffffff9081169082161015611d1557611c6f600286612953565b63ffffffff16600003611cad57839250611c8e8163ffffffff16611563565b63ffffffff821660009081526001602052604090208590559150611cc9565b63ffffffff811660009081526001602052604090205492508391505b611cf47f00000000000000000000000000000000000000000000000000000000000000008484611166565b9350611d01600286612976565b945080611d0d81612999565b915050611c50565b50600354600090601e90611d309063ffffffff1660016129bc565b611d3a9190612953565b6003805463ffffffff191663ffffffff831690811790915560009081526002602052604090208590559050611d708660016129bc565b6003805463ffffffff929092166401000000000267ffffffff000000001990921691909117905550939695505050505050565b600060208284031215611db557600080fd5b5035919050565b60008083601f840112611dce57600080fd5b5081356001600160401b03811115611de557600080fd5b6020830191508360208260051b8501011115611e0057600080fd5b9250929050565b6000806000806000806000806080898b031215611e2357600080fd5b88356001600160401b0380821115611e3a57600080fd5b611e468c838d01611dbc565b909a50985060208b0135915080821115611e5f57600080fd5b611e6b8c838d01611dbc565b909850965060408b0135915080821115611e8457600080fd5b611e908c838d01611dbc565b909650945060608b0135915080821115611ea957600080fd5b50611eb68b828c01611dbc565b999c989b5096995094979396929594505050565b60008060008060608587031215611ee057600080fd5b843593506020850135925060408501356001600160401b03811115611f0457600080fd5b611f1087828801611dbc565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611f5a57611f5a611f1c565b604052919050565b60006001600160401b03831115611f7b57611f7b611f1c565b611f8e601f8401601f1916602001611f32565b9050828152838383011115611fa257600080fd5b828260208301376000602084830101529392505050565b600082601f830112611fca57600080fd5b611fd983833560208501611f62565b9392505050565b6001600160a01b0381168114611ff557600080fd5b50565b8035611b8181611fe0565b60006001600160401b038084111561201d5761201d611f1c565b8360051b602061202e818301611f32565b8681529350908401908084018783111561204757600080fd5b855b8381101561207b578035858111156120615760008081fd5b61206d8a828a01611fb9565b835250908201908201612049565b50505050509392505050565b60008060008060008060c087890312156120a057600080fd5b8635955060208701356001600160401b03808211156120be57600080fd5b6120ca8a838b01611fb9565b96506040890135955060608901359450608089013591506120ea82611fe0565b90925060a0880135908082111561210057600080fd5b508701601f8101891361211257600080fd5b61212189823560208401612003565b9150509295509295509295565b60008060008060006080868803121561214657600080fd5b8535945060208601356001600160401b038082111561216457600080fd5b61217089838a01611dbc565b909650945060408801359350606088013591508082111561219057600080fd5b508601601f810188136121a257600080fd5b6121b188823560208401611f62565b9150509295509295909350565b60008060008060008060008060c0898b0312156121da57600080fd5b8835975060208901356001600160401b03808211156121f857600080fd5b818b0191508b601f83011261220c57600080fd5b81358181111561221b57600080fd5b8c602082850101111561222d57600080fd5b602083019950975060408b0135965060608b0135955061224f60808c01611ff8565b945060a08b0135915080821115611ea957600080fd5b60008060008060008060008060008060008060c08d8f03121561228757600080fd5b6001600160401b038d35111561229c57600080fd5b6122a98e8e358f01611dbc565b909c509a506001600160401b0360208e013511156122c657600080fd5b6122d68e60208f01358f01611dbc565b909a5098506001600160401b0360408e013511156122f357600080fd5b6123038e60408f01358f01611dbc565b90985096506001600160401b0360608e0135111561232057600080fd5b6123308e60608f01358f01611dbc565b90965094506001600160401b0360808e0135111561234d57600080fd5b61235d8e60808f01358f01611dbc565b90945092506001600160401b0360a08e0135111561237a57600080fd5b61238a8e60a08f01358f01611dbc565b81935080925050509295989b509295989b509295989b565b6000815180845260005b818110156123c8576020818501810151868301820152016123ac565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611fd960208301846123a2565b6000806040838503121561240e57600080fd5b50508035926020909101359150565b60008060006060848603121561243257600080fd5b833561243d81611fe0565b95602085013595506040909401359392505050565b6000806020838503121561246557600080fd5b82356001600160401b0381111561247b57600080fd5b61248785828601611dbc565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156124cd5783511515835292840192918401916001016124af565b50909695505050505050565b6000806000604084860312156124ee57600080fd5b8335925060208401356001600160401b0381111561250b57600080fd5b61251786828701611dbc565b9497909650939450505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261255157600080fd5b8301803591506001600160401b0382111561256b57600080fd5b6020019150600581901b3603821315611e0057600080fd5b6000808335601e1984360301811261259a57600080fd5b8301803591506001600160401b038211156125b457600080fd5b602001915036819003821315611e0057600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016125f1576125f16125c9565b5060010190565b60006020828403121561260a57600080fd5b81518015158114611fd957600080fd5b60e08152600061262d60e08301856123a2565b905060208083018460005b600681101561265557815183529183019190830190600101612638565b505050509392505050565b600181811c9082168061267457607f821691505b60208210810361269457634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561155e57600081815260208120601f850160051c810160208610156126c15750805b601f850160051c820191505b81811015610c04578281556001016126cd565b81516001600160401b038111156126f9576126f9611f1c565b61270d816127078454612660565b8461269a565b602080601f831160018114612742576000841561272a5750858301515b600019600386901b1c1916600185901b178555610c04565b600085815260208120601f198616915b8281101561277157888601518255948401946001909101908401612752565b508582101561278f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000611fd9368484612003565b6000602082840312156127be57600080fd5b8135611fd981611fe0565b600063ffffffff8216806127df576127df6125c9565b6000190192915050565b600080604083850312156127fc57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601260045260246000fd5b600181815b80851115612860578163ffffffff04821115612846576128466125c9565b8085161561285357918102915b93841c9390800290612828565b509250929050565b60008261287757506001612930565b8161288457506000612930565b816001811461289a57600281146128a4576128d5565b6001915050612930565b60ff8411156128b5576128b56125c9565b6001841b915063ffffffff8211156128cf576128cf6125c9565b50612930565b5060208310610133831016604e8410600b841016171561290c575081810a63ffffffff811115612907576129076125c9565b612930565b6129168383612823565b8063ffffffff0482111561292c5761292c6125c9565b0290505b92915050565b600063ffffffff61294b818516828516612868565b949350505050565b600063ffffffff8084168061296a5761296a61280d565b92169190910692915050565b600063ffffffff8084168061298d5761298d61280d565b92169190910492915050565b600063ffffffff8083168181036129b2576129b26125c9565b6001019392505050565b63ffffffff8181168382160190808211156113f1576113f16125c956fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a26469706673582212208fa31c3b584a6b6cad7dc912b1fe78680d4d741a8246d7a7b413a995adb46a6764736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "consumeCode(bytes32,bytes,bytes32,bytes32,address,bytes[])": {
        "details": "Consume a code from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all codes in the contract - hash of unique codes nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)"
      },
      "getLastRoot()": {
        "details": "Returns the last root"
      },
      "hashLeftRight(address,bytes32,bytes32)": {
        "details": "Hash 2 tree leaves, returns MiMC(_left, _right)"
      },
      "isKnownRoot(bytes32)": {
        "details": "Whether the root is present in the root history"
      },
      "isSpent(bytes32)": {
        "details": "whether a note is already spent "
      },
      "isSpentArray(bytes32[])": {
        "details": "whether an array of notes is already spent "
      },
      "setCode(bytes32,address[])": {
        "details": "Set new code.",
        "params": {
          "_commitment": "the note commitment, which is PedersenHash(nullifier + secret)"
        }
      },
      "zeros(uint256)": {
        "details": "provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6722,
        "contract": "contracts/useCases/GiftCards.sol:GiftCards",
        "label": "levels",
        "offset": 0,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 6726,
        "contract": "contracts/useCases/GiftCards.sol:GiftCards",
        "label": "filledSubtrees",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 6730,
        "contract": "contracts/useCases/GiftCards.sol:GiftCards",
        "label": "roots",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 6736,
        "contract": "contracts/useCases/GiftCards.sol:GiftCards",
        "label": "currentRootIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 6739,
        "contract": "contracts/useCases/GiftCards.sol:GiftCards",
        "label": "nextIndex",
        "offset": 4,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 4085,
        "contract": "contracts/useCases/GiftCards.sol:GiftCards",
        "label": "_status",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5938,
        "contract": "contracts/useCases/GiftCards.sol:GiftCards",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 5942,
        "contract": "contracts/useCases/GiftCards.sol:GiftCards",
        "label": "commitments",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 5947,
        "contract": "contracts/useCases/GiftCards.sol:GiftCards",
        "label": "validationModules",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 6357,
        "contract": "contracts/useCases/GiftCards.sol:GiftCards",
        "label": "token",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC20)3330"
      },
      {
        "astId": 6361,
        "contract": "contracts/useCases/GiftCards.sol:GiftCards",
        "label": "TransferValues",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 8346,
        "contract": "contracts/useCases/GiftCards.sol:GiftCards",
        "label": "metadata",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)3330": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}