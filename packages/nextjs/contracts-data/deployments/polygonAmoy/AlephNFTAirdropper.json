{
  "address": "0xCde5efC031eb791ba9464D49F12B851feaA8106e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVerifier",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "contract IHasher",
          "name": "_hasher",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_merkleTreeHeight",
          "type": "uint32"
        },
        {
          "internalType": "contract IERC721",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nullifierHash",
          "type": "bytes32"
        }
      ],
      "name": "ConsumeCode",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "leafIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewCode",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "Success",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FIELD_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_HISTORY_SIZE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "TransferId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZERO_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_commitments",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_proofs",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_roots",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_nullifierHashes",
          "type": "bytes32[]"
        },
        {
          "internalType": "address payable[]",
          "name": "_tos",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_validationsArgs",
          "type": "bytes[]"
        }
      ],
      "name": "bulkConsumeAlephNFTAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_commitments",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[][]",
          "name": "_validationModules",
          "type": "address[][]"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_limits",
          "type": "uint256[]"
        }
      ],
      "name": "bulkCreateAlephNFTAirdrop",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "_validationsArgs",
          "type": "bytes[]"
        }
      ],
      "name": "consumeAlephNFTAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "_validationsArgs",
          "type": "bytes[]"
        }
      ],
      "name": "consumeCode",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "_validationsArgs",
          "type": "bytes[]"
        }
      ],
      "name": "consumeTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "consumed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_validationModules",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "createAlephNFTAirdrop",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_validationModules",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "createTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRootIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "filledSubtrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHasher",
          "name": "_hasher",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_left",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_right",
          "type": "bytes32"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasher",
      "outputs": [
        {
          "internalType": "contract IHasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "isKnownRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        }
      ],
      "name": "isSpent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_nullifierHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "isSpentArray",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "spent",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levels",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "limits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nullifierHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_validationModules",
          "type": "address[]"
        }
      ],
      "name": "setCode",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "validationModules",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "zeros",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x719ea9debd8aac396aeb64f8eef25d7b13a9ce1cc939629f50ac9770b7c08868",
  "receipt": {
    "to": null,
    "from": "0xEB71ed911e4dFc35Da80103a72fE983C8c709F33",
    "contractAddress": "0xCde5efC031eb791ba9464D49F12B851feaA8106e",
    "transactionIndex": 0,
    "gasUsed": "2801444",
    "logsBloom": "0x
    "blockHash": "0x107307a8f1d6c91e23150daafc292ab51b0be40242419dd44fe67acb45451c3d",
    "transactionHash": "0x719ea9debd8aac396aeb64f8eef25d7b13a9ce1cc939629f50ac9770b7c08868",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11132169,
        "transactionHash": "0x719ea9debd8aac396aeb64f8eef25d7b13a9ce1cc939629f50ac9770b7c08868",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000eb71ed911e4dfc35da80103a72fe983c8c709f33",
          "0x000000000000000000000000915a2284d28bd93de7d6f31173b981204bb666e6"
        ],
        "data": "0x000000000000000000000000000000000000000000000000013488da4ca7d8dc0000000000000000000000000000000000000000000000003faf4f6820798aca00000000000000000000000000000000000000000000035ecaf30d9d61714b210000000000000000000000000000000000000000000000003e7ac68dd3d1b1ee00000000000000000000000000000000000000000000035ecc279677ae1923fd",
        "logIndex": 0,
        "blockHash": "0x107307a8f1d6c91e23150daafc292ab51b0be40242419dd44fe67acb45451c3d"
      }
    ],
    "blockNumber": 11132169,
    "cumulativeGasUsed": "2801444",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc782633444a32856398073d11Ec3492800A60416",
    "0x0138E00E54e7C8239812961c56BBCf55ef8632d7",
    20,
    "0xB0DaC85973c52bE661212eEd83EdF363bF402541"
  ],
  "numDeployments": 1,
  "solcInputHash": "d5ed978f64676cd0cbe14cfd7551e661",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"contract IHasher\",\"name\":\"_hasher\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_merkleTreeHeight\",\"type\":\"uint32\"},{\"internalType\":\"contract IERC721\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nullifierHash\",\"type\":\"bytes32\"}],\"name\":\"ConsumeCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"leafIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"Success\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIELD_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_HISTORY_SIZE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"TransferId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_commitments\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_proofs\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_roots\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_nullifierHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"address payable[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_validationsArgs\",\"type\":\"bytes[]\"}],\"name\":\"bulkConsumeAlephNFTAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_commitments\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[][]\",\"name\":\"_validationModules\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_limits\",\"type\":\"uint256[]\"}],\"name\":\"bulkCreateAlephNFTAirdrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_validationsArgs\",\"type\":\"bytes[]\"}],\"name\":\"consumeAlephNFTAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_validationsArgs\",\"type\":\"bytes[]\"}],\"name\":\"consumeCode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_validationsArgs\",\"type\":\"bytes[]\"}],\"name\":\"consumeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"consumed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_validationModules\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"createAlephNFTAirdrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_validationModules\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"createTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRootIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"filledSubtrees\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHasher\",\"name\":\"_hasher\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_right\",\"type\":\"bytes32\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasher\",\"outputs\":[{\"internalType\":\"contract IHasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"isKnownRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"}],\"name\":\"isSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_nullifierHashes\",\"type\":\"bytes32[]\"}],\"name\":\"isSpentArray\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"spent\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levels\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"limits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nullifierHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_validationModules\",\"type\":\"address[]\"}],\"name\":\"setCode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validationModules\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"zeros\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"consumeCode(bytes32,bytes,bytes32,bytes32,address,bytes[])\":{\"details\":\"Consume a code from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all codes in the contract - hash of unique codes nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)\"},\"getLastRoot()\":{\"details\":\"Returns the last root\"},\"hashLeftRight(address,bytes32,bytes32)\":{\"details\":\"Hash 2 tree leaves, returns MiMC(_left, _right)\"},\"isKnownRoot(bytes32)\":{\"details\":\"Whether the root is present in the root history\"},\"isSpent(bytes32)\":{\"details\":\"whether a note is already spent \"},\"isSpentArray(bytes32[])\":{\"details\":\"whether an array of notes is already spent \"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"},\"setCode(bytes32,address[])\":{\"details\":\"Set new code.\",\"params\":{\"_commitment\":\"the note commitment, which is PedersenHash(nullifier + secret)\"}},\"zeros(uint256)\":{\"details\":\"provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/useCases/AlephNFTAirdropper.sol\":\"AlephNFTAirdropper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/CommitProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./helpers/MerkleTreeWithHistory.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./modules/IValidationModule.sol\\\";\\n\\ninterface IVerifier {\\n  function verifyProof(bytes memory _proof, uint256[6] memory _input) external returns (bool);\\n}\\n\\ncontract CommitProtocol is MerkleTreeWithHistory, ReentrancyGuard {\\n  IVerifier public immutable verifier;\\n \\n  mapping(bytes32 => bool) public nullifierHashes;\\n  // we store all commitments just to prevent accidental creations with the same commitment\\n  mapping(bytes32 => bool) public commitments;\\n\\n  // commitments to validation modules \\n  mapping(bytes32 => address[]) public validationModules;\\n\\n  event NewCode(bytes32 indexed commitment, uint32 leafIndex, uint256 timestamp);\\n  event ConsumeCode(address to, bytes32 nullifierHash);\\n\\n  /**\\n    @dev The constructor\\n    @param _verifier the address of SNARK verifier for this contract\\n    @param _hasher the address of MiMC hash contract\\n    @param _merkleTreeHeight the height of codes' Merkle Tree\\n  */\\n  constructor(\\n    IVerifier _verifier,\\n    IHasher _hasher,\\n    uint32 _merkleTreeHeight\\n  ) MerkleTreeWithHistory(_merkleTreeHeight, _hasher) {\\n    verifier = _verifier;\\n  }\\n\\n  /**\\n    @dev Set new code.\\n    @param _commitment the note commitment, which is PedersenHash(nullifier + secret)\\n  */\\n  function setCode(bytes32 _commitment, address[] calldata _validationModules) public virtual payable nonReentrant {\\n    require(!commitments[_commitment], \\\"The commitment has been submitted\\\");\\n\\n    uint32 insertedIndex = _insert(_commitment);\\n    commitments[_commitment] = true;\\n\\n    for (uint256 i = 0; i < _validationModules.length; i++) {\\n      validationModules[_commitment].push(_validationModules[i]);\\n    }\\n\\n    emit NewCode(_commitment, insertedIndex, block.timestamp);\\n  }\\n\\n\\n  /**\\n    @dev Consume a code from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs\\n    `input` array consists of:\\n      - merkle root of all codes in the contract\\n      - hash of unique codes nullifier to prevent double spends\\n      - the recipient of funds\\n      - optional fee that goes to the transaction sender (usually a relay)\\n  */\\n  function consumeCode(\\n    bytes32 _commitment,\\n    bytes calldata _proof,\\n    bytes32 _root,\\n    bytes32 _nullifierHash,\\n    address payable _recipient,\\n    bytes[] calldata _validationsArgs\\n  ) public virtual payable nonReentrant {\\n    require(!nullifierHashes[_nullifierHash], \\\"The note has been already spent\\\");\\n    require(isKnownRoot(_root), \\\"Cannot find your merkle root\\\"); // Make sure to use a recent one\\n    \\n    require(\\n      verifier.verifyProof(\\n        _proof,\\n        [uint256(_root), uint256(_nullifierHash), uint256(uint160(address(_recipient))),0 ,0, 0]\\n      ),\\n      \\\"Invalid withdraw proof\\\"\\n    );\\n\\n    for (uint256 i = 0; i < validationModules[_commitment].length; i++) {\\n      IValidationModule(validationModules[_commitment][i]).validate(_validationsArgs[i]);\\n    }\\n\\n    nullifierHashes[_nullifierHash] = true;\\n\\n    emit ConsumeCode(_recipient, _nullifierHash);\\n  }\\n\\n  /** @dev whether a note is already spent */\\n  function isSpent(bytes32 _nullifierHash) public view returns (bool) {\\n    return nullifierHashes[_nullifierHash];\\n  }\\n\\n  /** @dev whether an array of notes is already spent */\\n  function isSpentArray(bytes32[] calldata _nullifierHashes) external view returns (bool[] memory spent) {\\n    spent = new bool[](_nullifierHashes.length);\\n    for (uint256 i = 0; i < _nullifierHashes.length; i++) {\\n      if (isSpent(_nullifierHashes[i])) {\\n        spent[i] = true;\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xa5eab5e93ff380d97240111149e0e19b19e24ecdd852c0afb0689d15f3bb5478\",\"license\":\"MIT\"},\"contracts/ERC721Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./CommitProtocol.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ncontract ERC721Transfer is CommitProtocol {\\n  IERC721 public token;\\n\\n  mapping(bytes32 => uint256) public TransferId;\\n\\n   constructor(\\n    IVerifier _verifier,\\n    IHasher _hasher,\\n    uint32 _merkleTreeHeight,\\n    IERC721 _token\\n  ) CommitProtocol(_verifier, _hasher, _merkleTreeHeight) {\\n    token = _token;\\n  }\\n\\n  function createTransfer(bytes32 _commitment, address[] calldata _validationModules, uint256 _id) public payable {\\n    super.setCode(_commitment, _validationModules);\\n\\n    token.safeTransferFrom(msg.sender, address(this), _id);\\n\\n    TransferId[_commitment] = _id;\\n  }\\n\\n  function consumeTransfer(\\n  bytes32 _commitment,\\n    bytes calldata _proof,\\n    bytes32 _root,\\n    bytes32 _nullifierHash,\\n    address payable _to,\\n    bytes[] calldata _validationsArgs\\n  ) public {\\n    super.consumeCode(_commitment,_proof, _root, _nullifierHash, _to, _validationsArgs);\\n\\n    uint256 id = TransferId[_commitment];\\n\\n    token.safeTransferFrom(address(this), _to, id);\\n  }\\n \\n}\",\"keccak256\":\"0x8f8823c071540afe6d4c848d8ccde61aac4cd466e649ed07f325a90a87a1dfa8\",\"license\":\"MIT\"},\"contracts/helpers/MerkleTreeWithHistory.sol\":{\"content\":\"// https://tornado.cash\\n/*\\n * d888888P                                           dP              a88888b.                   dP\\n *    88                                              88             d8'   `88                   88\\n *    88    .d8888b. 88d888b. 88d888b. .d8888b. .d888b88 .d8888b.    88        .d8888b. .d8888b. 88d888b.\\n *    88    88'  `88 88'  `88 88'  `88 88'  `88 88'  `88 88'  `88    88        88'  `88 Y8ooooo. 88'  `88\\n *    88    88.  .88 88       88    88 88.  .88 88.  .88 88.  .88 dP Y8.   .88 88.  .88       88 88    88\\n *    dP    `88888P' dP       dP    dP `88888P8 `88888P8 `88888P' 88  Y88888P' `88888P8 `88888P' dP    dP\\n * ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IHasher {\\n  function MiMCSponge(uint256 in_xL, uint256 in_xR) external pure returns (uint256 xL, uint256 xR);\\n}\\n\\ncontract MerkleTreeWithHistory {\\n  uint256 public constant FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n  uint256 public constant ZERO_VALUE = 21663839004416932945382355908790599225266501822907911457504978515578255421292; // = keccak256(\\\"tornado\\\") % FIELD_SIZE\\n  IHasher public immutable hasher;\\n\\n  uint32 public levels;\\n\\n  // the following variables are made public for easier testing and debugging and\\n  // are not supposed to be accessed in regular code\\n\\n  // filledSubtrees and roots could be bytes32[size], but using mappings makes it cheaper because\\n  // it removes index range check on every interaction\\n  mapping(uint256 => bytes32) public filledSubtrees;\\n  mapping(uint256 => bytes32) public roots;\\n  uint32 public constant ROOT_HISTORY_SIZE = 30;\\n  uint32 public currentRootIndex = 0;\\n  uint32 public nextIndex = 0;\\n\\n  constructor(uint32 _levels, IHasher _hasher) {\\n    require(_levels > 0, \\\"_levels should be greater than zero\\\");\\n    require(_levels < 32, \\\"_levels should be less than 32\\\");\\n    levels = _levels;\\n    hasher = _hasher;\\n\\n    for (uint32 i = 0; i < _levels; i++) {\\n      filledSubtrees[i] = zeros(i);\\n    }\\n\\n    roots[0] = zeros(_levels - 1);\\n  }\\n\\n  /**\\n    @dev Hash 2 tree leaves, returns MiMC(_left, _right)\\n  */\\n  function hashLeftRight(\\n    IHasher _hasher,\\n    bytes32 _left,\\n    bytes32 _right\\n  ) public pure returns (bytes32) {\\n    require(uint256(_left) < FIELD_SIZE, \\\"_left should be inside the field\\\");\\n    require(uint256(_right) < FIELD_SIZE, \\\"_right should be inside the field\\\");\\n    uint256 R = uint256(_left);\\n    uint256 C = 0;\\n    (R, C) = _hasher.MiMCSponge(R, C);\\n    R = addmod(R, uint256(_right), FIELD_SIZE);\\n    (R, C) = _hasher.MiMCSponge(R, C);\\n    return bytes32(R);\\n  }\\n\\n  function _insert(bytes32 _leaf) internal returns (uint32 index) {\\n    uint32 _nextIndex = nextIndex;\\n    require(_nextIndex != uint32(2)**levels, \\\"Merkle tree is full. No more leaves can be added\\\");\\n    uint32 currentIndex = _nextIndex;\\n    bytes32 currentLevelHash = _leaf;\\n    bytes32 left;\\n    bytes32 right;\\n\\n    for (uint32 i = 0; i < levels; i++) {\\n      if (currentIndex % 2 == 0) {\\n        left = currentLevelHash;\\n        right = zeros(i);\\n        filledSubtrees[i] = currentLevelHash;\\n      } else {\\n        left = filledSubtrees[i];\\n        right = currentLevelHash;\\n      }\\n      currentLevelHash = hashLeftRight(hasher, left, right);\\n      currentIndex /= 2;\\n    }\\n\\n    uint32 newRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\\n    currentRootIndex = newRootIndex;\\n    roots[newRootIndex] = currentLevelHash;\\n    nextIndex = _nextIndex + 1;\\n    return _nextIndex;\\n  }\\n\\n  /**\\n    @dev Whether the root is present in the root history\\n  */\\n  function isKnownRoot(bytes32 _root) public view returns (bool) {\\n    if (_root == 0) {\\n      return false;\\n    }\\n    uint32 _currentRootIndex = currentRootIndex;\\n    uint32 i = _currentRootIndex;\\n    do {\\n      if (_root == roots[i]) {\\n        return true;\\n      }\\n      if (i == 0) {\\n        i = ROOT_HISTORY_SIZE;\\n      }\\n      i--;\\n    } while (i != _currentRootIndex);\\n    return false;\\n  }\\n\\n  /**\\n    @dev Returns the last root\\n  */\\n  function getLastRoot() public view returns (bytes32) {\\n    return roots[currentRootIndex];\\n  }\\n\\n  /// @dev provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\\n  function zeros(uint256 i) public pure returns (bytes32) {\\n    if (i == 0) return bytes32(0x2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c);\\n    else if (i == 1) return bytes32(0x256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d);\\n    else if (i == 2) return bytes32(0x1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200);\\n    else if (i == 3) return bytes32(0x20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb);\\n    else if (i == 4) return bytes32(0x0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9);\\n    else if (i == 5) return bytes32(0x24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959);\\n    else if (i == 6) return bytes32(0x1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c);\\n    else if (i == 7) return bytes32(0x19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4);\\n    else if (i == 8) return bytes32(0x261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80);\\n    else if (i == 9) return bytes32(0x0058459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007);\\n    else if (i == 10) return bytes32(0x1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30);\\n    else if (i == 11) return bytes32(0x1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5);\\n    else if (i == 12) return bytes32(0x0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f);\\n    else if (i == 13) return bytes32(0x1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd);\\n    else if (i == 14) return bytes32(0x133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108);\\n    else if (i == 15) return bytes32(0x13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6);\\n    else if (i == 16) return bytes32(0x1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854);\\n    else if (i == 17) return bytes32(0x0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea);\\n    else if (i == 18) return bytes32(0x24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d);\\n    else if (i == 19) return bytes32(0x198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05);\\n    else if (i == 20) return bytes32(0x29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4);\\n    else if (i == 21) return bytes32(0x19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967);\\n    else if (i == 22) return bytes32(0x1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453);\\n    else if (i == 23) return bytes32(0x10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48);\\n    else if (i == 24) return bytes32(0x0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1);\\n    else if (i == 25) return bytes32(0x019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c);\\n    else if (i == 26) return bytes32(0x2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99);\\n    else if (i == 27) return bytes32(0x2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354);\\n    else if (i == 28) return bytes32(0x002df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d);\\n    else if (i == 29) return bytes32(0x104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427);\\n    else if (i == 30) return bytes32(0x1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb);\\n    else if (i == 31) return bytes32(0x2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc);\\n    else revert(\\\"Index out of bounds\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x7ca5c42171d3a80191c56b126a47f86093075bece4fa96eace305f8ee3d4f6ae\",\"license\":\"MIT\"},\"contracts/modules/IValidationModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IValidationModule {\\n  function validate(bytes calldata arg) external returns (bool);\\n}\",\"keccak256\":\"0xbce3d3ab208ca1c7fd5e6500f0836c0b99c6dd4b172ebb27bab1a41d2322f94f\",\"license\":\"MIT\"},\"contracts/useCases/AlephNFTAirdropper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../ERC721Transfer.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\ncontract AlephNFTAirdropper is ERC721Transfer, IERC721Receiver {\\n\\n// Map for consumed AlephNFTs per campaign\\n  mapping(bytes32 => uint256) public consumed;\\n// Map for limit amount of AlephNFTs per campaign\\n  mapping(bytes32 => uint256) public limits;\\n\\n  event Success(bool success);\\n\\n  constructor (\\n    IVerifier _verifier,\\n    IHasher _hasher,\\n    uint32 _merkleTreeHeight,\\n    IERC721 _token\\n  ) ERC721Transfer(_verifier, _hasher, _merkleTreeHeight, _token) {  \\n  }\\n\\n  // Implement the onERC721Received function\\n  function onERC721Received(\\n    address operator,\\n    address from,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) external override returns (bytes4) {\\n    return this.onERC721Received.selector;\\n  }\\n\\n  function createAlephNFTAirdrop(bytes32 _commitment, address[] calldata _validationModules, uint256 _id, uint256 limit) public payable  {\\n    limits[_commitment] = limit;\\n    \\n    createTransfer(\\n      _commitment,\\n      _validationModules,\\n      _id\\n    );\\n  }\\n\\n  function consumeAlephNFTAirdrop(\\n    bytes32 _commitment,\\n    bytes calldata _proof,\\n    bytes32 _root,\\n    bytes32 _nullifierHash,\\n    address payable _to,\\n    bytes[] calldata _validationsArgs\\n  ) public  {\\n    require(consumed[_commitment] < limits[_commitment], \\\"AlephNFTAirdropper: Limit reached\\\");\\n\\n    consumed[_commitment] += 1;\\n    consumeTransfer(\\n      _commitment,\\n      _proof,\\n      _root,\\n      _nullifierHash,\\n      _to,\\n      _validationsArgs\\n    );\\n\\n        emit Success(true);\\n\\n  }\\n\\n  function bulkCreateAlephNFTAirdrop(bytes32[] calldata _commitments, address[][] calldata _validationModules, uint256[] calldata _ids, uint256[] calldata _limits) external payable  {\\n    require(_commitments.length == _ids.length, \\\"commitments and ids length mismatch\\\");\\n    require(_commitments.length == _limits.length, \\\"commitments and limits length mismatch\\\");\\n    require(_commitments.length == _validationModules.length, \\\"commitments and validationModules length mismatch\\\");\\n\\n    for (uint256 i = 0; i < _commitments.length; i++) {\\n      createAlephNFTAirdrop(_commitments[i], _validationModules[i], _ids[i], _limits[i]);\\n    }\\n  }\\n\\n  function bulkConsumeAlephNFTAirdrop(\\n    bytes32[] calldata _commitments,\\n    bytes[] calldata _proofs,\\n    bytes32[] calldata _roots,\\n    bytes32[] calldata _nullifierHashes,\\n    address payable[] calldata _tos,\\n    bytes[] calldata _validationsArgs\\n  ) external  {\\n    require(_commitments.length == _proofs.length, \\\"commitments and proofs length mismatch\\\");\\n    require(_commitments.length == _roots.length, \\\"commitments and roots length mismatch\\\");\\n    require(_commitments.length == _nullifierHashes.length, \\\"commitments and nullifierHashes length mismatch\\\");\\n    require(_commitments.length == _tos.length, \\\"commitments and tos length mismatch\\\");\\n    require(_commitments.length == _validationsArgs.length, \\\"commitments and validationsArgs length mismatch\\\");\\n\\n    for (uint256 i = 0; i < _commitments.length; i++) {\\n      consumeAlephNFTAirdrop(_commitments[i], _proofs[i], _roots[i], _nullifierHashes[i], _tos[i], _validationsArgs);\\n    }\\n  }\\n}\",\"keccak256\":\"0xd1fafb9a22584ce799c29b0bb24ac5b04ca32e37d230096fed60dfd099b3e6fb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600380546001600160401b03191690553480156200002157600080fd5b50604051620030a2380380620030a2833981016040819052620000449162000869565b83838383838383808260008263ffffffff1611620000b55760405162461bcd60e51b815260206004820152602360248201527f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60448201526265726f60e81b60648201526084015b60405180910390fd5b60208263ffffffff16106200010d5760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e20333200006044820152606401620000ac565b6000805463ffffffff191663ffffffff84161781556001600160a01b0382166080525b8263ffffffff168163ffffffff16101562000181576200015663ffffffff821662000207565b63ffffffff8216600090815260016020526040902055806200017881620008ef565b91505062000130565b506200019f6200019360018462000915565b63ffffffff1662000207565b6000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b555050600160045550506001600160a01b0390811660a052600880546001600160a01b03191692909116919091179055506200093c95505050505050565b6000816000036200023957507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b816001036200026957507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b816002036200029957507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b81600303620002c957507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b81600403620002f957507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b816005036200032957507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b816006036200035957507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b816007036200038957507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b81600803620003b957507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b81600903620003e857507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a036200041857507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b036200044857507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c036200047857507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d03620004a857507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e03620004d857507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f036200050857507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b816010036200053857507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b816011036200056857507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b816012036200059857507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b81601303620005c857507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b81601403620005f857507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b816015036200062857507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b816016036200065857507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b816017036200068857507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b81601803620006b857507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b81601903620006e857507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a036200071857507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b036200074857507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c036200077757507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d03620007a757507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e03620007d757507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f036200080757507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e6473000000000000000000000000006044820152606401620000ac565b6001600160a01b03811681146200086657600080fd5b50565b600080600080608085870312156200088057600080fd5b84516200088d8162000850565b6020860151909450620008a08162000850565b604086015190935063ffffffff81168114620008bb57600080fd5b6060860151909250620008ce8162000850565b939692955090935050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff8083168181036200090b576200090b620008d9565b6001019392505050565b63ffffffff828116828216039080821115620009355762000935620008d9565b5092915050565b60805160a05161273262000970600039600081816102e101526108c40152600081816106440152611ca501526127326000f3fe6080604052600436106101e35760003560e01c80638ea3099e11610102578063cd87a3b411610095578063ed33639f11610064578063ed33639f14610632578063f178e47c14610666578063fc0c546a14610693578063fc7e9c6f146106b357600080fd5b8063cd87a3b414610599578063e5285dcc146105ae578063e8295588146105de578063ec732959146105fe57600080fd5b8063bffa9872116100d1578063bffa987214610526578063c2b40ae414610546578063c858e25e14610573578063cc013d851461058657600080fd5b80638ea3099e1461049257806390eeb02b146104b25780639fa12d0b146104cf578063ba70f757146104fc57600080fd5b80634648c9431161017a5780637835a0c9116101495780637835a0c91461041c578063838a11fd1461042f578063839df9451461044f5780638c9c15d41461047f57600080fd5b80634648c943146103705780634ecf518b1461039d5780635c1b7d38146103cf5780636d9833e3146103fc57600080fd5b80632b7ac3f3116101b65780632b7ac3f3146102cf5780633e7fd3b41461031b578063414a37ba1461032e5780634488e5951461035057600080fd5b806307233c81146101e8578063150b7a021461020a57806317cc915c146102545780632469ab9214610294575b600080fd5b3480156101f457600080fd5b50610208610203366004611e1e565b6106d8565b005b34801561021657600080fd5b50610236610225366004611ebe565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020015b60405180910390f35b34801561026057600080fd5b5061028461026f366004611f30565b60056020526000908152604090205460ff1681565b604051901515815260200161024b565b3480156102a057600080fd5b506102c16102af366004611f30565b60096020526000908152604090205481565b60405190815260200161024b565b3480156102db57600080fd5b506103037f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161024b565b610208610329366004611e1e565b6107c2565b34801561033a57600080fd5b506102c16000805160206126dd83398151915281565b34801561035c57600080fd5b5061020861036b366004611e1e565b610ae0565b34801561037c57600080fd5b506102c161038b366004611f30565b600a6020526000908152604090205481565b3480156103a957600080fd5b506000546103ba9063ffffffff1681565b60405163ffffffff909116815260200161024b565b3480156103db57600080fd5b506102c16103ea366004611f30565b600b6020526000908152604090205481565b34801561040857600080fd5b50610284610417366004611f30565b610b7a565b61020861042a366004611f49565b610bf8565b34801561043b57600080fd5b5061030361044a366004611f9b565b610c84565b34801561045b57600080fd5b5061028461046a366004611f30565b60066020526000908152604090205460ff1681565b61020861048d366004611fbd565b610cbc565b34801561049e57600080fd5b506102c16104ad36600461201a565b610ce0565b3480156104be57600080fd5b506003546103ba9063ffffffff1681565b3480156104db57600080fd5b506104ef6104ea36600461204f565b610ead565b60405161024b9190612090565b34801561050857600080fd5b5060035463ffffffff166000908152600260205260409020546102c1565b34801561053257600080fd5b506102086105413660046120d6565b610f72565b34801561055257600080fd5b506102c1610561366004611f30565b60026020526000908152604090205481565b610208610581366004612213565b611213565b6102086105943660046122b5565b6113d4565b3480156105a557600080fd5b506103ba601e81565b3480156105ba57600080fd5b506102846105c9366004611f30565b60009081526005602052604090205460ff1690565b3480156105ea57600080fd5b506102c16105f9366004611f30565b61153f565b34801561060a57600080fd5b506102c17f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b34801561063e57600080fd5b506103037f000000000000000000000000000000000000000000000000000000000000000081565b34801561067257600080fd5b506102c1610681366004611f30565b60016020526000908152604090205481565b34801561069f57600080fd5b50600854610303906001600160a01b031681565b3480156106bf57600080fd5b506003546103ba90640100000000900463ffffffff1681565b6000888152600b6020908152604080832054600a909252909120541061074f5760405162461bcd60e51b815260206004820152602160248201527f416c6570684e465441697264726f707065723a204c696d6974207265616368656044820152601960fa1b60648201526084015b60405180910390fd5b6000888152600a6020526040812080546001929061076e908490612316565b9091555061078490508888888888888888610ae0565b604051600181527f3b0a8ddef325df2bfdfa6b430ae4c8421841cd135bfa8fb5e432f200787520bb9060200160405180910390a15050505050505050565b6107ca611b5d565b60008481526005602052604090205460ff16156108295760405162461bcd60e51b815260206004820152601f60248201527f546865206e6f746520686173206265656e20616c7265616479207370656e74006044820152606401610746565b61083285610b7a565b61087e5760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742066696e6420796f7572206d65726b6c6520726f6f74000000006044820152606401610746565b6040805160c081018252868152602081018690526001600160a01b03858116828401526000606083018190526080830181905260a0830152915163695ef6f960e01b81527f00000000000000000000000000000000000000000000000000000000000000009092169163695ef6f9916108fd918b918b91600401612358565b6020604051808303816000875af115801561091c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094091906123a0565b6109855760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2103bb4ba34323930bb90383937b7b360511b6044820152606401610746565b60005b600089815260076020526040902054811015610a6f5760008981526007602052604090208054829081106109be576109be6123c9565b6000918252602090912001546001600160a01b031663c16e50ef8484848181106109ea576109ea6123c9565b90506020028101906109fc91906123df565b6040518363ffffffff1660e01b8152600401610a19929190612425565b6020604051808303816000875af1158015610a38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5c91906123a0565b5080610a6781612441565b915050610988565b50600084815260056020908152604091829020805460ff1916600117905581516001600160a01b03861681529081018690527f9ebe94a87e9d85fb44a2b38b11c3b10117eba3fbd045c54a8577bc62540d5d75910160405180910390a1610ad66001600455565b5050505050505050565b610af088888888888888886107c2565b60008881526009602052604090819020546008549151632142170760e11b81523060048201526001600160a01b03868116602483015260448201839052919291909116906342842e0e90606401600060405180830381600087803b158015610b5757600080fd5b505af1158015610b6b573d6000803e3d6000fd5b50505050505050505050505050565b6000818103610b8b57506000919050565b60035463ffffffff16805b63ffffffff81166000908152600260205260409020548403610bbc575060019392505050565b8063ffffffff16600003610bce5750601e5b80610bd88161245a565b9150508163ffffffff168163ffffffff1603610b96575060009392505050565b610c038484846113d4565b600854604051632142170760e11b8152336004820152306024820152604481018390526001600160a01b03909116906342842e0e90606401600060405180830381600087803b158015610c5557600080fd5b505af1158015610c69573d6000803e3d6000fd5b50505060009485525060096020526040909320929092555050565b60076020528160005260406000208181548110610ca057600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000858152600b60205260409020819055610cd985858585610bf8565b5050505050565b60006000805160206126dd8339815191528310610d3f5760405162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c646044820152606401610746565b6000805160206126dd8339815191528210610da65760405162461bcd60e51b815260206004820152602160248201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c6044820152601960fa1b6064820152608401610746565b60405163f47d33b560e01b81526004810184905260006024820181905284916001600160a01b0387169063f47d33b5906044016040805180830381865afa158015610df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e19919061247a565b90925090506000805160206126dd83398151915284830860405163f47d33b560e01b815260048101829052602481018390529092506001600160a01b0387169063f47d33b5906044016040805180830381865afa158015610e7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea2919061247a565b509695505050505050565b6060816001600160401b03811115610ec757610ec76124b4565b604051908082528060200260200182016040528015610ef0578160200160208202803683370190505b50905060005b82811015610f6b57610f2f848483818110610f1357610f136123c9565b9050602002013560009081526005602052604090205460ff1690565b15610f59576001828281518110610f4857610f486123c9565b911515602092830291909101909101525b80610f6381612441565b915050610ef6565b5092915050565b8a8914610fd05760405162461bcd60e51b815260206004820152602660248201527f636f6d6d69746d656e747320616e642070726f6f6673206c656e677468206d696044820152650e6dac2e8c6d60d31b6064820152608401610746565b8a871461102d5760405162461bcd60e51b815260206004820152602560248201527f636f6d6d69746d656e747320616e6420726f6f7473206c656e677468206d69736044820152640dac2e8c6d60db1b6064820152608401610746565b8a85146110945760405162461bcd60e51b815260206004820152602f60248201527f636f6d6d69746d656e747320616e64206e756c6c69666965724861736865732060448201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6064820152608401610746565b8a83146110ef5760405162461bcd60e51b815260206004820152602360248201527f636f6d6d69746d656e747320616e6420746f73206c656e677468206d69736d616044820152620e8c6d60eb1b6064820152608401610746565b8a81146111565760405162461bcd60e51b815260206004820152602f60248201527f636f6d6d69746d656e747320616e642076616c69646174696f6e73417267732060448201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6064820152608401610746565b60005b8b811015610b6b576112018d8d83818110611176576111766123c9565b905060200201358c8c8481811061118f5761118f6123c9565b90506020028101906111a191906123df565b8c8c868181106111b3576111b36123c9565b905060200201358b8b878181106111cc576111cc6123c9565b905060200201358a8a888181106111e5576111e56123c9565b90506020020160208101906111fa91906124ca565b89896106d8565b8061120b81612441565b915050611159565b86831461126e5760405162461bcd60e51b815260206004820152602360248201527f636f6d6d69746d656e747320616e6420696473206c656e677468206d69736d616044820152620e8c6d60eb1b6064820152608401610746565b8681146112cc5760405162461bcd60e51b815260206004820152602660248201527f636f6d6d69746d656e747320616e64206c696d697473206c656e677468206d696044820152650e6dac2e8c6d60d31b6064820152608401610746565b8685146113355760405162461bcd60e51b815260206004820152603160248201527f636f6d6d69746d656e747320616e642076616c69646174696f6e4d6f64756c656044820152700e640d8cadccee8d040dad2e6dac2e8c6d607b1b6064820152608401610746565b60005b878110156113c9576113b7898983818110611355576113556123c9565b9050602002013588888481811061136e5761136e6123c9565b905060200281019061138091906124e7565b888886818110611392576113926123c9565b905060200201358787878181106113ab576113ab6123c9565b90506020020135610cbc565b806113c181612441565b915050611338565b505050505050505050565b6113dc611b5d565b60008381526006602052604090205460ff16156114455760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b6064820152608401610746565b600061145084611b87565b6000858152600660205260408120805460ff191660011790559091505b828110156114ee576000858152600760205260409020848483818110611495576114956123c9565b90506020020160208101906114aa91906124ca565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b03909216919091179055806114e681612441565b91505061146d565b506040805163ffffffff8316815242602082015285917fee825d3f4d0fa209d8e2a39afe24a21286d8dc103d63061a2ed322db4ce018e3910160405180910390a25061153a6001600455565b505050565b60008160000361157057507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b8160010361159f57507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b816002036115ce57507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b816003036115fd57507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b8160040361162c57507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b8160050361165b57507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b8160060361168a57507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b816007036116b957507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b816008036116e857507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b8160090361171657507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a0361174557507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b0361177457507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c036117a357507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d036117d257507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e0361180157507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f0361183057507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b8160100361185f57507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b8160110361188e57507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b816012036118bd57507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b816013036118ec57507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b8160140361191b57507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b8160150361194a57507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b8160160361197957507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b816017036119a857507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b816018036119d757507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b81601903611a0657507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a03611a3557507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b03611a6457507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c03611a9257507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d03611ac157507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e03611af057507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f03611b1f57507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b6044820152606401610746565b600260045403611b8057604051633ee5aeb560e01b815260040160405180910390fd5b6002600455565b60035460008054909163ffffffff640100000000909104811691611bad91166002612641565b63ffffffff168163ffffffff1603611c205760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b6064820152608401610746565b8083600080805b60005463ffffffff9081169082161015611cec57611c46600286612656565b63ffffffff16600003611c8457839250611c658163ffffffff1661153f565b63ffffffff821660009081526001602052604090208590559150611ca0565b63ffffffff811660009081526001602052604090205492508391505b611ccb7f00000000000000000000000000000000000000000000000000000000000000008484610ce0565b9350611cd8600286612679565b945080611ce48161269c565b915050611c27565b50600354600090601e90611d079063ffffffff1660016126bf565b611d119190612656565b6003805463ffffffff191663ffffffff831690811790915560009081526002602052604090208590559050611d478660016126bf565b6003805463ffffffff929092166401000000000267ffffffff000000001990921691909117905550939695505050505050565b60008083601f840112611d8c57600080fd5b5081356001600160401b03811115611da357600080fd5b602083019150836020828501011115611dbb57600080fd5b9250929050565b6001600160a01b0381168114611dd757600080fd5b50565b60008083601f840112611dec57600080fd5b5081356001600160401b03811115611e0357600080fd5b6020830191508360208260051b8501011115611dbb57600080fd5b60008060008060008060008060c0898b031215611e3a57600080fd5b8835975060208901356001600160401b0380821115611e5857600080fd5b611e648c838d01611d7a565b909950975060408b0135965060608b0135955060808b01359150611e8782611dc2565b90935060a08a01359080821115611e9d57600080fd5b50611eaa8b828c01611dda565b999c989b5096995094979396929594505050565b600080600080600060808688031215611ed657600080fd5b8535611ee181611dc2565b94506020860135611ef181611dc2565b93506040860135925060608601356001600160401b03811115611f1357600080fd5b611f1f88828901611d7a565b969995985093965092949392505050565b600060208284031215611f4257600080fd5b5035919050565b60008060008060608587031215611f5f57600080fd5b8435935060208501356001600160401b03811115611f7c57600080fd5b611f8887828801611dda565b9598909750949560400135949350505050565b60008060408385031215611fae57600080fd5b50508035926020909101359150565b600080600080600060808688031215611fd557600080fd5b8535945060208601356001600160401b03811115611ff257600080fd5b611ffe88828901611dda565b9699909850959660408101359660609091013595509350505050565b60008060006060848603121561202f57600080fd5b833561203a81611dc2565b95602085013595506040909401359392505050565b6000806020838503121561206257600080fd5b82356001600160401b0381111561207857600080fd5b61208485828601611dda565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156120ca5783511515835292840192918401916001016120ac565b50909695505050505050565b60008060008060008060008060008060008060c08d8f0312156120f857600080fd5b6001600160401b038d35111561210d57600080fd5b61211a8e8e358f01611dda565b909c509a506001600160401b0360208e0135111561213757600080fd5b6121478e60208f01358f01611dda565b909a5098506001600160401b0360408e0135111561216457600080fd5b6121748e60408f01358f01611dda565b90985096506001600160401b0360608e0135111561219157600080fd5b6121a18e60608f01358f01611dda565b90965094506001600160401b0360808e013511156121be57600080fd5b6121ce8e60808f01358f01611dda565b90945092506001600160401b0360a08e013511156121eb57600080fd5b6121fb8e60a08f01358f01611dda565b81935080925050509295989b509295989b509295989b565b6000806000806000806000806080898b03121561222f57600080fd5b88356001600160401b038082111561224657600080fd5b6122528c838d01611dda565b909a50985060208b013591508082111561226b57600080fd5b6122778c838d01611dda565b909850965060408b013591508082111561229057600080fd5b61229c8c838d01611dda565b909650945060608b0135915080821115611e9d57600080fd5b6000806000604084860312156122ca57600080fd5b8335925060208401356001600160401b038111156122e757600080fd5b6122f386828701611dda565b9497909650939450505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561232957612329612300565b92915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60e08152600061236c60e08301858761232f565b905060208083018460005b600681101561239457815183529183019190830190600101612377565b50505050949350505050565b6000602082840312156123b257600080fd5b815180151581146123c257600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126123f657600080fd5b8301803591506001600160401b0382111561241057600080fd5b602001915036819003821315611dbb57600080fd5b60208152600061243960208301848661232f565b949350505050565b60006001820161245357612453612300565b5060010190565b600063ffffffff82168061247057612470612300565b6000190192915050565b6000806040838503121561248d57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6000602082840312156124dc57600080fd5b81356123c281611dc2565b6000808335601e198436030181126124fe57600080fd5b8301803591506001600160401b0382111561251857600080fd5b6020019150600581901b3603821315611dbb57600080fd5b600181815b8085111561256d578163ffffffff0482111561255357612553612300565b8085161561256057918102915b93841c9390800290612535565b509250929050565b60008261258457506001612329565b8161259157506000612329565b81600181146125a757600281146125b1576125e2565b6001915050612329565b60ff8411156125c2576125c2612300565b6001841b915063ffffffff8211156125dc576125dc612300565b50612329565b5060208310610133831016604e8410600b8410161715612619575081810a63ffffffff81111561261457612614612300565b612329565b6126238383612530565b8063ffffffff0482111561263957612639612300565b029392505050565b600063ffffffff612439818516828516612575565b600063ffffffff8084168061266d5761266d61249e565b92169190910692915050565b600063ffffffff808416806126905761269061249e565b92169190910492915050565b600063ffffffff8083168181036126b5576126b5612300565b6001019392505050565b63ffffffff818116838216019080821115610f6b57610f6b61230056fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a264697066735822122041a3ea82d4d280eb309309aec368c8a1860f15a61abf11f8a29dadc8f3a6bbc264736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c80638ea3099e11610102578063cd87a3b411610095578063ed33639f11610064578063ed33639f14610632578063f178e47c14610666578063fc0c546a14610693578063fc7e9c6f146106b357600080fd5b8063cd87a3b414610599578063e5285dcc146105ae578063e8295588146105de578063ec732959146105fe57600080fd5b8063bffa9872116100d1578063bffa987214610526578063c2b40ae414610546578063c858e25e14610573578063cc013d851461058657600080fd5b80638ea3099e1461049257806390eeb02b146104b25780639fa12d0b146104cf578063ba70f757146104fc57600080fd5b80634648c9431161017a5780637835a0c9116101495780637835a0c91461041c578063838a11fd1461042f578063839df9451461044f5780638c9c15d41461047f57600080fd5b80634648c943146103705780634ecf518b1461039d5780635c1b7d38146103cf5780636d9833e3146103fc57600080fd5b80632b7ac3f3116101b65780632b7ac3f3146102cf5780633e7fd3b41461031b578063414a37ba1461032e5780634488e5951461035057600080fd5b806307233c81146101e8578063150b7a021461020a57806317cc915c146102545780632469ab9214610294575b600080fd5b3480156101f457600080fd5b50610208610203366004611e1e565b6106d8565b005b34801561021657600080fd5b50610236610225366004611ebe565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020015b60405180910390f35b34801561026057600080fd5b5061028461026f366004611f30565b60056020526000908152604090205460ff1681565b604051901515815260200161024b565b3480156102a057600080fd5b506102c16102af366004611f30565b60096020526000908152604090205481565b60405190815260200161024b565b3480156102db57600080fd5b506103037f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161024b565b610208610329366004611e1e565b6107c2565b34801561033a57600080fd5b506102c16000805160206126dd83398151915281565b34801561035c57600080fd5b5061020861036b366004611e1e565b610ae0565b34801561037c57600080fd5b506102c161038b366004611f30565b600a6020526000908152604090205481565b3480156103a957600080fd5b506000546103ba9063ffffffff1681565b60405163ffffffff909116815260200161024b565b3480156103db57600080fd5b506102c16103ea366004611f30565b600b6020526000908152604090205481565b34801561040857600080fd5b50610284610417366004611f30565b610b7a565b61020861042a366004611f49565b610bf8565b34801561043b57600080fd5b5061030361044a366004611f9b565b610c84565b34801561045b57600080fd5b5061028461046a366004611f30565b60066020526000908152604090205460ff1681565b61020861048d366004611fbd565b610cbc565b34801561049e57600080fd5b506102c16104ad36600461201a565b610ce0565b3480156104be57600080fd5b506003546103ba9063ffffffff1681565b3480156104db57600080fd5b506104ef6104ea36600461204f565b610ead565b60405161024b9190612090565b34801561050857600080fd5b5060035463ffffffff166000908152600260205260409020546102c1565b34801561053257600080fd5b506102086105413660046120d6565b610f72565b34801561055257600080fd5b506102c1610561366004611f30565b60026020526000908152604090205481565b610208610581366004612213565b611213565b6102086105943660046122b5565b6113d4565b3480156105a557600080fd5b506103ba601e81565b3480156105ba57600080fd5b506102846105c9366004611f30565b60009081526005602052604090205460ff1690565b3480156105ea57600080fd5b506102c16105f9366004611f30565b61153f565b34801561060a57600080fd5b506102c17f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b34801561063e57600080fd5b506103037f000000000000000000000000000000000000000000000000000000000000000081565b34801561067257600080fd5b506102c1610681366004611f30565b60016020526000908152604090205481565b34801561069f57600080fd5b50600854610303906001600160a01b031681565b3480156106bf57600080fd5b506003546103ba90640100000000900463ffffffff1681565b6000888152600b6020908152604080832054600a909252909120541061074f5760405162461bcd60e51b815260206004820152602160248201527f416c6570684e465441697264726f707065723a204c696d6974207265616368656044820152601960fa1b60648201526084015b60405180910390fd5b6000888152600a6020526040812080546001929061076e908490612316565b9091555061078490508888888888888888610ae0565b604051600181527f3b0a8ddef325df2bfdfa6b430ae4c8421841cd135bfa8fb5e432f200787520bb9060200160405180910390a15050505050505050565b6107ca611b5d565b60008481526005602052604090205460ff16156108295760405162461bcd60e51b815260206004820152601f60248201527f546865206e6f746520686173206265656e20616c7265616479207370656e74006044820152606401610746565b61083285610b7a565b61087e5760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742066696e6420796f7572206d65726b6c6520726f6f74000000006044820152606401610746565b6040805160c081018252868152602081018690526001600160a01b03858116828401526000606083018190526080830181905260a0830152915163695ef6f960e01b81527f00000000000000000000000000000000000000000000000000000000000000009092169163695ef6f9916108fd918b918b91600401612358565b6020604051808303816000875af115801561091c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094091906123a0565b6109855760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2103bb4ba34323930bb90383937b7b360511b6044820152606401610746565b60005b600089815260076020526040902054811015610a6f5760008981526007602052604090208054829081106109be576109be6123c9565b6000918252602090912001546001600160a01b031663c16e50ef8484848181106109ea576109ea6123c9565b90506020028101906109fc91906123df565b6040518363ffffffff1660e01b8152600401610a19929190612425565b6020604051808303816000875af1158015610a38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5c91906123a0565b5080610a6781612441565b915050610988565b50600084815260056020908152604091829020805460ff1916600117905581516001600160a01b03861681529081018690527f9ebe94a87e9d85fb44a2b38b11c3b10117eba3fbd045c54a8577bc62540d5d75910160405180910390a1610ad66001600455565b5050505050505050565b610af088888888888888886107c2565b60008881526009602052604090819020546008549151632142170760e11b81523060048201526001600160a01b03868116602483015260448201839052919291909116906342842e0e90606401600060405180830381600087803b158015610b5757600080fd5b505af1158015610b6b573d6000803e3d6000fd5b50505050505050505050505050565b6000818103610b8b57506000919050565b60035463ffffffff16805b63ffffffff81166000908152600260205260409020548403610bbc575060019392505050565b8063ffffffff16600003610bce5750601e5b80610bd88161245a565b9150508163ffffffff168163ffffffff1603610b96575060009392505050565b610c038484846113d4565b600854604051632142170760e11b8152336004820152306024820152604481018390526001600160a01b03909116906342842e0e90606401600060405180830381600087803b158015610c5557600080fd5b505af1158015610c69573d6000803e3d6000fd5b50505060009485525060096020526040909320929092555050565b60076020528160005260406000208181548110610ca057600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000858152600b60205260409020819055610cd985858585610bf8565b5050505050565b60006000805160206126dd8339815191528310610d3f5760405162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c646044820152606401610746565b6000805160206126dd8339815191528210610da65760405162461bcd60e51b815260206004820152602160248201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c6044820152601960fa1b6064820152608401610746565b60405163f47d33b560e01b81526004810184905260006024820181905284916001600160a01b0387169063f47d33b5906044016040805180830381865afa158015610df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e19919061247a565b90925090506000805160206126dd83398151915284830860405163f47d33b560e01b815260048101829052602481018390529092506001600160a01b0387169063f47d33b5906044016040805180830381865afa158015610e7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea2919061247a565b509695505050505050565b6060816001600160401b03811115610ec757610ec76124b4565b604051908082528060200260200182016040528015610ef0578160200160208202803683370190505b50905060005b82811015610f6b57610f2f848483818110610f1357610f136123c9565b9050602002013560009081526005602052604090205460ff1690565b15610f59576001828281518110610f4857610f486123c9565b911515602092830291909101909101525b80610f6381612441565b915050610ef6565b5092915050565b8a8914610fd05760405162461bcd60e51b815260206004820152602660248201527f636f6d6d69746d656e747320616e642070726f6f6673206c656e677468206d696044820152650e6dac2e8c6d60d31b6064820152608401610746565b8a871461102d5760405162461bcd60e51b815260206004820152602560248201527f636f6d6d69746d656e747320616e6420726f6f7473206c656e677468206d69736044820152640dac2e8c6d60db1b6064820152608401610746565b8a85146110945760405162461bcd60e51b815260206004820152602f60248201527f636f6d6d69746d656e747320616e64206e756c6c69666965724861736865732060448201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6064820152608401610746565b8a83146110ef5760405162461bcd60e51b815260206004820152602360248201527f636f6d6d69746d656e747320616e6420746f73206c656e677468206d69736d616044820152620e8c6d60eb1b6064820152608401610746565b8a81146111565760405162461bcd60e51b815260206004820152602f60248201527f636f6d6d69746d656e747320616e642076616c69646174696f6e73417267732060448201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6064820152608401610746565b60005b8b811015610b6b576112018d8d83818110611176576111766123c9565b905060200201358c8c8481811061118f5761118f6123c9565b90506020028101906111a191906123df565b8c8c868181106111b3576111b36123c9565b905060200201358b8b878181106111cc576111cc6123c9565b905060200201358a8a888181106111e5576111e56123c9565b90506020020160208101906111fa91906124ca565b89896106d8565b8061120b81612441565b915050611159565b86831461126e5760405162461bcd60e51b815260206004820152602360248201527f636f6d6d69746d656e747320616e6420696473206c656e677468206d69736d616044820152620e8c6d60eb1b6064820152608401610746565b8681146112cc5760405162461bcd60e51b815260206004820152602660248201527f636f6d6d69746d656e747320616e64206c696d697473206c656e677468206d696044820152650e6dac2e8c6d60d31b6064820152608401610746565b8685146113355760405162461bcd60e51b815260206004820152603160248201527f636f6d6d69746d656e747320616e642076616c69646174696f6e4d6f64756c656044820152700e640d8cadccee8d040dad2e6dac2e8c6d607b1b6064820152608401610746565b60005b878110156113c9576113b7898983818110611355576113556123c9565b9050602002013588888481811061136e5761136e6123c9565b905060200281019061138091906124e7565b888886818110611392576113926123c9565b905060200201358787878181106113ab576113ab6123c9565b90506020020135610cbc565b806113c181612441565b915050611338565b505050505050505050565b6113dc611b5d565b60008381526006602052604090205460ff16156114455760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b6064820152608401610746565b600061145084611b87565b6000858152600660205260408120805460ff191660011790559091505b828110156114ee576000858152600760205260409020848483818110611495576114956123c9565b90506020020160208101906114aa91906124ca565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b03909216919091179055806114e681612441565b91505061146d565b506040805163ffffffff8316815242602082015285917fee825d3f4d0fa209d8e2a39afe24a21286d8dc103d63061a2ed322db4ce018e3910160405180910390a25061153a6001600455565b505050565b60008160000361157057507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b8160010361159f57507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b816002036115ce57507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b816003036115fd57507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b8160040361162c57507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b8160050361165b57507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b8160060361168a57507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b816007036116b957507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b816008036116e857507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b8160090361171657507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a0361174557507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b0361177457507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c036117a357507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d036117d257507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e0361180157507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f0361183057507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b8160100361185f57507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b8160110361188e57507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b816012036118bd57507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b816013036118ec57507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b8160140361191b57507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b8160150361194a57507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b8160160361197957507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b816017036119a857507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b816018036119d757507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b81601903611a0657507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a03611a3557507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b03611a6457507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c03611a9257507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d03611ac157507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e03611af057507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f03611b1f57507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b6044820152606401610746565b600260045403611b8057604051633ee5aeb560e01b815260040160405180910390fd5b6002600455565b60035460008054909163ffffffff640100000000909104811691611bad91166002612641565b63ffffffff168163ffffffff1603611c205760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b6064820152608401610746565b8083600080805b60005463ffffffff9081169082161015611cec57611c46600286612656565b63ffffffff16600003611c8457839250611c658163ffffffff1661153f565b63ffffffff821660009081526001602052604090208590559150611ca0565b63ffffffff811660009081526001602052604090205492508391505b611ccb7f00000000000000000000000000000000000000000000000000000000000000008484610ce0565b9350611cd8600286612679565b945080611ce48161269c565b915050611c27565b50600354600090601e90611d079063ffffffff1660016126bf565b611d119190612656565b6003805463ffffffff191663ffffffff831690811790915560009081526002602052604090208590559050611d478660016126bf565b6003805463ffffffff929092166401000000000267ffffffff000000001990921691909117905550939695505050505050565b60008083601f840112611d8c57600080fd5b5081356001600160401b03811115611da357600080fd5b602083019150836020828501011115611dbb57600080fd5b9250929050565b6001600160a01b0381168114611dd757600080fd5b50565b60008083601f840112611dec57600080fd5b5081356001600160401b03811115611e0357600080fd5b6020830191508360208260051b8501011115611dbb57600080fd5b60008060008060008060008060c0898b031215611e3a57600080fd5b8835975060208901356001600160401b0380821115611e5857600080fd5b611e648c838d01611d7a565b909950975060408b0135965060608b0135955060808b01359150611e8782611dc2565b90935060a08a01359080821115611e9d57600080fd5b50611eaa8b828c01611dda565b999c989b5096995094979396929594505050565b600080600080600060808688031215611ed657600080fd5b8535611ee181611dc2565b94506020860135611ef181611dc2565b93506040860135925060608601356001600160401b03811115611f1357600080fd5b611f1f88828901611d7a565b969995985093965092949392505050565b600060208284031215611f4257600080fd5b5035919050565b60008060008060608587031215611f5f57600080fd5b8435935060208501356001600160401b03811115611f7c57600080fd5b611f8887828801611dda565b9598909750949560400135949350505050565b60008060408385031215611fae57600080fd5b50508035926020909101359150565b600080600080600060808688031215611fd557600080fd5b8535945060208601356001600160401b03811115611ff257600080fd5b611ffe88828901611dda565b9699909850959660408101359660609091013595509350505050565b60008060006060848603121561202f57600080fd5b833561203a81611dc2565b95602085013595506040909401359392505050565b6000806020838503121561206257600080fd5b82356001600160401b0381111561207857600080fd5b61208485828601611dda565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156120ca5783511515835292840192918401916001016120ac565b50909695505050505050565b60008060008060008060008060008060008060c08d8f0312156120f857600080fd5b6001600160401b038d35111561210d57600080fd5b61211a8e8e358f01611dda565b909c509a506001600160401b0360208e0135111561213757600080fd5b6121478e60208f01358f01611dda565b909a5098506001600160401b0360408e0135111561216457600080fd5b6121748e60408f01358f01611dda565b90985096506001600160401b0360608e0135111561219157600080fd5b6121a18e60608f01358f01611dda565b90965094506001600160401b0360808e013511156121be57600080fd5b6121ce8e60808f01358f01611dda565b90945092506001600160401b0360a08e013511156121eb57600080fd5b6121fb8e60a08f01358f01611dda565b81935080925050509295989b509295989b509295989b565b6000806000806000806000806080898b03121561222f57600080fd5b88356001600160401b038082111561224657600080fd5b6122528c838d01611dda565b909a50985060208b013591508082111561226b57600080fd5b6122778c838d01611dda565b909850965060408b013591508082111561229057600080fd5b61229c8c838d01611dda565b909650945060608b0135915080821115611e9d57600080fd5b6000806000604084860312156122ca57600080fd5b8335925060208401356001600160401b038111156122e757600080fd5b6122f386828701611dda565b9497909650939450505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561232957612329612300565b92915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60e08152600061236c60e08301858761232f565b905060208083018460005b600681101561239457815183529183019190830190600101612377565b50505050949350505050565b6000602082840312156123b257600080fd5b815180151581146123c257600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126123f657600080fd5b8301803591506001600160401b0382111561241057600080fd5b602001915036819003821315611dbb57600080fd5b60208152600061243960208301848661232f565b949350505050565b60006001820161245357612453612300565b5060010190565b600063ffffffff82168061247057612470612300565b6000190192915050565b6000806040838503121561248d57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6000602082840312156124dc57600080fd5b81356123c281611dc2565b6000808335601e198436030181126124fe57600080fd5b8301803591506001600160401b0382111561251857600080fd5b6020019150600581901b3603821315611dbb57600080fd5b600181815b8085111561256d578163ffffffff0482111561255357612553612300565b8085161561256057918102915b93841c9390800290612535565b509250929050565b60008261258457506001612329565b8161259157506000612329565b81600181146125a757600281146125b1576125e2565b6001915050612329565b60ff8411156125c2576125c2612300565b6001841b915063ffffffff8211156125dc576125dc612300565b50612329565b5060208310610133831016604e8410600b8410161715612619575081810a63ffffffff81111561261457612614612300565b612329565b6126238383612530565b8063ffffffff0482111561263957612639612300565b029392505050565b600063ffffffff612439818516828516612575565b600063ffffffff8084168061266d5761266d61249e565b92169190910692915050565b600063ffffffff808416806126905761269061249e565b92169190910492915050565b600063ffffffff8083168181036126b5576126b5612300565b6001019392505050565b63ffffffff818116838216019080821115610f6b57610f6b61230056fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a264697066735822122041a3ea82d4d280eb309309aec368c8a1860f15a61abf11f8a29dadc8f3a6bbc264736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "consumeCode(bytes32,bytes,bytes32,bytes32,address,bytes[])": {
        "details": "Consume a code from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all codes in the contract - hash of unique codes nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)"
      },
      "getLastRoot()": {
        "details": "Returns the last root"
      },
      "hashLeftRight(address,bytes32,bytes32)": {
        "details": "Hash 2 tree leaves, returns MiMC(_left, _right)"
      },
      "isKnownRoot(bytes32)": {
        "details": "Whether the root is present in the root history"
      },
      "isSpent(bytes32)": {
        "details": "whether a note is already spent "
      },
      "isSpentArray(bytes32[])": {
        "details": "whether an array of notes is already spent "
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
      },
      "setCode(bytes32,address[])": {
        "details": "Set new code.",
        "params": {
          "_commitment": "the note commitment, which is PedersenHash(nullifier + secret)"
        }
      },
      "zeros(uint256)": {
        "details": "provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 656,
        "contract": "contracts/useCases/AlephNFTAirdropper.sol:AlephNFTAirdropper",
        "label": "levels",
        "offset": 0,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 660,
        "contract": "contracts/useCases/AlephNFTAirdropper.sol:AlephNFTAirdropper",
        "label": "filledSubtrees",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 664,
        "contract": "contracts/useCases/AlephNFTAirdropper.sol:AlephNFTAirdropper",
        "label": "roots",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 670,
        "contract": "contracts/useCases/AlephNFTAirdropper.sol:AlephNFTAirdropper",
        "label": "currentRootIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 673,
        "contract": "contracts/useCases/AlephNFTAirdropper.sol:AlephNFTAirdropper",
        "label": "nextIndex",
        "offset": 4,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 145,
        "contract": "contracts/useCases/AlephNFTAirdropper.sol:AlephNFTAirdropper",
        "label": "_status",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 243,
        "contract": "contracts/useCases/AlephNFTAirdropper.sol:AlephNFTAirdropper",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 247,
        "contract": "contracts/useCases/AlephNFTAirdropper.sol:AlephNFTAirdropper",
        "label": "commitments",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 252,
        "contract": "contracts/useCases/AlephNFTAirdropper.sol:AlephNFTAirdropper",
        "label": "validationModules",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 521,
        "contract": "contracts/useCases/AlephNFTAirdropper.sol:AlephNFTAirdropper",
        "label": "token",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC721)116"
      },
      {
        "astId": 525,
        "contract": "contracts/useCases/AlephNFTAirdropper.sol:AlephNFTAirdropper",
        "label": "TransferId",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 1325,
        "contract": "contracts/useCases/AlephNFTAirdropper.sol:AlephNFTAirdropper",
        "label": "consumed",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 1329,
        "contract": "contracts/useCases/AlephNFTAirdropper.sol:AlephNFTAirdropper",
        "label": "limits",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC721)116": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}